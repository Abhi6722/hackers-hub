"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9854],{4137:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return d}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=u(n),d=a,f=m["".concat(l,".").concat(d)]||m[d]||c[d]||i;return n?r.createElement(f,s(s({ref:t},p),{},{components:n})):r.createElement(f,s({ref:t},p))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,s=new Array(i);s[0]=m;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:a,s[1]=o;for(var u=2;u<i;u++)s[u]=n[u];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8448:function(e,t,n){var r=n(7294);t.Z=function(e){var t=e.children,n=e.hidden,a=e.className;return r.createElement("div",{role:"tabpanel",hidden:n,className:a},t)}},7225:function(e,t,n){n.d(t,{Z:function(){return m}});var r=n(7462),a=n(7294),i=n(1048),s=n(2713);var o=function(){var e=(0,a.useContext)(s.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e},l=n(3309),u=n(6010),p="tabItem_vU9c";function c(e){var t,n,r,i=e.lazy,s=e.block,c=e.defaultValue,m=e.values,d=e.groupId,f=e.className,k=a.Children.map(e.children,(function(e){if((0,a.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),b=null!=m?m:k.map((function(e){var t=e.props;return{value:t.value,label:t.label}})),v=(0,l.lx)(b,(function(e,t){return e.value===t.value}));if(v.length>0)throw new Error('Docusaurus error: Duplicate values "'+v.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var h=null===c?c:null!=(t=null!=c?c:null==(n=k.find((function(e){return e.props.default})))?void 0:n.props.value)?t:null==(r=k[0])?void 0:r.props.value;if(null!==h&&!b.some((function(e){return e.value===h})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+h+'" but none of its children has the corresponding value. Available values are: '+b.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var g=o(),y=g.tabGroupChoices,N=g.setTabGroupChoices,w=(0,a.useState)(h),j=w[0],x=w[1],O=[],C=(0,l.o5)().blockElementScrollPositionUntilNextRender;if(null!=d){var E=y[d];null!=E&&E!==j&&b.some((function(e){return e.value===E}))&&x(E)}var _=function(e){var t=e.currentTarget,n=O.indexOf(t),r=b[n].value;r!==j&&(C(t),x(r),null!=d&&N(d,r))},T=function(e){var t,n=null;switch(e.key){case"ArrowRight":var r=O.indexOf(e.currentTarget)+1;n=O[r]||O[0];break;case"ArrowLeft":var a=O.indexOf(e.currentTarget)-1;n=O[a]||O[O.length-1]}null==(t=n)||t.focus()};return a.createElement("div",{className:"tabs-container"},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,u.Z)("tabs",{"tabs--block":s},f)},b.map((function(e){var t=e.value,n=e.label;return a.createElement("li",{role:"tab",tabIndex:j===t?0:-1,"aria-selected":j===t,className:(0,u.Z)("tabs__item",p,{"tabs__item--active":j===t}),key:t,ref:function(e){return O.push(e)},onKeyDown:T,onFocus:_,onClick:_},null!=n?n:t)}))),i?(0,a.cloneElement)(k.filter((function(e){return e.props.value===j}))[0],{className:"margin-vert--md"}):a.createElement("div",{className:"margin-vert--md"},k.map((function(e,t){return(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==j})}))))}function m(e){var t=(0,i.Z)();return a.createElement(c,(0,r.Z)({key:String(t)},e))}},2713:function(e,t,n){var r=(0,n(7294).createContext)(void 0);t.Z=r},7100:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return l},metadata:function(){return u},toc:function(){return p},default:function(){return m}});var r=n(7462),a=n(3366),i=(n(7294),n(4137)),s=(n(7225),n(8448),["components"]),o={id:"junit-reporter",title:"Junit Reporter",custom_edit_url:"https://github.com/webdriverio/webdriverio/edit/main/packages/wdio-junit-reporter/README.md"},l=void 0,u={unversionedId:"junit-reporter",id:"junit-reporter",isDocsHomePage:!1,title:"Junit Reporter",description:"A WebdriverIO reporter that creates Jenkins compatible XML based JUnit reports",source:"@site/docs/_junit-reporter.md",sourceDirName:".",slug:"/junit-reporter",permalink:"/docs/junit-reporter",editUrl:"https://github.com/webdriverio/webdriverio/edit/main/packages/wdio-junit-reporter/README.md",tags:[],version:"current",frontMatter:{id:"junit-reporter",title:"Junit Reporter",custom_edit_url:"https://github.com/webdriverio/webdriverio/edit/main/packages/wdio-junit-reporter/README.md"},sidebar:"docs",previous:{title:"Dot Reporter",permalink:"/docs/dot-reporter"},next:{title:"Spec Reporter",permalink:"/docs/spec-reporter"}},p=[{value:"Installation",id:"installation",children:[],level:2},{value:"Output",id:"output",children:[{value:"Single describe block",id:"single-describe-block",children:[],level:3},{value:"Nested describe block",id:"nested-describe-block",children:[],level:3},{value:"Multiple describe block",id:"multiple-describe-block",children:[],level:3},{value:"Failures and Errors",id:"failures-and-errors",children:[],level:3}],level:2},{value:"Configuration",id:"configuration",children:[{value:"outputDir",id:"outputdir",children:[],level:3},{value:"outputFileFormat",id:"outputfileformat",children:[],level:3},{value:"suiteNameFormat",id:"suitenameformat",children:[],level:3},{value:"addFileAttribute",id:"addfileattribute",children:[],level:3},{value:"packageName",id:"packagename",children:[],level:3},{value:"errorOptions",id:"erroroptions",children:[],level:3}],level:2},{value:"Jenkins Setup",id:"jenkins-setup",children:[],level:2}],c={toc:p};function m(e){var t=e.components,n=(0,a.Z)(e,s);return(0,i.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"A WebdriverIO reporter that creates ",(0,i.kt)("a",{parentName:"p",href:"http://jenkins-ci.org/"},"Jenkins")," compatible XML based JUnit reports")),(0,i.kt)("h2",{id:"installation"},"Installation"),(0,i.kt)("p",null,"The easiest way is to keep ",(0,i.kt)("inlineCode",{parentName:"p"},"@wdio/junit-reporter")," as a devDependency in your ",(0,i.kt)("inlineCode",{parentName:"p"},"package.json"),", via:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"npm install @wdio/junit-reporter --save-dev\n")),(0,i.kt)("p",null,"Instructions on how to install ",(0,i.kt)("inlineCode",{parentName:"p"},"WebdriverIO")," can be found ",(0,i.kt)("a",{parentName:"p",href:"https://webdriver.io/docs/gettingstarted"},"here"),"."),(0,i.kt)("h2",{id:"output"},"Output"),(0,i.kt)("p",null,"This reporter will output a report for each runner, so in turn you will receive an xml report for each spec file. Below\nare examples of XML output given different scenarios in the spec file."),(0,i.kt)("h3",{id:"single-describe-block"},"Single describe block"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"describe('a test suite', () => {\n    it('a test case', function () {\n      // do something\n      // assert something\n    });\n});\n")),(0,i.kt)("p",null,"becomes"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},'<testsuites>\n    <testsuite name="a test suite" timestamp="2019-04-18T13:45:21" time="11.735" tests="0" failures="0" errors="0" skipped="0">\n        <properties>\n          <property name="specId" value="0"/>\n          <property name="suiteName" value="a test suite"/>\n          <property name="capabilities" value="chrome"/>\n          <property name="file" value=".\\test\\specs\\asuite.spec.js"/>\n        </properties>\n        <testcase classname="chrome.a_test_case" name="a_test_suite_a_test_case" time="11.706"/>\n    </testsuite>\n</testsuites>\n')),(0,i.kt)("h3",{id:"nested-describe-block"},"Nested describe block"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"describe('a test suite', () => {\n    describe('a nested test suite', function() {\n        it('a test case', function () {\n          // do something\n          // assert something\n        });\n    });\n});\n")),(0,i.kt)("p",null,"becomes"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},'<testsuites>\n    <testsuite name="a test suite" timestamp="2019-04-18T13:45:21" time="11.735" tests="0" failures="0" errors="0" skipped="0">\n    <properties>\n      <property name="specId" value="0"/>\n      <property name="suiteName" value="a test suite"/>\n      <property name="capabilities" value="chrome"/>\n      <property name="file" value=".\\test\\specs\\asuite.spec.js"/>\n    </properties>\n  </testsuite>\n  <testsuite name="a nested test suite" timestamp="2019-04-18T13:45:21" time="11.735" tests="0" failures="0" errors="0" skipped="0">\n    <properties>\n      <property name="specId" value="0"/>\n      <property name="suiteName" value="a nested test suite"/>\n      <property name="capabilities" value="chrome"/>\n      <property name="file" value=".\\test\\specs\\asuite.spec.js"/>\n    </properties>\n    <testcase classname="chrome.a_test_case" name="a nested test suite a test case" time="11.706"/>\n  </testsuite>\n</testsuites>\n')),(0,i.kt)("h3",{id:"multiple-describe-block"},"Multiple describe block"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"describe('a test suite', () => {\n    it('a test case', function () {\n      // do something\n      // assert something\n    });\n});\ndescribe('a second test suite', () => {\n    it('a second test case', function () {\n      // do something\n      // assert something\n    });\n});\n")),(0,i.kt)("p",null,"becomes"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},'<testsuites>\n    <testsuite name="a test suite" timestamp="2019-04-18T13:45:21" time="11.735" tests="0" failures="0" errors="0" skipped="0">\n    <properties>\n      <property name="specId" value="0"/>\n      <property name="suiteName" value="a test suite"/>\n      <property name="capabilities" value="chrome"/>\n      <property name="file" value=".\\test\\specs\\asuite.spec.js"/>\n      <testcase classname="chrome.a_test_case" name="a nested test suite a test case" time="11.706"/>\n    </properties>\n  </testsuite>\n  <testsuite name="a second test suite" timestamp="2019-04-18T13:45:21" time="11.735" tests="0" failures="0" errors="0" skipped="0">\n    <properties>\n      <property name="specId" value="0"/>\n      <property name="suiteName" value="a second test suite"/>\n      <property name="capabilities" value="chrome"/>\n      <property name="file" value=".\\test\\specs\\asuite.spec.js"/>\n    </properties>\n    <testcase classname="chrome.a_second_test_case" name="a_second_test_suite_a_second_test_case" time="11.706"/>\n  </testsuite>\n</testsuites>\n')),(0,i.kt)("h3",{id:"failures-and-errors"},"Failures and Errors"),(0,i.kt)("p",null,"All test case failures are mapped as JUnit test case errors. A failed test case due to assertion failure or error will look like:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},'<testcase classname="chrome.a_test_case" name="a_test_suite_a_test_case" time="0.372">\n  <error message="Error: some error"/>\n    <system-err>\n        <![CDATA[\nError: some assertion failure\n    at UserContext.<anonymous> (C:\\repo\\webdriver-example\\test\\specs/a_test_suite.spec.js:22:17)\n]]>\n  </system-err>\n</testcase>\n')),(0,i.kt)("h2",{id:"configuration"},"Configuration"),(0,i.kt)("p",null,"Following code shows the default wdio test runner configuration. Just add ",(0,i.kt)("inlineCode",{parentName:"p"},"'junit'")," as reporter\nto the array. To get some output during the test you can run the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/webdriverio/webdriverio/tree/main/packages/wdio-dot-reporter"},"WDIO Dot Reporter")," and the WDIO JUnit Reporter at the same time:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"// wdio.conf.js\nmodule.exports = {\n    // ...\n    reporters: [\n        'dot',\n        ['junit', {\n            outputDir: './',\n            outputFileFormat: function(options) { // optional\n                return `results-${options.cid}.${options.capabilities}.xml`\n            }\n        }]\n    ],\n    // ...\n};\n")),(0,i.kt)("p",null,"The following options are supported:"),(0,i.kt)("h3",{id:"outputdir"},"outputDir"),(0,i.kt)("p",null,"Define a directory where your xml files should get stored."),(0,i.kt)("p",null,"Type: ",(0,i.kt)("inlineCode",{parentName:"p"},"String"),(0,i.kt)("br",null),"\nRequired"),(0,i.kt)("h3",{id:"outputfileformat"},"outputFileFormat"),(0,i.kt)("p",null,"Define the xml files created after the test execution."),(0,i.kt)("p",null,"Type: ",(0,i.kt)("inlineCode",{parentName:"p"},"Object"),(0,i.kt)("br",null),"\nDefault: ",(0,i.kt)("inlineCode",{parentName:"p"},"function (opts) { return `wdio-${this.cid}-${name}-reporter.log` }")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"outputFileFormat: function (options) {\n    return 'mycustomfilename.xml';\n}\n")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Note: ",(0,i.kt)("inlineCode",{parentName:"p"},"options.capabilities")," is your capabilities object for that runner, so specifying ",(0,i.kt)("inlineCode",{parentName:"p"},"${options.capabilities}")," in your string will return ","[Object object]",". You must specify which properties of capabilities you want in your filename.")),(0,i.kt)("h3",{id:"suitenameformat"},"suiteNameFormat"),(0,i.kt)("p",null,"Gives the ability to provide custom regex for formatting test suite name (e.g. in output xml )."),(0,i.kt)("p",null,"Type: ",(0,i.kt)("inlineCode",{parentName:"p"},"Regex"),",",(0,i.kt)("br",null),"\nDefault: ",(0,i.kt)("inlineCode",{parentName:"p"},"/[^a-z0-9]+/")),(0,i.kt)("h3",{id:"addfileattribute"},"addFileAttribute"),(0,i.kt)("p",null,"Adds a file attribute to each testcase. This config is primarily for CircleCI. This setting provides richer details but may break on other CI platforms."),(0,i.kt)("p",null,"Type: ",(0,i.kt)("inlineCode",{parentName:"p"},"Boolean"),",",(0,i.kt)("br",null),"\nDefault: ",(0,i.kt)("inlineCode",{parentName:"p"},"false")),(0,i.kt)("h3",{id:"packagename"},"packageName"),(0,i.kt)("p",null,"You can break out packages by an additional level by setting ",(0,i.kt)("inlineCode",{parentName:"p"},"'packageName'"),". For example, if you wanted to iterate over a test suite with different environment variable set:"),(0,i.kt)("p",null,"Type: ",(0,i.kt)("inlineCode",{parentName:"p"},"String"),(0,i.kt)("br",null),"\nExample:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"// wdio.conf.js\nmodule.exports = {\n    // ...\n    reporters: [\n        'dot',\n        ['junit', {\n            outputDir: './',\n            packageName: process.env.USER_ROLE // chrome.41 - administrator\n        }]\n    ]\n    // ...\n};\n")),(0,i.kt)("h3",{id:"erroroptions"},"errorOptions"),(0,i.kt)("p",null,"Allows to set various combinations of error notifications inside xml.",(0,i.kt)("br",null),"\nGiven a Jasmine test like ",(0,i.kt)("inlineCode",{parentName:"p"},"expect(true).toBe(false, 'my custom message')")," you will get this test error:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"{\n    matcherName: 'toBe',\n    message: 'Expected true to be false, \\'my custom message\\'.',\n    stack: 'Error: Expected true to be false, \\'my custom message\\'.\\n    at UserContext.it (/home/mcelotti/Workspace/WebstormProjects/forcebeatwio/test/marco/prova1.spec.js:3:22)',\n    passed: false,\n    expected: [ false, 'my custom message' ],\n    actual: true\n}\n")),(0,i.kt)("p",null,"Therefore you can choose ",(0,i.kt)("em",{parentName:"p"},"which")," key will be used ",(0,i.kt)("em",{parentName:"p"},"where"),", see the example below."),(0,i.kt)("p",null,"Type: ",(0,i.kt)("inlineCode",{parentName:"p"},"Object"),",",(0,i.kt)("br",null),"\nDefault: ",(0,i.kt)("inlineCode",{parentName:"p"},'errorOptions: { error: "message" }'),(0,i.kt)("br",null),"\nExample:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"// wdio.conf.js\nmodule.exports = {\n    // ...\n    reporters: [\n        'dot',\n        ['junit', {\n            outputDir: './',\n            errorOptions: {\n                error: 'message',\n                failure: 'message',\n                stacktrace: 'stack'\n            }\n        }]\n    ],\n    // ...\n};\n")),(0,i.kt)("h2",{id:"jenkins-setup"},"Jenkins Setup"),(0,i.kt)("p",null,"Last but not least you need to tell your CI job (e.g. Jenkins) where it can find the xml file. To do that, add a post-build action to your job that gets executed after the test has run and point Jenkins (or your desired CI system) to your XML test results:"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://webdriver.io/img/jenkins-postjob.png",alt:"Point Jenkins to XML files",title:"Point Jenkins to XML files"})),(0,i.kt)("p",null,"If there is no such post-build step in your CI system there is probably a plugin for that somewhere on the internet."),(0,i.kt)("hr",null),(0,i.kt)("p",null,"For more information on WebdriverIO see the ",(0,i.kt)("a",{parentName:"p",href:"https://webdriver.io"},"homepage"),"."))}m.isMDXComponent=!0}}]);