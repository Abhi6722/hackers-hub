"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6464],{4137:function(e,t,o){o.d(t,{Zo:function(){return p},kt:function(){return m}});var n=o(7294);function r(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function s(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,n)}return o}function a(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?s(Object(o),!0).forEach((function(t){r(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):s(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function i(e,t){if(null==e)return{};var o,n,r=function(e,t){if(null==e)return{};var o,n,r={},s=Object.keys(e);for(n=0;n<s.length;n++)o=s[n],t.indexOf(o)>=0||(r[o]=e[o]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)o=s[n],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(r[o]=e[o])}return r}var c=n.createContext({}),l=function(e){var t=n.useContext(c),o=t;return e&&(o="function"==typeof e?e(t):a(a({},t),e)),o},p=function(e){var t=l(e.components);return n.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var o=e.components,r=e.mdxType,s=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=l(o),m=r,k=d["".concat(c,".").concat(m)]||d[m]||u[m]||s;return o?n.createElement(k,a(a({ref:t},p),{},{components:o})):n.createElement(k,a({ref:t},p))}));function m(e,t){var o=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=o.length,a=new Array(s);a[0]=d;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:r,a[1]=i;for(var l=2;l<s;l++)a[l]=o[l];return n.createElement.apply(null,a)}return n.createElement.apply(null,o)}d.displayName="MDXCreateElement"},7471:function(e,t,o){o.r(t),o.d(t,{frontMatter:function(){return i},contentTitle:function(){return c},metadata:function(){return l},toc:function(){return p},default:function(){return d}});var n=o(7462),r=o(3366),s=(o(7294),o(4137)),a=["components"],i={id:"mocksandspies",title:"Mocks and Spies"},c=void 0,l={unversionedId:"mocksandspies",id:"mocksandspies",isDocsHomePage:!1,title:"Mocks and Spies",description:"WebdriverIO comes with built in support for modifying network responses that allows you to focus testing your frontend application without having to setup your backend or a mock server. You can define custom responses for web resources like REST API requests in your test and modify them dynamically.",source:"@site/docs/MocksAndSpies.md",sourceDirName:".",slug:"/mocksandspies",permalink:"/docs/mocksandspies",editUrl:"https://github.com/Abhi6722/hackers-hub/edit/main/website/docs/MocksAndSpies.md",tags:[],version:"current",frontMatter:{id:"mocksandspies",title:"Mocks and Spies"},sidebar:"docs",previous:{title:"The Browser Object",permalink:"/docs/browserobject"},next:{title:"Custom Commands",permalink:"/docs/customcommands"}},p=[{value:"Creating a mock",id:"creating-a-mock",children:[],level:2},{value:"Specifying custom responses",id:"specifying-custom-responses",children:[{value:"Mocking API Requests",id:"mocking-api-requests",children:[],level:3},{value:"Mocking text resources",id:"mocking-text-resources",children:[],level:3},{value:"Redirect web resources",id:"redirect-web-resources",children:[],level:3},{value:"Dynamic responses",id:"dynamic-responses",children:[],level:3}],level:2},{value:"Aborting mocks",id:"aborting-mocks",children:[],level:2},{value:"Spies",id:"spies",children:[],level:2}],u={toc:p};function d(e){var t=e.components,o=(0,r.Z)(e,a);return(0,s.kt)("wrapper",(0,n.Z)({},u,o,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"WebdriverIO comes with built in support for modifying network responses that allows you to focus testing your frontend application without having to setup your backend or a mock server. You can define custom responses for web resources like REST API requests in your test and modify them dynamically."),(0,s.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"This feature is currently only supported when running local tests on Chrome. It is planned to be supported on ",(0,s.kt)("a",{parentName:"p",href:"https://bugzilla.mozilla.org/show_bug.cgi?id=1591389"},"Firefox")," and ",(0,s.kt)("a",{parentName:"p",href:"https://saucelabs.com/"},"Sauce Labs")," soon. If you encounter problems using it please file ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/webdriverio/webdriverio/issues/new/choose"},"an issue")," and let us know!"))),(0,s.kt)("h2",{id:"creating-a-mock"},"Creating a mock"),(0,s.kt)("p",null,"Before you can modify any responses you have define a mock first. This mock is described by the resource url and can be filtered by the ",(0,s.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods"},"request method")," or ",(0,s.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers"},"headers"),". The resource supports glob expressions by ",(0,s.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/minimatch"},"minimatch"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"// mock all resources ending with \"/users/list\"\nconst userListMock = await browser.mock('**/users/list')\n\n// or you can specify the mock by filtering resources by headers or\n// status code, only mock successful requests to json resources\nconst strictMock = await browser.mock('**', {\n    // mock all json responses\n    headers: { 'Content-Type': 'application/json' },\n    // that were successful\n    statusCode: 200\n})\n")),(0,s.kt)("h2",{id:"specifying-custom-responses"},"Specifying custom responses"),(0,s.kt)("p",null,"Once you have defined a mock you can define custom responses for it. Those custom responses can be either an object to respond a JSON, a local file to respond with a custom fixture or a web resource to replace the response with a resource from the internet."),(0,s.kt)("h3",{id:"mocking-api-requests"},"Mocking API Requests"),(0,s.kt)("p",null,"In order to mock API requests where you expect a JSON response all you need to do is to call ",(0,s.kt)("inlineCode",{parentName:"p"},"respond")," on the mock object with an arbitrary object you want to return, e.g.:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const mock = await browser.mock('https://todo-backend-express-knex.herokuapp.com/', {\n    method: 'get'\n})\n\nmock.respond([{\n    title: 'Injected (non) completed Todo',\n    order: null,\n    completed: false\n}, {\n    title: 'Injected completed Todo',\n    order: null,\n    completed: true\n}])\n\nawait browser.url('https://todobackend.com/client/index.html?https://todo-backend-express-knex.herokuapp.com/')\n\nawait $('#todo-list li').waitForExist()\nconsole.log(await $$('#todo-list li').map(el => el.getText()))\n// outputs: \"[ 'Injected (non) completed Todo', 'Injected completed Todo' ]\"\n")),(0,s.kt)("p",null,"You can also modify the response headers as well as the status code by passing in some mock response params as follows:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"mock.response({ ... }, {\n    // respond with status code 404\n    statusCode: 404,\n    // merge response headers with following headers\n    headers: { 'x-custom-header': 'foobar' }\n})\n")),(0,s.kt)("p",null,"If you want the mock not to call the backend at all, you can pass ",(0,s.kt)("inlineCode",{parentName:"p"},"false")," for the ",(0,s.kt)("inlineCode",{parentName:"p"},"fetchResponse")," flag."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"mock.response({ ... }, {\n    // do not call the actual backend\n    fetchResponse: false\n})\n")),(0,s.kt)("p",null,"It is recommend to store custom responses in fixture files so you can just require them in your test as follows:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const responseFixture = require('./__fixtures__/apiResponse.json')\nmock.response(responseFixture)\n")),(0,s.kt)("h3",{id:"mocking-text-resources"},"Mocking text resources"),(0,s.kt)("p",null,"If you like to modify text resources like JavaScript, CSS files or other text based resources you can just pass in a file path and WebdriverIO will replaces the original resource with it, e.g.:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const scriptMock = await browser.mock('**/script.min.js')\nscriptMock.respond('./tests/fixtures/script.js')\n\n// or respond with your custom JS\nscriptMock.respond('alert(\"I am a mocked resource\")')\n")),(0,s.kt)("h3",{id:"redirect-web-resources"},"Redirect web resources"),(0,s.kt)("p",null,"You can also just replace a web resource with another web resource if your desired response is already hosted on the web. This works with individual page resources as well as with a webpage itself, e.g.:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const pageMock = await browser.mock('https://google.com/')\nawait pageMock.respond('https://webdriver.io')\nawait browser.url('https://google.com')\nconsole.log(await browser.getTitle()) // returns \"WebdriverIO \xb7 Next-gen browser and mobile automation test framework for Node.js\"\n")),(0,s.kt)("h3",{id:"dynamic-responses"},"Dynamic responses"),(0,s.kt)("p",null,"If your mock response depends on the original resource response you can also dynamically modify the resource by passing in a function receives the original response as parameter and sets the mock based on the return value, e.g.:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const mock = await browser.mock('https://todo-backend-express-knex.herokuapp.com/', {\n    method: 'get'\n})\n\nmock.respond((req) => {\n    // replace todo content with their list number\n    return req.body.map((item, i) => ({ ...item, title: i }))\n})\n\nawait browser.url('https://todobackend.com/client/index.html?https://todo-backend-express-knex.herokuapp.com/')\n\nawait $('#todo-list li').waitForExist()\nconsole.log(await $$('#todo-list li label').map((el) => el.getText()))\n// returns\n// [\n//   '0',  '1',  '2',  '19', '20',\n//   '21', '3',  '4',  '5',  '6',\n//   '7',  '8',  '9',  '10', '11',\n//   '12', '13', '14', '15', '16',\n//   '17', '18', '22'\n// ]\n")),(0,s.kt)("h2",{id:"aborting-mocks"},"Aborting mocks"),(0,s.kt)("p",null,"Instead of returning a custom response you can also just abort the request with one of the following HTTP errors:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Failed"),(0,s.kt)("li",{parentName:"ul"},"Aborted"),(0,s.kt)("li",{parentName:"ul"},"TimedOut"),(0,s.kt)("li",{parentName:"ul"},"AccessDenied"),(0,s.kt)("li",{parentName:"ul"},"ConnectionClosed"),(0,s.kt)("li",{parentName:"ul"},"ConnectionReset"),(0,s.kt)("li",{parentName:"ul"},"ConnectionRefused"),(0,s.kt)("li",{parentName:"ul"},"ConnectionAborted"),(0,s.kt)("li",{parentName:"ul"},"ConnectionFailed"),(0,s.kt)("li",{parentName:"ul"},"NameNotResolved"),(0,s.kt)("li",{parentName:"ul"},"InternetDisconnected"),(0,s.kt)("li",{parentName:"ul"},"AddressUnreachable"),(0,s.kt)("li",{parentName:"ul"},"BlockedByClient"),(0,s.kt)("li",{parentName:"ul"},"BlockedByResponse")),(0,s.kt)("p",null,"This is very useful if you want to block 3rd party script from your page that have a negative influence on your functional test. You can abort a mock by just calling ",(0,s.kt)("inlineCode",{parentName:"p"},"abort")," or ",(0,s.kt)("inlineCode",{parentName:"p"},"abortOnce"),", e.g.:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const mock = await browser.mock('https://www.google-analytics.com/**')\nmock.abort('Failed')\n")),(0,s.kt)("h2",{id:"spies"},"Spies"),(0,s.kt)("p",null,"Every mock is automatically a spy that counts the amount of requests the browser made to that resource. If you don't apply a custom response or abort reason to the mock it continues with the default response you would normally receive. This allows you to check how many times the browser made the request, e.g. to a certain API endpoint."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const mock = await browser.mock('**/user', { method: 'post' })\nconsole.log(mock.calls.length) // returns 0\n\n// register user\nawait $('#username').setValue('randomUser')\nawait $('password').setValue('password123')\nawait $('password_repeat').setValue('password123')\nawait $('button[type=\"submit\"]').click()\n\n// check if API request was made\nexpect(mock.calls.length).toBe(1)\n\n// assert response\nexpect(mock.calls[0].body).toEqual({ success: true })\n")))}d.isMDXComponent=!0}}]);