"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6305],{4137:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return m}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),p=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=p(r),m=a,f=c["".concat(s,".").concat(m)]||c[m]||d[m]||o;return r?n.createElement(f,i(i({ref:t},u),{},{components:r})):n.createElement(f,i({ref:t},u))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=r[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}c.displayName="MDXCreateElement"},8448:function(e,t,r){var n=r(7294);t.Z=function(e){var t=e.children,r=e.hidden,a=e.className;return n.createElement("div",{role:"tabpanel",hidden:r,className:a},t)}},7225:function(e,t,r){r.d(t,{Z:function(){return c}});var n=r(7462),a=r(7294),o=r(1048),i=r(2713);var l=function(){var e=(0,a.useContext)(i.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e},s=r(3309),p=r(6010),u="tabItem_vU9c";function d(e){var t,r,n,o=e.lazy,i=e.block,d=e.defaultValue,c=e.values,m=e.groupId,f=e.className,h=a.Children.map(e.children,(function(e){if((0,a.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),v=null!=c?c:h.map((function(e){var t=e.props;return{value:t.value,label:t.label}})),b=(0,s.lx)(v,(function(e,t){return e.value===t.value}));if(b.length>0)throw new Error('Docusaurus error: Duplicate values "'+b.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var g=null===d?d:null!=(t=null!=d?d:null==(r=h.find((function(e){return e.props.default})))?void 0:r.props.value)?t:null==(n=h[0])?void 0:n.props.value;if(null!==g&&!v.some((function(e){return e.value===g})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+g+'" but none of its children has the corresponding value. Available values are: '+v.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var k=l(),w=k.tabGroupChoices,y=k.setTabGroupChoices,N=(0,a.useState)(g),_=N[0],D=N[1],T=[],E=(0,s.o5)().blockElementScrollPositionUntilNextRender;if(null!=m){var C=w[m];null!=C&&C!==_&&v.some((function(e){return e.value===C}))&&D(C)}var j=function(e){var t=e.currentTarget,r=T.indexOf(t),n=v[r].value;n!==_&&(E(t),D(n),null!=m&&y(m,n))},R=function(e){var t,r=null;switch(e.key){case"ArrowRight":var n=T.indexOf(e.currentTarget)+1;r=T[n]||T[0];break;case"ArrowLeft":var a=T.indexOf(e.currentTarget)-1;r=T[a]||T[T.length-1]}null==(t=r)||t.focus()};return a.createElement("div",{className:"tabs-container"},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,p.Z)("tabs",{"tabs--block":i},f)},v.map((function(e){var t=e.value,r=e.label;return a.createElement("li",{role:"tab",tabIndex:_===t?0:-1,"aria-selected":_===t,className:(0,p.Z)("tabs__item",u,{"tabs__item--active":_===t}),key:t,ref:function(e){return T.push(e)},onKeyDown:R,onFocus:j,onClick:j},null!=r?r:t)}))),o?(0,a.cloneElement)(h.filter((function(e){return e.props.value===_}))[0],{className:"margin-vert--md"}):a.createElement("div",{className:"margin-vert--md"},h.map((function(e,t){return(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==_})}))))}function c(e){var t=(0,o.Z)();return a.createElement(d,(0,n.Z)({key:String(t)},e))}},2713:function(e,t,r){var n=(0,r(7294).createContext)(void 0);t.Z=n},2217:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return u},default:function(){return c}});var n=r(7462),a=r(3366),o=(r(7294),r(4137)),i=(r(7225),r(8448),["components"]),l={id:"wdio-delta-reporter-service",title:"Delta Reporter Reporter",custom_edit_url:"https://github.com/delta-reporter/delta-reporter-wdio/edit/master//README.md"},s=void 0,p={unversionedId:"wdio-delta-reporter-service",id:"wdio-delta-reporter-service",isDocsHomePage:!1,title:"Delta Reporter Reporter",description:"wdio-delta-reporter-service is a 3rd party package, for more information please see GitHub | npm",source:"@site/docs/_wdio-delta-reporter-service.md",sourceDirName:".",slug:"/wdio-delta-reporter-service",permalink:"/docs/wdio-delta-reporter-service",editUrl:"https://github.com/delta-reporter/delta-reporter-wdio/edit/master//README.md",tags:[],version:"current",frontMatter:{id:"wdio-delta-reporter-service",title:"Delta Reporter Reporter",custom_edit_url:"https://github.com/delta-reporter/delta-reporter-wdio/edit/master//README.md"},sidebar:"docs",previous:{title:"Markdown Reporter",permalink:"/docs/wdio-markdown-reporter"},next:{title:"Appium Service",permalink:"/docs/appium-service"}},u=[{value:"Installation",id:"installation",children:[],level:2},{value:"Configuration",id:"configuration",children:[],level:2},{value:"Add screenshots and videos",id:"add-screenshots-and-videos",children:[],level:2},{value:"Usage",id:"usage",children:[],level:2},{value:"Sending extra data to Delta Reporter",id:"sending-extra-data-to-delta-reporter",children:[],level:2}],d={toc:u};function c(e){var t=e.components,r=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"wdio-delta-reporter-service is a 3rd party package, for more information please see ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/delta-reporter/delta-reporter-wdio"},"GitHub")," | ",(0,o.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/@delta-reporter/wdio-delta-reporter-service"},"npm"))),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"A WebdriverIO reporter plugin to create ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/delta-reporter/delta-reporter"},"Delta reports"))),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://raw.githubusercontent.com/delta-reporter/delta-reporter-wdio/master/src/docs/delta-reporter.png",alt:"Screenshot of Delta reporter"})),(0,o.kt)("h2",{id:"installation"},"Installation"),(0,o.kt)("p",null,"The easiest way is to keep ",(0,o.kt)("inlineCode",{parentName:"p"},"@delta-reporter/wdio-delta-reporter-service")," as a devDependency in your ",(0,o.kt)("inlineCode",{parentName:"p"},"package.json"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "devDependencies": {\n    "@delta-reporter/wdio-delta-reporter-service": "^1.1.9",\n  }\n}\n')),(0,o.kt)("p",null,"You can simple do it by:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"npm i @delta-reporter/wdio-delta-reporter-service\n")),(0,o.kt)("h2",{id:"configuration"},"Configuration"),(0,o.kt)("p",null,"Delta reporter WebdriverIO plugin consists of a mix between a ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/webdriverio/webdriverio/tree/master/packages/webdriverio"},"WebdriverIO Service")," and ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/webdriverio/webdriverio/tree/master/packages/wdio-reporter"},"Reporter"),", so it needs to be declared as a reporter and as a service in config file."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const DeltaReporter = require('@delta-reporter/wdio-delta-reporter-service/lib/src/reporter');\nconst DeltaService = require(\"@delta-reporter/wdio-delta-reporter-service\");\n\nlet delta_config = {\n  enabled: true,\n  host: 'delta_host',\n  project: 'Project Name',\n  testType: 'Test Type'\n};\n\nexports.config = {\n  // ...\n  reporters: [\n    [DeltaReporter, delta_config]\n  ],\n  // ...\n  services: [new DeltaService(delta_config)],\n  // ...\n}\n")),(0,o.kt)("h2",{id:"add-screenshots-and-videos"},"Add screenshots and videos"),(0,o.kt)("p",null,"Screenshots can be attached to the report by using the ",(0,o.kt)("inlineCode",{parentName:"p"},"sendFileToTest")," command in afterTest hook in wdio config file. The parameters are ",(0,o.kt)("inlineCode",{parentName:"p"},"type"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"file")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"description"),":"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"type"),": Can be ",(0,o.kt)("inlineCode",{parentName:"li"},"img")," or ",(0,o.kt)("inlineCode",{parentName:"li"},"video")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"file"),": Path to the file to be uploaded"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"description"),": Optional value that will be displayed in the media container in Delta Reporter")),(0,o.kt)("p",null,"As shown in the example above, when this function is called, adn the test is failing, a screenshot image will be attached to the Delta report."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"}," afterTest(test) {\n    if (test.passed === false) {\n      const file_name = 'screenshot.png';\n      const outputFile = path.join(__dirname, file_name);\n\n      browser.saveScreenshot(outputFile);\n      browser.sendFileToTest('img', outputFile);\n    }\n  }\n")),(0,o.kt)("p",null,"Below is an example of all pieces needed in wdio config file to use this plugin along with ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/presidenten/wdio-video-reporter"},"Video Reporter"),", so that Delta Reporter is showing screenshots and videos of failed tests:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"var path = require('path');\nconst fs = require('fs');\nconst video = require('wdio-video-reporter');\nconst DeltaReporter = require('@delta-reporter/wdio-delta-reporter-service/lib/src/reporter');\nconst DeltaService = require(\"@delta-reporter/wdio-delta-reporter-service\");\n\n// ...\n\nfunction getLatestFile({ directory, extension }, callback) {\n  fs.readdir(directory, (_, dirlist) => {\n    const latest = dirlist\n      .map(_path => ({ stat: fs.lstatSync(path.join(directory, _path)), dir: _path }))\n      .filter(_path => _path.stat.isFile())\n      .filter(_path => (extension ? _path.dir.endsWith(`.${extension}`) : 1))\n      .sort((a, b) => b.stat.mtime - a.stat.mtime)\n      .map(_path => _path.dir);\n    callback(directory + '/' + latest[0]);\n  });\n}\n\nlet delta_config = {\n  enabled: true,\n  host: 'delta_host', // put your Delta Core url here\n  project: 'Project Name', // Name of your project\n  testType: 'Test Type' // eg., End to End, E2E, Frontend Acceptance Tests\n};\n\n// ...\n\nexports.config = {\n  // ...\n  reporters: [\n    [DeltaReporter, delta_config]\n  ],\n  // ...\n  services: [new DeltaService(delta_config)],\n\n\n  // ...\n\n\n  afterTest(test) {\n    if (test.passed === false) {\n      const file_name = 'screenshot.png';\n      const outputFile = path.join(__dirname, file_name);\n\n      browser.saveScreenshot(outputFile);\n      browser.sendFileToTest('img', outputFile);\n\n      getLatestFile({ directory: browser.options.outputDir + '/_results_', extension: 'mp4' }, (filename = null) => {\n        browser.sendFileToTest('video', filename, 'Video captured during test execution');\n      });\n    }\n  }\n\n  // ...\n\n}\n")),(0,o.kt)("h2",{id:"usage"},"Usage"),(0,o.kt)("p",null,"For each test run, Delta plugin is listening for DELTA_LAUNCH_ID. There are two main cases:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Local run: No need to do anything, you can just run your wdio command (",(0,o.kt)("inlineCode",{parentName:"p"},"./node_modules/.bin/wdio ./wdio.conf.js"),") and DELTA_LAUNCH_ID will be generated automatically for you, so your test results appear in Delta Reporter in real time.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"CI run: If it's your tests job, you will have to define DELTA_LAUNCH_ID as a parameter. Then inside your stage you will need to initialize it by calling a ",(0,o.kt)("inlineCode",{parentName:"p"},"/api/v1/launch")," endpoint, then running your tests with ",(0,o.kt)("inlineCode",{parentName:"p"},"DELTA_LAUNCH_ID=${DELTA_LAUNCH_ID}"),' pre-pending. The initialization is done once, so when you are running multiple test types in the same build (say, UI tests, API tests, Unit tests), those tests are gathered under one "Launch" on Delta Reporter.'))),(0,o.kt)("p",null,"Below is an example of code for config file for Jenkins job:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-groovy"},"// ...\n  parameters {\n      string defaultValue: '', description: 'Launch ID sent by a pipeline, leave it blank', name: 'DELTA_LAUNCH_ID', trim: false\n  }\n\n// ...\n\n  stage('Run WDIO tests') {\n    environment {\n      DELTA_LAUNCH_ID = \"\"\n    }\n    steps {\n      container('jenkins-node-worker') {\n        script {\n          try {\n            DELTA_LAUNCH_ID=sh(script: \"curl -s --header \\\"Content-Type: application/json\\\" --request POST --data '{\\\"name\\\": \\\"${JOB_NAME} | ${BUILD_NUMBER} | Wdio Tests\\\", \\\"project\\\": \\\"Your project\\\"}' https://delta-core-url/api/v1/launch | python -c 'import sys, json; print(json.load(sys.stdin)[\\\"id\\\"])';\", returnStdout: true)\n          } catch (Exception e) {\n              echo 'Couldn\\'t start launch on Delta Reporter: ' + e\n          }\n          \n          sh \"DELTA_LAUNCH_ID=${DELTA_LAUNCH_ID} TEST_TYPE='Frontend Acceptance Tests' ./node_modules/.bin/wdio ./wdio.conf.js\"\n        }\n      }\n    }  \n  }\n")),(0,o.kt)("h2",{id:"sending-extra-data-to-delta-reporter"},"Sending extra data to Delta Reporter"),(0,o.kt)("p",null,"Its possible to send custom data to be displayed into Delta Reporter using the SmartLinks feature."),(0,o.kt)("p",null,"For this use the commands ",(0,o.kt)("inlineCode",{parentName:"p"},"browser.sendDataToTest")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"sendDataToTestRun"),", depending on the place where you want to show this information"),(0,o.kt)("p",null,"These methods accept a jsonify object as argument"),(0,o.kt)("p",null,"Example of integration with ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/wearefriday/spectre"},"Spectre")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"  beforeSuite() {\n    try {\n      let spectreTestRunURL = fs.readFileSync('./.spectre_test_run_url.json');\n      let test_run_payload = {\n        spectre_test_run_url: spectreTestRunURL.toString()\n      };\n      browser.sendDataToTestRun(test_run_payload);\n    } catch {\n      log.info('No Spectre URL found');\n    }\n  }\n")),(0,o.kt)("p",null,"Then on Delta Reporter, a SmartLink with ",(0,o.kt)("inlineCode",{parentName:"p"},"{spectre_test_run_url}")," can be created for the test run"),(0,o.kt)("p",null,"For more information about Smart Links, please check ",(0,o.kt)("a",{parentName:"p",href:"https://delta-reporter.github.io/delta-reporter/main_features/#smart-links"},"Delta Reporter docs")))}c.isMDXComponent=!0}}]);