"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[156],{4137:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return m}});var o=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},s=Object.keys(e);for(o=0;o<s.length;o++)t=s[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(o=0;o<s.length;o++)t=s[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=o.createContext({}),l=function(e){var n=o.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},u=function(e){var n=l(e.components);return o.createElement(c.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},d=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,s=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=l(t),m=r,b=d["".concat(c,".").concat(m)]||d[m]||p[m]||s;return t?o.createElement(b,a(a({ref:n},u),{},{components:t})):o.createElement(b,a({ref:n},u))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var s=t.length,a=new Array(s);a[0]=d;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i.mdxType="string"==typeof e?e:r,a[1]=i;for(var l=2;l<s;l++)a[l]=t[l];return o.createElement.apply(null,a)}return o.createElement.apply(null,t)}d.displayName="MDXCreateElement"},2028:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return i},contentTitle:function(){return c},metadata:function(){return l},toc:function(){return u},default:function(){return d}});var o=t(7462),r=t(3366),s=(t(7294),t(4137)),a=["components"],i={id:"browserobject",title:"The Browser Object"},c=void 0,l={unversionedId:"browserobject",id:"browserobject",isDocsHomePage:!1,title:"The Browser Object",description:"The browser object is the session instance you use to control the browser or mobile device with. If you use the WDIO test runner, you can access the WebDriver instance through the global browser or driver object.",source:"@site/docs/BrowserObject.md",sourceDirName:".",slug:"/browserobject",permalink:"/docs/browserobject",editUrl:"https://github.com/Abhi6722/hackers-hub/edit/main/website/docs/BrowserObject.md",tags:[],version:"current",frontMatter:{id:"browserobject",title:"The Browser Object"},sidebar:"docs",previous:{title:"Timeouts",permalink:"/docs/timeouts"},next:{title:"Mocks and Spies",permalink:"/docs/mocksandspies"}},u=[{value:"Get Desired Capabilities",id:"get-desired-capabilities",children:[],level:2},{value:"Custom Configurations",id:"custom-configurations",children:[{value:"Configurations versus Options",id:"configurations-versus-options",children:[],level:3}],level:2},{value:"Mobile Flags",id:"mobile-flags",children:[],level:2}],p={toc:u};function d(e){var n=e.components,t=(0,r.Z)(e,a);return(0,s.kt)("wrapper",(0,o.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"The browser object is the session instance you use to control the browser or mobile device with. If you use the WDIO test runner, you can access the WebDriver instance through the global ",(0,s.kt)("inlineCode",{parentName:"p"},"browser")," or ",(0,s.kt)("inlineCode",{parentName:"p"},"driver")," object."),(0,s.kt)("p",null,"The session is initialized by the test runner. The same goes for ending the session. This is also done by the test runner process."),(0,s.kt)("p",null,"Besides all commands from the ",(0,s.kt)("a",{parentName:"p",href:"/docs/api"},"API"),", the ",(0,s.kt)("inlineCode",{parentName:"p"},"browser")," object provides some more information you might be interested in during your test run:"),(0,s.kt)("h2",{id:"get-desired-capabilities"},"Get Desired Capabilities"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"console.log(browser.sessionId) // outputs: \"57b15c6ea81d0edb9e5b372da3d9ce28\"\nconsole.log(browser.capabilities)\n/**\n * outputs capabilities returned by the browser driver, e.g.:\n   { acceptInsecureCerts: false,\n     acceptSslCerts: false,\n     applicationCacheEnabled: false,\n     browserConnectionEnabled: false,\n     browserName: 'chrome',\n     chrome:\n      { chromedriverVersion: '2.40.565386 (45a059dc425e08165f9a10324bd1380cc13ca363)',\n        userDataDir: '/var/folders/ns/8mj2mh0x27b_gsdddy1knnsm0000gn/T/.org.chromium.Chromium.mpJ0yc' },\n     cssSelectorsEnabled: true,\n     databaseEnabled: false,\n     handlesAlerts: true,\n     hasTouchScreen: false,\n     javascriptEnabled: true,\n     locationContextEnabled: true,\n     mobileEmulationEnabled: false,\n     nativeEvents: true,\n     networkConnectionEnabled: false,\n     pageLoadStrategy: 'normal',\n     platform: 'Mac OS X',\n     rotatable: false,\n     setWindowRect: true,\n     takesHeapSnapshot: true,\n     takesScreenshot: true,\n     unexpectedAlertBehaviour: '',\n     version: '68.0.3440.106',\n     webStorageEnabled: true }\n */\nconsole.log(browser.requestedCapabilities)\n/**\n * outputs original capabilities set by the user, e.g.:\n * {\n *   browserName: 'chrome'\n * }\n */\nconsole.log(browser.commandList)\n/**\n * outputs all commands assigned to this instance (browser or element), e.g.:\n * [\n *   'newSession',\n *   'deleteSession',\n *   'status',\n *   'getTimeouts',\n *   'setTimeouts',\n *   'getUrl',\n *   'navigateTo',\n *   'back',\n *   'forward',\n *   'refresh',\n *   'getTitle',\n *   ... 115 more items\n * ]\n */\n")),(0,s.kt)("h2",{id:"custom-configurations"},"Custom Configurations"),(0,s.kt)("p",null,"If using the WDIO testrunner you can always define custom configurations within your WDIO config:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"// wdio.conf.js\nexports.config = {\n    // ...\n    fakeUser: 'maxmustermann',\n    fakePassword: 'foobar',\n    baseUrl: 'example.com',\n    // ...\n}\n")),(0,s.kt)("p",null,"And access it in your tests:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"console.log(browser.config)\n/**\n * outputs:\n * {\n        port: 4444,\n        protocol: 'http',\n        waitforTimeout: 10000,\n        waitforInterval: 250,\n        logLevel: 'debug',\n        connectionRetryTimeout: 120000,\n        connectionRetryCount: 3,\n        specs: [ 'err.js' ],\n        fakeUser: 'maxmustermann', // <-- custom configuration\n        fakePassword: 'foobar', // <-- custom configuration\n        baseUrl: 'example.com', // <-- custom configuration\n        // ...\n */\n\nconsole.log(browser.config.fakeUser) // outputs: \"maxmustermann\"\n")),(0,s.kt)("h3",{id:"configurations-versus-options"},"Configurations versus Options"),(0,s.kt)("p",null,"Custom configurations should not be confused with ",(0,s.kt)("a",{parentName:"p",href:"/docs/options"},"Options"),", which are accessed separately."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"console.log(browser.options)\n/**\n * outputs:\n * {\n        protocol: 'http',\n        port: 4444,\n        hostname: 'localhost',\n        baseUrl: 'example.com',\n        // ...\n */\n")),(0,s.kt)("p",null,"When using the WDIO testrunner, if any configuration and option keys conflict in name (e.g. ",(0,s.kt)("inlineCode",{parentName:"p"},"baseUrl")," in the following code snippets) the option value will take precedence and overwrite the config value."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"// wdio.conf.js\nexports.config = {\n    baseUrl: 'example.com'\n}\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sh"},"# testrunner invocation\n$ npm wdio wdio.conf.js --baseUrl foobar.com\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"console.log(browser.config.baseUrl) // 'foobar.com', despite being set as 'example.com'\nconsole.log(browser.options.baseUrl) // 'foobar.com'\n")),(0,s.kt)("h2",{id:"mobile-flags"},"Mobile Flags"),(0,s.kt)("p",null,"If you need to modify your test based on whether or not your session runs on a mobile device, you can access the mobile flags to check."),(0,s.kt)("p",null,"For example, given this config:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"// wdio.conf.js\nexports.config = {\n    // ...\n    capabilities: {\n        platformName: 'iOS',\n        app: 'net.company.SafariLauncher',\n        udid: '123123123123abc',\n        deviceName: 'iPhone',\n        // ...\n    }\n    // ...\n}\n")),(0,s.kt)("p",null,"You can access these flags in your test like so:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"// Note: `driver` is the equivalent to the `browser` object but semantically more correct\n// you can choose which global variable you want to use\nconsole.log(driver.isMobile) // outputs: true\nconsole.log(driver.isIOS) // outputs: true\nconsole.log(driver.isAndroid) // outputs: false\n")),(0,s.kt)("p",null,"This can be useful if, for example, you want to define selectors in your ",(0,s.kt)("a",{parentName:"p",href:"/docs/pageobjects"},"page objects")," based on the device type, like this:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"// mypageobject.page.js\nimport Page from './page'\n\nclass LoginPage extends Page {\n    // ...\n    get username() {\n        const selectorAndroid = 'new UiSelector().text(\"Cancel\").className(\"android.widget.Button\")'\n        const selectorIOS = 'UIATarget.localTarget().frontMostApp().mainWindow().buttons()[0]'\n        const selectorType = driver.isAndroid ? 'android' : 'ios'\n        const selector = driver.isAndroid ? selectorAndroid : selectorIOS\n        return $(`${selectorType}=${selector}`)\n    }\n    // ...\n}\n")),(0,s.kt)("p",null,"You can also use these flags to run only certain tests for certain device types:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"// mytest.e2e.js\ndescribe('my test', () => {\n    // ...\n    // only run test with Android devices\n    if (driver.isAndroid) {\n        it('tests something only for Android', () => {\n            // ...\n        })\n    }\n    // ...\n})\n")))}d.isMDXComponent=!0}}]);