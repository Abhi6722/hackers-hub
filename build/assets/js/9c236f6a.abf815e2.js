"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9276],{4137:function(e,t,o){o.d(t,{Zo:function(){return c},kt:function(){return d}});var n=o(7294);function r(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function a(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,n)}return o}function i(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?a(Object(o),!0).forEach((function(t){r(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):a(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function s(e,t){if(null==e)return{};var o,n,r=function(e,t){if(null==e)return{};var o,n,r={},a=Object.keys(e);for(n=0;n<a.length;n++)o=a[n],t.indexOf(o)>=0||(r[o]=e[o]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)o=a[n],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(r[o]=e[o])}return r}var l=n.createContext({}),p=function(e){var t=n.useContext(l),o=t;return e&&(o="function"==typeof e?e(t):i(i({},t),e)),o},c=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var o=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),h=p(o),d=r,m=h["".concat(l,".").concat(d)]||h[d]||u[d]||a;return o?n.createElement(m,i(i({ref:t},c),{},{components:o})):n.createElement(m,i({ref:t},c))}));function d(e,t){var o=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=o.length,i=new Array(a);i[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var p=2;p<a;p++)i[p]=o[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,o)}h.displayName="MDXCreateElement"},5033:function(e,t,o){o.r(t),o.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return p},assets:function(){return c},toc:function(){return u},default:function(){return d}});var n=o(7462),r=o(3366),a=(o(7294),o(4137)),i=["components"],s={title:"Chrome DevTools as Automation Protocol",author:"Christian Bromann",authorURL:"http://github.com/christian-bromann",authorImageURL:"https://s.gravatar.com/avatar/d98b16d7c93d15865f34a225dd4b1254?s=80"},l=void 0,p={permalink:"/blog/2019/09/16/devtools",editUrl:"https://github.com/Abhi6722/hackers-hub/edit/main/website/blog/blog/2019-09-16-devtools.md",source:"@site/blog/2019-09-16-devtools.md",title:"Chrome DevTools as Automation Protocol",description:"Over the last few years a lot of new testing frameworks have evolved that provide different capabilities but also come with certain limitations. While tools like Selenium are often seen as slow and flaky and others like Cypress.io or Puppeteer are hyped as the future in the testing space. In reality all tools have their own use cases, have different levels of support and are based on a completely different architecture. Comparing them is rather useless as it ends up comparing apples with oranges. In larger test suites flakiness and race conditions can happen using all of these tools so that we can safely say that up to this point none of them (including WebdriverIO) has found the ultimate solution for world /(domin|autom)ation/.",date:"2019-09-16T00:00:00.000Z",formattedDate:"September 16, 2019",tags:[],readingTime:5.825,truncated:!1,authors:[{name:"Christian Bromann",url:"http://github.com/christian-bromann",imageURL:"https://s.gravatar.com/avatar/d98b16d7c93d15865f34a225dd4b1254?s=80"}],prevItem:{title:"Avoid starting session for excluded specs",permalink:"/blog/2019/11/01/spec-filtering"},nextItem:{title:"WebdriverIO V5 now also supports CucumberJS",permalink:"/blog/2019/07/11/cucumberjs-v5-released"}},c={authorsImageUrls:[void 0]},u=[],h={toc:u};function d(e){var t=e.components,o=(0,r.Z)(e,i);return(0,a.kt)("wrapper",(0,n.Z)({},h,o,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Over the last few years a lot of new testing frameworks have evolved that provide different capabilities but also come with certain limitations. While tools like ",(0,a.kt)("a",{parentName:"p",href:"https://www.seleniumhq.org/"},"Selenium")," are often seen as slow and flaky and others like ",(0,a.kt)("a",{parentName:"p",href:"https://www.cypress.io/"},"Cypress.io")," or ",(0,a.kt)("a",{parentName:"p",href:"https://pptr.dev/"},"Puppeteer")," are hyped as the future in the testing space. In reality all tools have their own use cases, have different levels of support and are based on a completely different architecture. Comparing them is rather useless as it ends up comparing apples with oranges. In larger test suites flakiness and race conditions can happen using all of these tools so that we can safely say that up to this point none of them (including WebdriverIO) has found the ultimate solution for world ",(0,a.kt)("inlineCode",{parentName:"p"},"/(domin|autom)ation/"),"."),(0,a.kt)("p",null,"At the end of the day there are more or less two different approaches to how you can automate a browser. One is using an official W3C web standard called ",(0,a.kt)("a",{parentName:"p",href:"https://w3c.github.io/webdriver/"},"WebDriver")," and the other is the native browser interface that some of the browsers expose these days. The WebDriver protocol is the de-facto standard automation technique that allows you to not only automate all desktop browsers but also run automation on arbitrary user agents that include mobile devices, desktop applications or even Smart TVs. If you don't use WebDriver your automation framework most likely uses the native browser interfaces to run its automation on. While in the past every browser had its own (often not documented) protocol, these days a lot of browsers, including Chrome, Edge and soon even Firefox, come with a somewhat unified interface that is close to what is called the ",(0,a.kt)("a",{parentName:"p",href:"https://chromedevtools.github.io/devtools-protocol/"},"Chrome DevTools Protocol"),". While WebDriver provides true cross-browser support and allows you to run tests on a large scale in the cloud using vendors like ",(0,a.kt)("a",{parentName:"p",href:"https://saucelabs.com/"},"Sauce Labs"),", native browser interfaces often allow many more automation capabilities like listening and interacting with network or DOM events while often being limited to a single browser only."),(0,a.kt)("p",null,"With the release of WebdriverIO v5.13 we now introduce a new option that allows you to specify the automation protocol for your test and leverage the capabilities of both worlds. With that you can now decide whether to run your tests using WebDriver or Chrome DevTools (via Puppeteer). Nothing actually changes for your tests, just the automation happens using different technologies. We've created a new NPM package that we call ",(0,a.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/devtools"},(0,a.kt)("inlineCode",{parentName:"a"},"devtools"))," which has all WebDriver commands implemented but executes them using Puppeteer. It is a new type of plugin that even allows you to build your own WebDriver based automation package to automate an arbitrary device with WebdriverIO. The new option, called ",(0,a.kt)("inlineCode",{parentName:"p"},"automationProtocol"),", expects a string and is by default set to ",(0,a.kt)("inlineCode",{parentName:"p"},'"webdriver"')," to run automation using WebdriverIOs own ",(0,a.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/webdriver"},(0,a.kt)("inlineCode",{parentName:"a"},"webdriver"))," bindings. However if you install the new ",(0,a.kt)("inlineCode",{parentName:"p"},"devtools")," package via:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash",metastring:"npm2yarn",npm2yarn:!0},"$ npm install --save-dev devtools webdriverio\n")),(0,a.kt)("p",null,"and set ",(0,a.kt)("inlineCode",{parentName:"p"},"automationProtocol: 'devtools'")," in your options, all the automation happens via Chrome DevTools (more specifically via Puppeteer) while using the same WebdriverIO command interface:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const { remote } = require('webdriverio')\n\nlet client;\n\n(async function () {\n    client = await remote({\n        automationProtocol: 'devtools', // CHANGE PROTOCOL HERE\n        capabilities: { browserName: 'chrome' } // or `browserName: 'firefox'`\n    })\n\n    await client.url('https://webdriver.io')\n    console.log(await client.getTitle())\n    await client.deleteSession()\n})().catch(async (e) => {\n    console.error(e.stack)\n    await client.deleteSession()\n})\n")),(0,a.kt)("p",null,"This is especially great for local testing since you are no longer required to download a browser driver which often causes confusion as to where to download and how to run them. In addition to that, tests will run much quicker since WebdriverIO is directly connected to the browser."),(0,a.kt)("p",null,"As mentioned before, you can now leverage the advantages of running true cross-browser tests at scale with WebDriver, as well as leveraging all the additional automation capabilities of DevTools in one single tool. That said, given the fact that it is not possible to switch the protocols during a session, you might want to have one set of tests that require Puppeteer involvement, while also having a second set that you run cross-browser in the cloud."),(0,a.kt)("p",null,"In order to access Puppeteer in your tests, we have introduced a command called ",(0,a.kt)("inlineCode",{parentName:"p"},"getPuppeteer()"),", which returns the ",(0,a.kt)("a",{parentName:"p",href:"https://pptr.dev/#?product=Puppeteer&version=v1.19.0&show=api-class-browser"},(0,a.kt)("inlineCode",{parentName:"a"},"browser class"))," of the Puppeteer framework. From there on you can access the Puppeteer interface and all of its other classes. Note that these interfaces provide commands that are solely promise-based and WebdriverIO does not wrap them as you might know it using the WDIO testrunner. In this case we recommend wrapping all Puppeteer command calls manually within the ",(0,a.kt)("a",{parentName:"p",href:"https://webdriver.io/docs/api/browser/call.html"},(0,a.kt)("inlineCode",{parentName:"a"},"call"))," command that ensures that all promises are resolved before it moves on with other commands. For example, the following script shows how you can use WebdriverIO using the ",(0,a.kt)("inlineCode",{parentName:"p"},"devtools")," automation protocol via Puppeteer in the WDIO testrunner world:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"describe('my e2e tests', () => {\n    // ...\n\n    it('replaces the WebdriverIO logo with the Puppeteer logo', () => {\n        browser.url('https://webdriver.io')\n\n        /**\n         * run Puppeteer code with promises to intercept network requests\n         * and replace the WebdriverIO logo in the docs with the Puppeteer logo\n         */\n        browser.call(async () => {\n            const puppeteerBrowser = browser.getPuppeteer()\n            const page = (await puppeteerBrowser.pages())[0]\n            await page.setRequestInterception(true)\n            page.on('request', interceptedRequest => {\n                if (interceptedRequest.url().endsWith('webdriverio.png')) {\n                    return interceptedRequest.continue({\n                        url: 'https://user-images.githubusercontent.com/10379601/29446482-04f7036a-841f-11e7-9872-91d1fc2ea683.png'\n                    })\n                }\n\n                interceptedRequest.continue()\n            })\n        })\n\n        // continue with sync WebdriverIO commands\n        browser.refresh()\n        browser.pause(2000)\n    })\n\n    // ...\n})\n")),(0,a.kt)("p",null,"We also made sure that you can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"devtools")," automation protocol with WDIO testrunner services like ",(0,a.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/@wdio/devtools-service"},(0,a.kt)("inlineCode",{parentName:"a"},"@wdio/devtools-service"))," to make the experience as seamless as possible. You can find the complete script example to run in standalone mode in the WebdriverIO ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/webdriverio/webdriverio/tree/main/examples/devtools/intercept.js"},"example directory"),"."),(0,a.kt)("p",null,"We recommend only running tests on the devtools protocol if your functional test requires some sort of automation capability that is not provided by WebDriver. It also makes sense to switch to ",(0,a.kt)("inlineCode",{parentName:"p"},"devtools")," whenever running tests locally as the test execution will be much faster. If you follow our best practices you should split up your wdio config files per environment (e.g. local testing vs. run tests against Sauce Labs or in your grid). You can now have a config that defines a set of tests that require some Puppeteer interaction:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"// wdio.devtools.conf.js\nconst { config } = require('./wdio.conf.js')\nexports.config = Object.assign(config, {\n    /**\n     * set automation protocol to devtools\n     */\n    automationProtocol: 'devtools',\n    /**\n     * define a set of tests that require Puppeteer involvement\n     */\n    specs: [\n        'tests/e2e/devtools/**'\n    ],\n    /**\n     * run tests only on Firefox and Chrome in headless mode\n     */\n    capabilities: [{\n        browserName: 'chrome',\n        'goog:chromeOptions': {\n            headless: true\n        }\n    }, {\n        browserName: 'firefox',\n        'moz:firefoxOptions': {\n            headless: true\n        }\n    }]\n    // other specific options ...\n})\n")),(0,a.kt)("p",null,"With the new ",(0,a.kt)("inlineCode",{parentName:"p"},"automationProtocol")," option, we've opened the project up to automation technologies beyond WebDriver. There are advantages and disadvantages using both approaches and with this feature we allow you to use both in one single tool. The ",(0,a.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/devtools"},(0,a.kt)("inlineCode",{parentName:"a"},"devtools package"))," is still work in progress and we are finalizing all of its features within the upcoming weeks. If you have any feedback, bugs or comments on this please reach out via ",(0,a.kt)("a",{parentName:"p",href:"https://twitter.com/webdriverio"},"Twitter")," or on our Gitter ",(0,a.kt)("a",{parentName:"p",href:"https://gitter.im/webdriverio/webdriverio"},"support chat"),"."),(0,a.kt)("p",null,"Thanks!"))}d.isMDXComponent=!0}}]);