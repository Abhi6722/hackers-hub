"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9277],{4137:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return d}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),f=l(n),d=o,m=f["".concat(c,".").concat(d)]||f[d]||p[d]||a;return n?r.createElement(m,i(i({ref:t},u),{},{components:n})):r.createElement(m,i({ref:t},u))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=f;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var l=2;l<a;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},422:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return c},metadata:function(){return l},toc:function(){return u},default:function(){return f}});var r=n(7462),o=n(3366),a=(n(7294),n(4137)),i=["components"],s={id:"configurationfile",title:"Testrunner Configuration"},c=void 0,l={unversionedId:"configurationfile",id:"configurationfile",isDocsHomePage:!1,title:"Testrunner Configuration",description:"The configuration file contains all necessary information to run your test suite. It\u2019s just a NodeJS module that exports a JSON.",source:"@site/docs/ConfigurationFile.md",sourceDirName:".",slug:"/configurationfile",permalink:"/docs/configurationfile",editUrl:"https://github.com/Abhi6722/hackers-hub/edit/main/website/docs/ConfigurationFile.md",tags:[],version:"current",frontMatter:{id:"configurationfile",title:"Testrunner Configuration"},sidebar:"docs",previous:{title:"WDIO CLI Options",permalink:"/docs/clioptions"},next:{title:"Frameworks",permalink:"/docs/frameworks"}},u=[],p={toc:u};function f(e){var t=e.components,n=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"The configuration file contains all necessary information to run your test suite. It\u2019s just a NodeJS module that exports a JSON."),(0,a.kt)("p",null,"Here is an example configuration with all supported properties and additional information:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"exports.config = {\n\n    // ==================================\n    // Where should your test be launched\n    // ==================================\n    //\n    runner: 'local',\n    //\n    // =====================\n    // Server Configurations\n    // =====================\n    // Host address of the running Selenium server. This information is usually obsolete, as\n    // WebdriverIO automatically connects to localhost. Also if you are using one of the\n    // supported cloud services like Sauce Labs, Browserstack, Testing Bot or LambdaTest, you also don't\n    // need to define host and port information (because WebdriverIO can figure that out\n    // from your user and key information). However, if you are using a private Selenium\n    // backend, you should define the `hostname`, `port`, and `path` here.\n    //\n    hostname: 'localhost',\n    port: 4444,\n    path: '/',\n    // Protocol: http | https\n    // protocol: 'http',\n    //\n    // =================\n    // Service Providers\n    // =================\n    // WebdriverIO supports Sauce Labs, Browserstack, Testing Bot and LambdaTest. (Other cloud providers\n    // should work, too.) These services define specific `user` and `key` (or access key)\n    // values you must put here, in order to connect to these services.\n    //\n    user: 'webdriverio',\n    key:  'xxxxxxxxxxxxxxxx-xxxxxx-xxxxx-xxxxxxxxx',\n\n    // If you run your tests on Sauce Labs you can specify the region you want to run your tests\n    // in via the `region` property. Available short handles for regions are `us` (default) and `eu`.\n    // These regions are used for the Sauce Labs VM cloud and the Sauce Labs Real Device Cloud.\n    // If you don't provide the region, it defaults to `us`.\n    region: 'us',\n    //\n    // Sauce Labs provides a [headless offering](https://saucelabs.com/products/web-testing/sauce-headless-testing)\n    // that allows you to run Chrome and Firefox tests headless.\n    //\n    headless: false\n    //\n    // ==================\n    // Specify Test Files\n    // ==================\n    // Define which test specs should run. The pattern is relative to the directory\n    // from which `wdio` was called.\n    //\n    // The specs are defined as an array of spec files (optionally using wildcards\n    // that will be expanded). The test for each spec file will be run in a separate\n    // worker process. In order to have a group of spec files run in the same worker\n    // process simply enclose them in an array within the specs array.\n    //\n    // If you are calling `wdio` from an NPM script (see https://docs.npmjs.com/cli/run-script),\n    // then the current working directory is where your `package.json` resides, so `wdio`\n    // will be called from there.\n    //\n    specs: [\n        'test/spec/**',\n        ['group/spec/**']\n    ],\n    // Patterns to exclude.\n    exclude: [\n        'test/spec/multibrowser/**',\n        'test/spec/mobile/**'\n    ],\n    //\n    // ============\n    // Capabilities\n    // ============\n    // Define your capabilities here. WebdriverIO can run multiple capabilities at the same\n    // time. Depending on the number of capabilities, WebdriverIO launches several test\n    // sessions. Within your `capabilities`, you can overwrite the `spec` and `exclude`\n    // options in order to group specific specs to a specific capability.\n    //\n    // First, you can define how many instances should be started at the same time. Let's\n    // say you have 3 different capabilities (Chrome, Firefox, and Safari) and you have\n    // set `maxInstances` to 1. wdio will spawn 3 processes.\n    //\n    // Therefore, if you have 10 spec files and you set `maxInstances` to 10, all spec files\n    // will be tested at the same time and 30 processes will be spawned.\n    //\n    // The property basically handles how many capabilities from the same test should run tests.\n    //\n    maxInstances: 10,\n    //\n    // Or set a limit to run tests with a specific capability.\n    maxInstancesPerCapability: 10,\n    //\n    // If you have trouble getting all important capabilities together, check out the\n    // Sauce Labs platform configurator - a great tool to configure your capabilities:\n    // https://docs.saucelabs.com/reference/platforms-configurator\n    //\n    capabilities: [{\n        browserName: 'chrome',\n        'goog:chromeOptions': {\n        // to run chrome headless the following flags are required\n        // (see https://developers.google.com/web/updates/2017/04/headless-chrome)\n        // args: ['--headless', '--disable-gpu'],\n        }\n        //\n        // Parameter to ignore some or all default flags\n        // - if value is true: ignore all DevTools 'default flags' and Puppeteer 'default arguments'\n        // - if value is an array: DevTools filters given default arguments\n        // 'wdio:devtoolsOptions': {\n        //    ignoreDefaultArgs: true,\n        //    ignoreDefaultArgs: ['--disable-sync', '--disable-extensions'],\n        // }\n    }, {\n        // maxInstances can get overwritten per capability. So if you have an in house Selenium\n        // grid with only 5 firefox instance available you can make sure that not more than\n        // 5 instance gets started at a time.\n        maxInstances: 5,\n        browserName: 'firefox',\n        specs: [\n            'test/ffOnly/*'\n        ],\n        'moz:firefoxOptions': {\n          // flag to activate Firefox headless mode (see https://github.com/mozilla/geckodriver/blob/master/README.md#firefox-capabilities for more details about moz:firefoxOptions)\n          // args: ['-headless']\n        },\n        // If outputDir is provided WebdriverIO can capture driver session logs\n        // it is possible to configure which logTypes to exclude.\n        // excludeDriverLogs: ['*'], // pass '*' to exclude all driver session logs\n        excludeDriverLogs: ['bugreport', 'server'],\n        //\n        // Parameter to ignore some or all Puppeteer default arguments\n        // ignoreDefaultArgs: ['-foreground'], // set value to true to ignore all default arguments\n    }],\n    //\n    // Additional list of node arguments to use when starting child processes\n    execArgv: [],\n    //\n    // ===================\n    // Test Configurations\n    // ===================\n    // Define all options that are relevant for the WebdriverIO instance here\n    //\n    // Level of logging verbosity: trace | debug | info | warn | error | silent\n    logLevel: 'info',\n    //\n    // Set specific log levels per logger\n    // use 'silent' level to disable logger\n    logLevels: {\n        webdriver: 'info',\n        '@wdio/appium-service': 'info'\n    },\n    //\n    // Set directory to store all logs into\n    outputDir: __dirname,\n    //\n    // If you only want to run your tests until a specific amount of tests have failed use\n    // bail (default is 0 - don't bail, run all tests).\n    bail: 0,\n    //\n    // Set a base URL in order to shorten `url()` command calls. If your `url` parameter starts\n    // with `/`, the `baseUrl` is prepended, not including the path portion of `baseUrl`.\n    //\n    // If your `url` parameter starts without a scheme or `/` (like `some/path`), the `baseUrl`\n    // gets prepended directly.\n    baseUrl: 'http://localhost:8080',\n    //\n    // Default timeout for all waitForXXX commands.\n    waitforTimeout: 1000,\n    //\n    // Add files to watch (e.g. application code or page objects) when running `wdio` command\n    // with `--watch` flag. Globbing is supported.\n    filesToWatch: [\n        // e.g. rerun tests if I change my application code\n        // './app/**/*.js'\n    ],\n    //\n    // Framework you want to run your specs with.\n    // The following are supported: 'mocha', 'jasmine', and 'cucumber'\n    // See also: https://webdriver.io/docs/frameworks.html\n    //\n    // Make sure you have the wdio adapter package for the specific framework installed before running any tests.\n    framework: 'mocha',\n    //\n    // The number of times to retry the entire specfile when it fails as a whole\n    specFileRetries: 1,\n    // Delay in seconds between the spec file retry attempts\n    specFileRetriesDelay: 0,\n    // Whether or not retried specfiles should be retried immediately or deferred to the end of the queue\n    specFileRetriesDeferred: false,\n    //\n    // Test reporter for stdout.\n    // The only one supported by default is 'dot'\n    // See also: https://webdriver.io/docs/dot-reporter.html , and click on \"Reporters\" in left column\n    reporters: [\n        'dot',\n        ['allure', {\n            //\n            // If you are using the \"allure\" reporter you should define the directory where\n            // WebdriverIO should save all allure reports.\n            outputDir: './'\n        }]\n    ],\n    //\n    // Options to be passed to Mocha.\n    // See the full list at: http://mochajs.org\n    mochaOpts: {\n        ui: 'bdd'\n    },\n    //\n    // Options to be passed to Jasmine.\n    // See also: https://github.com/webdriverio/webdriverio/tree/main/packages/wdio-jasmine-framework#jasmineopts-options\n    jasmineOpts: {\n        //\n        // Jasmine default timeout\n        defaultTimeoutInterval: 5000,\n        //\n        // The Jasmine framework allows it to intercept each assertion in order to log the state of the application\n        // or website depending on the result. For example, it is pretty handy to take a screenshot every time\n        // an assertion fails.\n        expectationResultHandler: function(passed, assertion) {\n            // do something\n        },\n        //\n        // Make use of Jasmine-specific grep functionality\n        grep: null,\n        invertGrep: null\n    },\n    //\n    // If you are using Cucumber you need to specify where your step definitions are located.\n    // See also: https://github.com/webdriverio/webdriverio/tree/main/packages/wdio-cucumber-framework#cucumberopts-options\n    cucumberOpts: {\n        require: [],        // <string[]> (file/dir) require files before executing features\n        backtrace: false,   // <boolean> show full backtrace for errors\n        compiler: [],       // <string[]> (\"extension:module\") require files with the given EXTENSION after requiring MODULE (repeatable)\n        dryRun: false,      // <boolean> invoke formatters without executing steps\n        failFast: false,    // <boolean> abort the run on first failure\n        format: ['pretty'], // <string[]> (type[:path]) specify the output format, optionally supply PATH to redirect formatter output (repeatable)\n        snippets: true,     // <boolean> hide step definition snippets for pending steps\n        source: true,       // <boolean> hide source URIs\n        profile: [],        // <string[]> (name) specify the profile to use\n        strict: false,      // <boolean> fail if there are any undefined or pending steps\n        tagExpression: '',  // <string> (expression) only execute the features or scenarios with tags matching the expression\n        timeout: 20000,     // <number> timeout for step definitions\n        ignoreUndefinedDefinitions: false, // <boolean> Enable this config to treat undefined definitions as warnings.\n        scenarioLevelReporter: false // Enable this to make webdriver.io behave as if scenarios and not steps were the tests.\n    },\n    // For convenience, if ts-node or @babel/register modules are detected\n    // they are automatically loaded for config parsing so that TypeScript and\n    // future ES features can be used in wdio configs, and are also\n    // automatically loaded for test running so that tests can be written\n    // using TypeScript and future ES features.\n    // Because this may not be ideal in every situation, the following options\n    // may be used to customize the loading for test running, incase it has\n    // other requirements.\n    autoCompileOpts: {\n        //\n        // To disable auto-loading entirely set this to false.\n        autoCompile: true, // <boolean> Disable this to turn off autoloading. Note: When disabling, you will need to handle calling any such libraries yourself.\n        //\n        // If you have ts-node installed, you can customize how options are passed to it here:\n        // Any valid ts-node config option is allowed. Alternatively the ENV Vars could also be used instead of this.\n        // See also: https://github.com/TypeStrong/ts-node#cli-and-programmatic-options\n        // See also RegisterOptions in https://github.com/TypeStrong/ts-node/blob/master/src/index.ts\n        tsNodeOpts: {\n            transpileOnly: true,\n            project: 'tsconfig.json'\n        },\n        // If you have tsconfig-paths installed and provide a tsConfigPathsOpts\n        // option, it will be automatically registered during bootstrap.\n        tsConfigPathsOpts: {\n            baseUrl: './'\n        },\n        //\n        // If @babel/register is installed, you can customize how options are passed to it here:\n        // Any valid @babel/register config option is allowed.\n        // https://babeljs.io/docs/en/babel-register#specifying-options\n        babelOpts: {\n            ignore: []\n        },\n    },\n    //\n    // =====\n    // Hooks\n    // =====\n    // WebdriverIO provides a several hooks you can use to interfere the test process in order to enhance\n    // it and build services around it. You can either apply a single function to it or an array of\n    // methods. If one of them returns with a promise, WebdriverIO will wait until that promise is\n    // resolved to continue.\n    //\n    /**\n     * Gets executed once before all workers get launched.\n     * @param {Object} config wdio configuration object\n     * @param {Array.<Object>} capabilities list of capabilities details\n     */\n    onPrepare: function (config, capabilities) {\n    },\n    /**\n     * Gets executed before a worker process is spawned and can be used to initialize specific service\n     * for that worker as well as modify runtime environments in an async fashion.\n     * @param  {String} cid      capability id (e.g 0-0)\n     * @param  {[type]} caps     object containing capabilities for session that will be spawn in the worker\n     * @param  {[type]} specs    specs to be run in the worker process\n     * @param  {[type]} args     object that will be merged with the main configuration once worker is initialized\n     * @param  {[type]} execArgv list of string arguments passed to the worker process\n     */\n    onWorkerStart: function (cid, caps, specs, args, execArgv) {\n    },\n    /**\n     * Gets executed just before initializing the webdriver session and test framework. It allows you\n     * to manipulate configurations depending on the capability or spec.\n     * @param {Object} config wdio configuration object\n     * @param {Array.<Object>} capabilities list of capabilities details\n     * @param {Array.<String>} specs List of spec file paths that are to be run\n     */\n    beforeSession: function (config, capabilities, specs) {\n    },\n    /**\n     * Gets executed before test execution begins. At this point you can access to all global\n     * variables like `browser`. It is the perfect place to define custom commands.\n     * @param {Array.<Object>} capabilities list of capabilities details\n     * @param {Array.<String>} specs        List of spec file paths that are to be run\n     * @param {Object}         browser      instance of created browser/device session\n     */\n    before: function (capabilities, specs, browser) {\n    },\n    /**\n     * Gets executed before the suite starts.\n     * @param {Object} suite suite details\n     */\n    beforeSuite: function (suite) {\n    },\n    /**\n     * This hook gets executed _before_ every hook within the suite starts.\n     * (For example, this runs before calling `before`, `beforeEach`, `after`, `afterEach` in Mocha.). In Cucumber `context` is the World object.\n     *\n     */\n    beforeHook: function (test, context) {\n    },\n    /**\n     * Hook that gets executed _after_ every hook within the suite ends.\n     * (For example, this runs after calling `before`, `beforeEach`, `after`, `afterEach` in Mocha.). In Cucumber `context` is the World object.\n     */\n    afterHook: function (test, context, { error, result, duration, passed, retries }) {\n    },\n    /**\n     * Function to be executed before a test (in Mocha/Jasmine only)\n     * @param {Object} test    test object\n     * @param {Object} context scope object the test was executed with\n     */\n    beforeTest: function (test, context) {\n    },\n    /**\n     * Runs before a WebdriverIO command is executed.\n     * @param {String} commandName hook command name\n     * @param {Array} args arguments that the command would receive\n     */\n    beforeCommand: function (commandName, args) {\n    },\n    /**\n     * Runs after a WebdriverIO command gets executed\n     * @param {String} commandName hook command name\n     * @param {Array} args arguments that command would receive\n     * @param {Number} result 0 - command success, 1 - command error\n     * @param {Object} error error object, if any\n     */\n    afterCommand: function (commandName, args, result, error) {\n    },\n    /**\n     * Function to be executed after a test (in Mocha/Jasmine only)\n     * @param {Object}  test             test object\n     * @param {Object}  context          scope object the test was executed with\n     * @param {Error}   result.error     error object in case the test fails, otherwise `undefined`\n     * @param {Any}     result.result    return object of test function\n     * @param {Number}  result.duration  duration of test\n     * @param {Boolean} result.passed    true if test has passed, otherwise false\n     * @param {Object}  result.retries   informations to spec related retries, e.g. `{ attempts: 0, limit: 0 }`\n     */\n    afterTest: function (test, context, { error, result, duration, passed, retries }) {\n    },\n    /**\n     * Hook that gets executed after the suite has ended.\n     * @param {Object} suite suite details\n     */\n    afterSuite: function (suite) {\n    },\n    /**\n     * Gets executed after all tests are done. You still have access to all global variables from\n     * the test.\n     * @param {Number} result 0 - test pass, 1 - test fail\n     * @param {Array.<Object>} capabilities list of capabilities details\n     * @param {Array.<String>} specs List of spec file paths that ran\n     */\n    after: function (result, capabilities, specs) {\n    },\n    /**\n     * Gets executed right after terminating the webdriver session.\n     * @param {Object} config wdio configuration object\n     * @param {Array.<Object>} capabilities list of capabilities details\n     * @param {Array.<String>} specs List of spec file paths that ran\n     */\n    afterSession: function (config, capabilities, specs) {\n    },\n    /**\n     * Gets executed after all workers have shut down and the process is about to exit.\n     * An error thrown in the `onComplete` hook will result in the test run failing.\n     * @param {Object} exitCode 0 - success, 1 - fail\n     * @param {Object} config wdio configuration object\n     * @param {Array.<Object>} capabilities list of capabilities details\n     * @param {<Object>} results object containing test results\n     */\n    onComplete: function (exitCode, config, capabilities, results) {\n    },\n    /**\n    * Gets executed when a refresh happens.\n    * @param {String} oldSessionId session ID of the old session\n    * @param {String} newSessionId session ID of the new session\n    */\n    onReload: function(oldSessionId, newSessionId) {\n    },\n    /**\n     * Cucumber Hooks\n     *\n     * Runs before a Cucumber Feature.\n     * @param {String}                   uri      path to feature file\n     * @param {GherkinDocument.IFeature} feature  Cucumber feature object\n     */\n    beforeFeature: function (uri, feature) {\n    },\n    /**\n     *\n     * Runs before a Cucumber Scenario.\n     * @param {ITestCaseHookParameter} world    world object containing information on pickle and test step\n     * @param {Object}                 context  Cucumber World object\n     */\n    beforeScenario: function (world, context) {\n    },\n    /**\n     *\n     * Runs before a Cucumber Step.\n     * @param {Pickle.IPickleStep} step     step data\n     * @param {IPickle}            scenario scenario pickle\n     * @param {Object}             context  Cucumber World object\n     */\n    beforeStep: function (step, scenario, context) {\n    },\n    /**\n     *\n     * Runs after a Cucumber Step.\n     * @param {Pickle.IPickleStep} step             step data\n     * @param {IPickle}            scenario         scenario pickle\n     * @param {Object}             result           results object containing scenario results\n     * @param {boolean}            result.passed    true if scenario has passed\n     * @param {string}             result.error     error stack if scenario failed\n     * @param {number}             result.duration  duration of scenario in milliseconds\n     * @param {Object}             context          Cucumber World object\n     */\n    afterStep: function (step, scenario, result, context) {\n    },\n    /**\n     *\n     * Runs after a Cucumber Scenario.\n     * @param {ITestCaseHookParameter} world            world object containing information on pickle and test step\n     * @param {Object}                 result           results object containing scenario results `{passed: boolean, error: string, duration: number}`\n     * @param {boolean}                result.passed    true if scenario has passed\n     * @param {string}                 result.error     error stack if scenario failed\n     * @param {number}                 result.duration  duration of scenario in milliseconds\n     * @param {Object}                 context          Cucumber World object\n     */\n    afterScenario: function (world, result, context) {\n    },\n    /**\n     *\n     * Runs after a Cucumber Feature.\n     * @param {String}                   uri      path to feature file\n     * @param {GherkinDocument.IFeature} feature  Cucumber feature object\n     */\n    afterFeature: function (uri, feature) {\n    }\n}\n")),(0,a.kt)("p",null,"You can also find a file with all possible options and variations in the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/webdriverio/webdriverio/blob/main/examples/wdio.conf.js"},"example folder"),"."))}f.isMDXComponent=!0}}]);