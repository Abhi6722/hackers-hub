"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4143],{4137:function(e,t,o){o.d(t,{Zo:function(){return p},kt:function(){return m}});var r=o(7294);function n(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function a(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,r)}return o}function i(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?a(Object(o),!0).forEach((function(t){n(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):a(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function s(e,t){if(null==e)return{};var o,r,n=function(e,t){if(null==e)return{};var o,r,n={},a=Object.keys(e);for(r=0;r<a.length;r++)o=a[r],t.indexOf(o)>=0||(n[o]=e[o]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)o=a[r],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(n[o]=e[o])}return n}var l=r.createContext({}),u=function(e){var t=r.useContext(l),o=t;return e&&(o="function"==typeof e?e(t):i(i({},t),e)),o},p=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var o=e.components,n=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=u(o),m=n,h=d["".concat(l,".").concat(m)]||d[m]||c[m]||a;return o?r.createElement(h,i(i({ref:t},p),{},{components:o})):r.createElement(h,i({ref:t},p))}));function m(e,t){var o=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=o.length,i=new Array(a);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:n,i[1]=s;for(var u=2;u<a;u++)i[u]=o[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,o)}d.displayName="MDXCreateElement"},8448:function(e,t,o){var r=o(7294);t.Z=function(e){var t=e.children,o=e.hidden,n=e.className;return r.createElement("div",{role:"tabpanel",hidden:o,className:n},t)}},7225:function(e,t,o){o.d(t,{Z:function(){return d}});var r=o(7462),n=o(7294),a=o(1048),i=o(2713);var s=function(){var e=(0,n.useContext)(i.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e},l=o(3309),u=o(6010),p="tabItem_vU9c";function c(e){var t,o,r,a=e.lazy,i=e.block,c=e.defaultValue,d=e.values,m=e.groupId,h=e.className,v=n.Children.map(e.children,(function(e){if((0,n.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),b=null!=d?d:v.map((function(e){var t=e.props;return{value:t.value,label:t.label}})),f=(0,l.lx)(b,(function(e,t){return e.value===t.value}));if(f.length>0)throw new Error('Docusaurus error: Duplicate values "'+f.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var w=null===c?c:null!=(t=null!=c?c:null==(o=v.find((function(e){return e.props.default})))?void 0:o.props.value)?t:null==(r=v[0])?void 0:r.props.value;if(null!==w&&!b.some((function(e){return e.value===w})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+w+'" but none of its children has the corresponding value. Available values are: '+b.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var g=s(),k=g.tabGroupChoices,y=g.setTabGroupChoices,N=(0,n.useState)(w),P=N[0],T=N[1],O=[],D=(0,l.o5)().blockElementScrollPositionUntilNextRender;if(null!=m){var C=k[m];null!=C&&C!==P&&b.some((function(e){return e.value===C}))&&T(C)}var E=function(e){var t=e.currentTarget,o=O.indexOf(t),r=b[o].value;r!==P&&(D(t),T(r),null!=m&&y(m,r))},W=function(e){var t,o=null;switch(e.key){case"ArrowRight":var r=O.indexOf(e.currentTarget)+1;o=O[r]||O[0];break;case"ArrowLeft":var n=O.indexOf(e.currentTarget)-1;o=O[n]||O[O.length-1]}null==(t=o)||t.focus()};return n.createElement("div",{className:"tabs-container"},n.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,u.Z)("tabs",{"tabs--block":i},h)},b.map((function(e){var t=e.value,o=e.label;return n.createElement("li",{role:"tab",tabIndex:P===t?0:-1,"aria-selected":P===t,className:(0,u.Z)("tabs__item",p,{"tabs__item--active":P===t}),key:t,ref:function(e){return O.push(e)},onKeyDown:W,onFocus:E,onClick:E},null!=o?o:t)}))),a?(0,n.cloneElement)(v.filter((function(e){return e.props.value===P}))[0],{className:"margin-vert--md"}):n.createElement("div",{className:"margin-vert--md"},v.map((function(e,t){return(0,n.cloneElement)(e,{key:t,hidden:e.props.value!==P})}))))}function d(e){var t=(0,a.Z)();return n.createElement(c,(0,r.Z)({key:String(t)},e))}},2713:function(e,t,o){var r=(0,o(7294).createContext)(void 0);t.Z=r},2346:function(e,t,o){o.r(t),o.d(t,{frontMatter:function(){return u},contentTitle:function(){return p},metadata:function(){return c},toc:function(){return d},default:function(){return h}});var r=o(7462),n=o(3366),a=(o(7294),o(4137)),i=o(7225),s=o(8448),l=["components"],u={id:"automationProtocols",title:"Automation Protocols"},p=void 0,c={unversionedId:"automationProtocols",id:"automationProtocols",isDocsHomePage:!1,title:"Automation Protocols",description:"With WebdriverIO, you can choose between multiple automation technologies when running your E2E tests locally or in the cloud. By default WebdriverIO will always check for a browser driver that is compliant to the WebDriver protocol on localhost:4444. If it can't find such driver it falls back to use Chrome DevTools using Puppeteer under the hood.",source:"@site/docs/AutomationProtocols.md",sourceDirName:".",slug:"/automationProtocols",permalink:"/docs/automationProtocols",editUrl:"https://github.com/Abhi6722/hackers-hub/edit/main/website/docs/AutomationProtocols.md",tags:[],version:"current",frontMatter:{id:"automationProtocols",title:"Automation Protocols"},sidebar:"docs",previous:{title:"Sync vs. Async Mode",permalink:"/docs/sync-vs-async"},next:{title:"Multiremote",permalink:"/docs/multiremote"}},d=[{value:"WebDriver Protocol",id:"webdriver-protocol",children:[{value:"Advantages",id:"advantages",children:[],level:3},{value:"Disadvantages",id:"disadvantages",children:[],level:3}],level:2},{value:"DevTools Protocol",id:"devtools-protocol",children:[{value:"<code>wdio:devtoolsOptions</code> Capability",id:"wdiodevtoolsoptions-capability",children:[{value:"customPort",id:"customport",children:[],level:4}],level:3},{value:"Advantages",id:"advantages-1",children:[],level:3},{value:"Disadvantages",id:"disadvantages-1",children:[],level:3}],level:2}],m={toc:d};function h(e){var t=e.components,u=(0,n.Z)(e,l);return(0,a.kt)("wrapper",(0,r.Z)({},m,u,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"With WebdriverIO, you can choose between multiple automation technologies when running your E2E tests locally or in the cloud. By default WebdriverIO will always check for a browser driver that is compliant to the WebDriver protocol on ",(0,a.kt)("inlineCode",{parentName:"p"},"localhost:4444"),". If it can't find such driver it falls back to use Chrome DevTools using Puppeteer under the hood."),(0,a.kt)("p",null,"Nearly all modern browsers that support ",(0,a.kt)("a",{parentName:"p",href:"https://w3c.github.io/webdriver/"},"WebDriver")," also support another native interface called ",(0,a.kt)("a",{parentName:"p",href:"https://chromedevtools.github.io/devtools-protocol/"},"DevTools")," that can be used for automation purposes."),(0,a.kt)("p",null,"Both have advantages and disadvantages, depending on your use case and environment."),(0,a.kt)("h2",{id:"webdriver-protocol"},"WebDriver Protocol"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("a",{parentName:"p",href:"https://w3c.github.io/webdriver/"},"WebDriver")," is a remote control interface that enables introspection and control of user agents. It provides a platform- and language-neutral wire protocol as a way for out-of-process programs to remotely instruct the behavior of web browsers.")),(0,a.kt)("p",null,"The WebDriver protocol was designed to automate a browser from the user perspective, meaning that everything a user is able to do, you can do with the browser. It provides a set of commands that abstract away common interactions with an application (e.g., navigating, clicking, or reading the state of an element). Since it is a web standard, it is well supported across all major browser vendors, and also is being used as underlying protocol for mobile automation using ",(0,a.kt)("a",{parentName:"p",href:"http://appium.io"},"Appium"),"."),(0,a.kt)("p",null,"To use this automation protocol, you need a proxy server that translates all commands and executes them in the target environment (i.e. the browser or the mobile app)."),(0,a.kt)("p",null,"For browser automation, the proxy server is usually the browser driver. There are drivers  available for all browsers:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Chrome \u2013 ",(0,a.kt)("a",{parentName:"li",href:"http://chromedriver.chromium.org/downloads"},"ChromeDriver")),(0,a.kt)("li",{parentName:"ul"},"Firefox \u2013 ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/mozilla/geckodriver/releases"},"Geckodriver")),(0,a.kt)("li",{parentName:"ul"},"Microsoft Edge \u2013 ",(0,a.kt)("a",{parentName:"li",href:"https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/"},"Edge Driver")),(0,a.kt)("li",{parentName:"ul"},"Internet Explorer \u2013 ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/SeleniumHQ/selenium/wiki/InternetExplorerDriver"},"InternetExplorerDriver")),(0,a.kt)("li",{parentName:"ul"},"Safari \u2013 ",(0,a.kt)("a",{parentName:"li",href:"https://developer.apple.com/documentation/webkit/testing_with_webdriver_in_safari"},"SafariDriver"))),(0,a.kt)("p",null,"For any kind of mobile automation, you\u2019ll need to install and setup ",(0,a.kt)("a",{parentName:"p",href:"http://appium.io"},"Appium"),". It will allow you to automate mobile (iOS/Android) or even desktop (macOS/Windows) applications using the same WebdriverIO setup."),(0,a.kt)("p",null,"There are also plenty of services that allow you to run your automation test in the cloud at high scale. Instead of having to setup all these drivers locally, you can just talk to these services (e.g. ",(0,a.kt)("a",{parentName:"p",href:"https://saucelabs.com"},"Sauce Labs"),") in the cloud and inspect the results on their platform. The communication between test script and automation environment will look as follows:"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"WebDriver Setup",src:o(9868).Z})),(0,a.kt)("h3",{id:"advantages"},"Advantages"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Official W3C web standard, supported by all major browsers"),(0,a.kt)("li",{parentName:"ul"},"Simplified protocol that covers common user interactions"),(0,a.kt)("li",{parentName:"ul"},"Support for mobile automation (and even native desktop apps)"),(0,a.kt)("li",{parentName:"ul"},"Can be used locally as well as in the cloud through services like ",(0,a.kt)("a",{parentName:"li",href:"https://saucelabs.com"},"Sauce Labs"))),(0,a.kt)("h3",{id:"disadvantages"},"Disadvantages"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Not designed for in-depth browser analysis (e.g., tracing or intercepting network events)"),(0,a.kt)("li",{parentName:"ul"},"Limited set of automation capabilities (e.g., no support to throttle CPU or network)"),(0,a.kt)("li",{parentName:"ul"},"Additional effort to set up browser driver with selenium-standalone/chromedriver/etc")),(0,a.kt)("h2",{id:"devtools-protocol"},"DevTools Protocol"),(0,a.kt)("p",null,"The DevTools interface is a native browser interface that is usually being used to debug the browser from a remote application (e.g., ",(0,a.kt)("a",{parentName:"p",href:"https://developers.google.com/web/tools/chrome-devtools/"},"Chrome DevTools"),"). Next to its capabilities to inspect the browser in nearly all possible forms, it can also be used to control it."),(0,a.kt)("p",null,"While every browser used to have its own internal DevTools interface that was not really exposed to the user, more and more browsers are now adopting the ",(0,a.kt)("a",{parentName:"p",href:"https://chromedevtools.github.io/devtools-protocol/"},"Chrome DevTools Protocol"),". It is used to either debug a web application using Chrome DevTools or control Chrome using tools like ",(0,a.kt)("a",{parentName:"p",href:"https://pptr.dev"},"Puppeteer"),"."),(0,a.kt)("p",null,"The communication happens without any proxy, directly to the browser using WebSockets:"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"DevTools Setup",src:o(89).Z})),(0,a.kt)("p",null,"WebdriverIO allows you to use the DevTools capabilities as an alternative automation technology for WebDriver if you have special requirements to automate the browser. With the ",(0,a.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/devtools"},(0,a.kt)("inlineCode",{parentName:"a"},"devtools"))," NPM package, you can use the same commands that WebDriver provides, which then can be used by WebdriverIO and the WDIO testrunner to run its useful commands on top of that protocol. It uses Puppeteer to under the hood and allows you to run a sequence of commands with Puppeteer if needed."),(0,a.kt)("p",null,"To use DevTools as your automation protocol switch the ",(0,a.kt)("inlineCode",{parentName:"p"},"automationProtocol")," flag to ",(0,a.kt)("inlineCode",{parentName:"p"},"devtools")," in your configurations or just run WebdriverIO without a browser driver run in the background."),(0,a.kt)(i.Z,{defaultValue:"testrunner",values:[{label:"Testrunner",value:"testrunner"},{label:"Standalone",value:"standalone"}],mdxType:"Tabs"},(0,a.kt)(s.Z,{value:"testrunner",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="wdio.conf.js"',title:'"wdio.conf.js"'},"exports.config = {\n    // ...\n    automationProtocol: 'devtools'\n    // ...\n}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="devtools.e2e.js"',title:'"devtools.e2e.js"'},"describe('my test', () => {\n    it('can use Puppeteer as automation fallback', async () => {\n        // WebDriver command\n        await browser.url('https://webdriver.io')\n\n        // get <Puppeteer.Browser> instance (https://pptr.dev/#?product=Puppeteer&version=v5.2.1&show=api-class-browser)\n        const puppeteer = await browser.getPuppeteer()\n\n        // use Puppeteer interfaces\n        const page = (await puppeteer.pages())[0]\n        await page.setRequestInterception(true)\n        page.on('request', interceptedRequest => {\n            if (interceptedRequest.url().endsWith('webdriverio.png')) {\n                return interceptedRequest.continue({\n                    url: 'https://webdriver.io/img/puppeteer.png'\n                })\n            }\n\n            interceptedRequest.continue()\n        })\n\n        // continue with WebDriver commands\n        await browser.url('https://webdriver.io')\n\n        /**\n         * WebdriverIO logo is no replaced with the Puppeteer logo\n         */\n    })\n})\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Note:")," there is no need to have either ",(0,a.kt)("inlineCode",{parentName:"p"},"selenium-standalone")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"chromedriver")," services installed."),(0,a.kt)("p",null,"We recommend wrapping your Puppeteer calls within the ",(0,a.kt)("inlineCode",{parentName:"p"},"call")," command, so that all calls are executed before WebdriverIO continues with the next WebDriver command.")),(0,a.kt)(s.Z,{value:"standalone",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const { remote } = require('webdriverio')\n\n(async () => {\n    const browser = await remote({\n        automationProtocol: 'devtools',\n        capabilities: {\n            browserName: 'chrome'\n        }\n    })\n\n    // WebDriver command\n    await browser.url('https://webdriver.io')\n\n    // get <Puppeteer.Browser> instance (https://pptr.dev/#?product=Puppeteer&version=v5.2.1&show=api-class-browser)\n    const puppeteer = await browser.getPuppeteer()\n\n    // switch to Puppeteer to intercept requests\n    const page = (await puppeteer.pages())[0]\n    await page.setRequestInterception(true)\n    page.on('request', interceptedRequest => {\n        if (interceptedRequest.url().endsWith('webdriverio.png')) {\n            return interceptedRequest.continue({\n                url: 'https://user-images.githubusercontent.com/10379601/29446482-04f7036a-841f-11e7-9872-91d1fc2ea683.png'\n            })\n        }\n\n        interceptedRequest.continue()\n    })\n\n    // continue with WebDriver commands\n    await browser.refresh()\n    await browser.pause(2000)\n\n    await browser.deleteSession()\n})()\n")))),(0,a.kt)("p",null,"By accessing the Puppeteer interface, you have access to a variety of new capabilities to automate or inspect the browser and your application, e.g. intercepting network requests (see above), tracing the browser, throttle CPU or network capabilities, and much more."),(0,a.kt)("h3",{id:"wdiodevtoolsoptions-capability"},(0,a.kt)("inlineCode",{parentName:"h3"},"wdio:devtoolsOptions")," Capability"),(0,a.kt)("p",null,"If you run WebdriverIO tests through the DevTools package, you can apply ",(0,a.kt)("a",{parentName:"p",href:"https://pptr.dev/#?product=Puppeteer&version=v8.0.0&show=api-puppeteerlaunchoptions"},"custom Puppeteer options"),". These options will be directly passed into the ",(0,a.kt)("a",{parentName:"p",href:"https://pptr.dev/#?product=Puppeteer&version=v8.0.0&show=api-puppeteerlaunchoptions"},(0,a.kt)("inlineCode",{parentName:"a"},"launch"))," or ",(0,a.kt)("a",{parentName:"p",href:"https://pptr.dev/#?product=Puppeteer&version=v8.0.0&show=api-puppeteerconnectoptions"},(0,a.kt)("inlineCode",{parentName:"a"},"connect"))," methods of Puppeteer. Other custom devtools options are the following:"),(0,a.kt)("h4",{id:"customport"},"customPort"),(0,a.kt)("p",null,"Start Chrome on a custom port."),(0,a.kt)("p",null,"Type: ",(0,a.kt)("inlineCode",{parentName:"p"},"number"),(0,a.kt)("br",null),"\nDefault: ",(0,a.kt)("inlineCode",{parentName:"p"},"9222")," (default of Puppeteer)"),(0,a.kt)("p",null,"Note: if you pass in ",(0,a.kt)("inlineCode",{parentName:"p"},"goog:chromeOptions/debuggerAddress"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"wdio:devtoolsOptions/browserWSEndpoint")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"wdio:devtoolsOptions/browserURL")," options, WebdriverIO will try to connect with given connection details rather than starting a browser. For example you can connect to Testingbots cloud via:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"import { format } from 'util'\nimport { remote } from 'webdriverio'\n\n(async () => {\n    const browser = await remote({\n        capabilities: {\n            'wdio:devtoolsOptions': {\n                browserWSEndpoint: format(\n                    `wss://cloud.testingbot.com?key=%s&secret=%s&browserName=chrome&browserVersion=latest`,\n                    process.env.TESTINGBOT_KEY,\n                    process.env.TESTINGBOT_SECRET\n                )\n            }\n        }\n    })\n\n    await browser.url('https://webdriver.io')\n\n    const title = await browser.getTitle()\n    console.log(title) // returns \"should return \"WebdriverIO - click\"\"\n\n    await browser.deleteSession()\n})()\n")),(0,a.kt)("h3",{id:"advantages-1"},"Advantages"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Access to more automation capabilities (e.g. network interception, tracing etc.)"),(0,a.kt)("li",{parentName:"ul"},"No need to manage browser drivers")),(0,a.kt)("h3",{id:"disadvantages-1"},"Disadvantages"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Only supports Chromium based browser (e.g. Chrome, Chromium Edge) and (partially) Firefox"),(0,a.kt)("li",{parentName:"ul"},"Does ",(0,a.kt)("strong",{parentName:"li"},"not")," support execution on cloud vendors such as Sauce Labs, BrowserStack etc.")))}h.isMDXComponent=!0},89:function(e,t,o){t.Z=o.p+"assets/images/devtools-becb0a3d3f3e2b6e049bb99883760286.png"},9868:function(e,t,o){t.Z=o.p+"assets/images/webdriver-97575d94ce4d11618b595acd1496a887.png"}}]);