"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1477],{10:function(e){e.exports=JSON.parse('{"blogPosts":[{"id":"WebdriverIO, meet Serenity/JS","metadata":{"permalink":"/blog/2021/08/25/webdriverio-meet-serenity-js","editUrl":"https://github.com/Abhi6722/hackers-hub/edit/main/website/blog/blog/2021-08-25-webdriverio-meet-serenity-js.md","source":"@site/blog/2021-08-25-webdriverio-meet-serenity-js.md","title":"WebdriverIO, meet Serenity/JS","description":"WebdriverIO is one of the most popular test frameworks and an excellent Web integration tool.","date":"2021-08-25T00:00:00.000Z","formattedDate":"August 25, 2021","tags":[],"readingTime":4.165,"truncated":false,"authors":[{"name":"Jan Molak","url":"https://www.linkedin.com/in/janmolak/","imageURL":"https://avatars.githubusercontent.com/u/1089173?s=400&v=4"}],"nextItem":{"title":"Sync API Deprecation","permalink":"/blog/2021/07/28/sync-api-deprecation"}},"content":"WebdriverIO is one of the most popular test frameworks and an excellent Web integration tool.\\n\\nIn fact, it\'s one of my favourites \u2764\ufe0f\\n\\nBut, to write **truly great acceptance tests** you need more than that:\\n\\n- You need **business-friendly abstractions** that capture the language of your domain and make even the most sophisticated, multi-actor, and cross-system workflows easy to design and adapt as the requirements change.\\n- You need **in-depth reporting** that tells you not only what tests were executed, but also what requirements and business capabilities have (and have not!) been tested.\\n- And on top of that, you need to be able to interact with **all the interfaces** of your system, so that the slower UI-based interactions are just one tool in your testing toolbox, rather than your only option.\\n\\nOf course, all the above is way outside of the scope of what WebdriverIO is trying to accomplish.\\n\\nTypically, you and your team would need to figure it out all by yourselves.\\n\\nBut, what if I told you that there was a **better way**? That there was another framework that\'s perfectly compatible with WebdriverIO and optimised to help you write **world-class, full-stack acceptance tests** following the [Screenplay Pattern](https://serenity-js.org/handbook/design/screenplay-pattern.html) and [SOLID](https://en.wikipedia.org/wiki/SOLID) design principles, even if not everyone on your team is an experienced test engineer?\\n\\nWhat if I told you that this framework also covers **business-friendly reporting** and helps you write **high-quality test code** that\'s **easy to understand**, **maintain**, and **reuse across projects and teams**?\\n\\nWhat if I told you that you could add it to your **existing WebdriverIO test suites**, today?\\n\\nPlease allow me to introduce, [Serenity/JS](https://serenity-js.org)!\\n\\n### About Serenity/JS\\n\\n[Serenity/JS](https://serenity-js.org) is an open-source **acceptance testing** and **integration framework**, designed to make writing truly great acceptance tests **easier**, **more collaborative**, and **fun**! \ud83d\ude80\\n\\nWhile you can use Serenity/JS to test systems of any complexity, it works particularly well in complex, workflow-based, multi-actor contexts.\\n\\nAt a high level, Serenity/JS is a modular framework that provides [adapters](https://serenity-js.org/modules/) that make it easy to integrate your tests with [Web apps](https://serenity-js.org/modules/webdriverio/), [REST APIs](https://serenity-js.org/modules/rest/), [Node.js servers](https://serenity-js.org/modules/local-server/), and [pretty much anything](https://serenity-js.org/handbook/integration/architecture.html) a Node.js program can talk to.\\n\\nThanks to Serenity/JS [Screenplay Pattern](https://serenity-js.org/handbook/design/screenplay-pattern.html), you and your team will also have a simple, consistent, and **async-friendly** [programming model](https://serenity-js.org/handbook/thinking-in-serenity-js/index.html) across all those interfaces.\\n\\nApart from integrating with your system under test, Serenity/JS can also integrate with popular test runners such as [Cucumber](https://serenity-js.org/modules/cucumber/), [Jasmine](https://serenity-js.org/modules/jasmine/), [Mocha](https://serenity-js.org/modules/mocha/), [Protractor](https://serenity-js.org/modules/protractor/), and now also [WebdriverIO](https://serenity-js.org/modules/webdriverio/)!\\n\\nBetter yet, Serenity/JS provides a unique [reporting system](https://serenity-js.org/handbook/reporting/index.html) to help you generate consistent test execution and feature coverage reports across all the interfaces of your system and across all your test suites.\\nSerenity/JS reporting services can work together with your existing WebdriverIO reporters too!\\n\\n### Thinking in Serenity/JS\\n\\nThe best way to get started with Serenity/JS is to follow our brand-new series of tutorials, where you\'ll learn how to build full-stack test automation frameworks from scratch.\\n\\nCheck out [\\"Thinking in Serenity/JS\\"](https://serenity-js.org/handbook/thinking-in-serenity-js/index.html) \ud83e\udd13\\n\\n### Examples and project templates\\n\\nIf you prefer to kick the tires and jump straight into the code, you\'ll find [over a dozen example projects](https://github.com/serenity-js/serenity-js/tree/master/examples) in the [Serenity/JS GitHub repository](https://github.com/serenity-js/serenity-js) and plenty of code samples in our [API docs](https://serenity-js.org/modules/webdriverio/).\\n\\nWe\'ve also created WebdriverIO + Serenity/JS project templates to help you get started:\\n- [WebdriverIO, Serenity/JS and Cucumber](https://github.com/serenity-js/serenity-js-cucumber-webdriverio-template/)\\n- [WebdriverIO, Serenity/JS and Mocha](https://github.com/serenity-js/serenity-js-mocha-webdriverio-template/)\\n\\nAll the above templates are configured to produce **Serenity BDD HTML reports**, **automatically capture screenshots** upon test failure, and run in a **Continuous Integration** environment.\\n\\n### Adding Serenity/JS to an existing project\\n\\nIf you\'re using WebdriverIO with Mocha, run the following command in your computer terminal to add the relevant [Serenity/JS modules](https://serenity-js.org/modules) to your project:\\n\\n```shell\\nnpm install --save-dev @serenity-js/{code,console-reporter,mocha,webdriverio}\\n```\\n\\nIf you\'re using Cucumber or Jasmine instead, replace [`mocha`](https://serenity-js.org/modules/mocha) with the name of your preferred test runner, so [`cucumber`](https://serenity-js.org/modules/cucumber) or [`jasmine`](https://serenity-js.org/modules/jasmine), respectively.\\n\\nNext, tell WebdriverIO to use Serenity/JS instead of the default framework adapter:\\n\\n```ts title=wdio.conf.ts\\nimport { ConsoleReporter } from \'@serenity-js/console-reporter\';\\nimport { WebdriverIOConfig } from \'@serenity-js/webdriverio\';\\n\\nexport const config: WebdriverIOConfig = {\\n\\n    // Enable Serenity/JS framework adapter\\n    // see: https://serenity-js.org/modules/webdriverio/\\n    framework: \'@serenity-js/webdriverio\',\\n\\n    serenity: {\\n        // Use Serenity/JS test runner adapter for Mocha\\n        runner: \'mocha\',        // see: https://serenity-js.org/modules/mocha/\\n        // runner: \'jasmine\',   // see: https://serenity-js.org/modules/jasmine/\\n        // runner: \'cucumber\',  // see: https://serenity-js.org/modules/cucumber/\\n\\n        // Configure reporting services\\n        // see: https://serenity-js.org/handbook/reporting/\\n        crew: [\\n            ConsoleReporter.forDarkTerminals(),\\n        ],\\n    },\\n\\n    // ... other WebdriverIO configuration\\n}\\n```\\n\\nAnd that\'s it!\\n\\nThe above configuration enables [Serenity/JS Console Reporter](https://serenity-js.org/modules/console-reporter), which produces output similar to the below and plays nicely with any existing WebdriverIO reporters you might have already configured:\\n\\n![Serenity/JS Console Reporter output](assets/serenity-js-console-reporter-output.png)\\n\\nTo enable **Serenity BDD HTML Reporter**, please [follow the instructions](https://serenity-js.org/handbook/reporting/serenity-bdd-reporter.html).\\n\\nTo learn about Serenity/JS [Screenplay Pattern](https://serenity-js.org/handbook/design/screenplay-pattern.html), [follow the tutorial](https://serenity-js.org/handbook/thinking-in-serenity-js/index.html).\\n\\n### Questions? Feedback? Ideas?\\n\\nIf you have questions about Serenity/JS or need guidance in getting started, join our friendly [Serenity/JS Community Chat channel](https://gitter.im/serenity-js/Lobby).\\n\\nFor project news and updates, follow [@SerenityJS](https://twitter.com/SerenityJS) on Twitter.\\n\\nAnd if you like Serenity/JS and would like to see more articles on how to use it with WebdriverIO, remember to give us a \u2b50 on [Serenity/JS GitHub](https://github.com/serenity-js/serenity-js)! \ud83d\ude0a\\n\\nEnjoy Serenity!\\n\\nJan"},{"id":"Sync API Deprecation","metadata":{"permalink":"/blog/2021/07/28/sync-api-deprecation","editUrl":"https://github.com/Abhi6722/hackers-hub/edit/main/website/blog/blog/2021-07-28-sync-api-deprecation.md","source":"@site/blog/2021-07-28-sync-api-deprecation.md","title":"Sync API Deprecation","description":"For many years one of the selling features of the WebdriverIO framework was its synchronous API. Especially for folks coming from more synchronous oriented languages such as Java or Ruby, it has helped to avoid race conditions when executing commands. But also people that are more familiar with Promises tend to prefer synchronous execution as it made the code easier to read and handle.","date":"2021-07-28T00:00:00.000Z","formattedDate":"July 28, 2021","tags":[],"readingTime":3,"truncated":false,"authors":[{"name":"Christian Bromann","url":"http://twitter.com/bromann","imageURL":"https://s.gravatar.com/avatar/d98b16d7c93d15865f34a225dd4b1254?s=80"}],"prevItem":{"title":"WebdriverIO, meet Serenity/JS","permalink":"/blog/2021/08/25/webdriverio-meet-serenity-js"},"nextItem":{"title":"Case Study - How WebdriverIO facilitated faster releases and better code quality for an online video company","permalink":"/blog/2021/06/22/jwplayer-case-study"}},"content":"For many years one of the selling features of the WebdriverIO framework was its synchronous API. Especially for folks coming from more synchronous oriented languages such as Java or Ruby, it has helped to avoid race conditions when executing commands. But also people that are more familiar with [Promises](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) tend to prefer synchronous execution as it made the code easier to read and handle.\\n\\nRunning asynchronous commands in a synchronous way was possible with the help of the [`@wdio/sync`](https://www.npmjs.com/package/@wdio/sync) package. If installed, WebdriverIO would automatically wrap the commands with utility methods that were using the [`fibers`](https://www.npmjs.com/package/fibers) package to create a synchronous execution environment. It uses some internal V8 APIs to allow to jump between multiple call stacks from within a single thread. This approach also has been popular among other projects, e.g. [Meteor](https://www.meteor.com/), where most of the code is written using asynchronous APIs which causes developers to constantly start the line of code with `await`.\\n\\nLast year the [author](https://github.com/laverdet) of the Fibers package [announced](https://github.com/laverdet/node-fibers/commit/e2a0ed9c6d985f94c2b1947eaf72d5797e8a3278) that he would no longer continue to maintain the project anymore. He built Fibers when JavaScript did not have any proper mechanism to handle asynchronous code other than using callbacks. With JavaScript evolving and adding APIs like [Promises](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) or [Generators](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator) there is technically no reason anymore for Fibers to exist other than preference of code style. Now with the release of Node.js v16 and the update to [V8](https://v8.dev/) v9 Fibers stopped working due to a [change in V8](https://chromium-review.googlesource.com/c/v8/v8/+/2537690) that would remove some internal interfaces Fibers was using. Given that a fix for this is non trivial and the maintainer already stepped down from the project it is unlikely that we will see support for Fibers in Node.js v16 and on.\\n\\nAfter the WebdriverIO team discovered this we immediately took action and evaluated our options. We opened an [RFC](https://github.com/webdriverio/webdriverio/discussions/6702) to discuss with the community in which direction the project should go. I would like to thank everyone who chimed in and provided their opinion. We experimented with some alternative options, e.g. using Babel to transpile synchronous code into asynchronous but they all failed due to various reasons. The ultimate decision was made to accept the fact that synchronous command execution won\'t be possible moving on and rather embrace asynchronicity.\\n\\nWith the release of WebdriverIO `v7.9` we are happy to announce that we improved our asynchronous API and matched it with the synchronous one. When chaining element command calls users had to write aweful code like this before:\\n\\n```js\\nawait (await (await $(\'#foo\')).$$(\'.bar\'))[42].click()\\n```\\n\\nnow this got simiplified to this:\\n\\n```js\\nawait $(\'#foo\').$$(\'.bar\')[42].click()\\n```\\n\\nThanks to the enormous power of the [Proxy Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy) the API is now much more streamlined and less verbose. This will also help users migrating a project that uses the synchronous API to become asynchronous. The team will work on a [codemod](https://github.com/webdriverio/codemod/issues/1) to help make this process as automated and easy as possible.\\n\\nAt this point the WebdriverIO team wants to thank Marcel Laverdet (`@laverdet` on [GitHub](https://github.com/laverdet)) for building Fibers and maintaining it for so many years. It is time to move on and embrace all the great JavaScript language feature many people have worked hard on. While we have updated the code examples in our docs, `@wdio/sync` will continue to be supported until we drop support for Node.js v14 and earlier which won\'t happen before April 2023. You will have enough time to slowly migrate your tests using `async/await`.\\n\\nIf you have any questions on this or the migration from a framework writing with synchronous commands to asynchronous code, feel free to drop us a line in our [discussion forum](https://github.com/webdriverio/webdriverio/discussions/new) or on [Gitter](https://gitter.im/webdriverio/webdriverio)."},{"id":"Case Study - How WebdriverIO facilitated faster releases and better code quality for an online video company","metadata":{"permalink":"/blog/2021/06/22/jwplayer-case-study","editUrl":"https://github.com/Abhi6722/hackers-hub/edit/main/website/blog/blog/2021-06-22-jwplayer-case-study.md","source":"@site/blog/2021-06-22-jwplayer-case-study.md","title":"Case Study - How WebdriverIO facilitated faster releases and better code quality for an online video company","description":"Choosing WebdriverIO","date":"2021-06-22T00:00:00.000Z","formattedDate":"June 22, 2021","tags":[],"readingTime":4.305,"truncated":false,"authors":[{"name":"Eric Saari","url":"https://www.linkedin.com/in/esaari/","imageURL":"https://avatars.githubusercontent.com/u/5210550?s=400&u=a7918ea7b425d621b2252f6e963b8657acdd1b0c&v=4"}],"prevItem":{"title":"Sync API Deprecation","permalink":"/blog/2021/07/28/sync-api-deprecation"},"nextItem":{"title":"WebdriverIO Opens an OpenCollective","permalink":"/blog/2021/03/31/open-collective"}},"content":"## Choosing WebdriverIO\\n\\n[JW Player](https://www.jwplayer.com) is an embeddable, online video player which generates over a billion unique views every day. In order to sustain and grow this scale, the player needs to be able to function on a multitude of different web and mobile platforms. This increases the importance of automated testing to improve confidence in our releases when deploying to so many different targets. After a lengthy project of converting our legacy test framework, which comprised over 6,000 tests, the Test Engineering team at JW Player has been able to deliver more timely releases with fewer regressions. We have experienced no major rollbacks, and increased the confidence we have in the quality of our own product, thanks to WebdriverIO.\\n\\nBefore our migration to WebdriverIO, we had been using an open sourced Ruby framework on top of Cucumber. JW Player is officially supported on seven desktop and mobile web browsers, as well as iOS and Android versions dating back to 10 and 4.4, respectively. For coverage of these platforms, we run approximately 25,000 UI acceptance tests on a nightly basis. The legacy implementation created two problems. First, we encountered performance limitations in Ruby, as a single test run across all platforms could take up to 9 hours. Second, as the Player is implemented in JavaScript, product engineers were less likely to embrace and contribute to the Ruby-based framework. Moving to a JavaScript-native framework addressed both of these problems.\\n\\nSelenium Webdriver has long been the go-to standard for web automation. Around 2018, our team began to explore several new emerging testing technologies. Cypress had limited browser support, Microsoft Playwright had not yet even been released, and Puppeteer would only execute on Chrome. A Webdriver-based solution, with its broad and dedicated support amongst browser vendors, was the clear winner.\\n\\nWhat initially attracted us to WebdriverIO was its straightforward API and complete support for all browsers and devices we needed to test, compared to Cypress and Puppeteer which lack support for one or more of the necessary platforms. More importantly, though, was its rich plugin system and active, engaged developer community. Sponsorship from Sauce Labs, which had already made a name for itself within the testing space, gave us confidence that WebdriverIO would continue to grow and not become abandonware.\\n\\nOut of the box, WebdriverIO had support for several of our existing and desired toolsets. Tools such as [Allure reporting](https://webdriver.io/docs/allure-reporter), which we use to quickly comb through product defects, as well as [Report Portal](https://webdriver.io/docs/wdio-reportportal-reporter), which we use to monitor test health and track trends over time, were easy for us to integrate. The granular [pre and post execution hooks](https://webdriver.io/docs/options/#hooks) gave the test engineers an unprecedented ability to shape how and where tests executed.\\n\\n## Webdriver.IO Practical Approach\\n\\nAs more features keep being added to WebdriverIO, we are continually able to simplify our codebase by removing open source dependencies and messy mixin code. We have even been able to decommission services that our old framework relied on altogether.\\n\\n- The [Network Primitives feature](https://webdriver.io/blog/2020/07/10/network-primitives), released last year, allowed us to remove our dependency on Browsermob Proxy, a proxy tool commonly used in Selenium Webdriver applications to intercept and manipulate HTTP requests. We now call `browser.mock()`, specify a substring or regex of the request we want to capture and supply a simple mock object to replace the asset. The ability to delay a response allowed us to automate several complicated tests which had required manual execution. We were then able to validate the player\u2019s behavior when particular requests, such as ads, are delayed due to network or other external conditions:\\n\\n    ```\\n    // mock.js\\n    export function delayResponse3seconds() {\\n        return new Promise((resolve) => setTimeout(() => {\\n            return resolve(\'{ \\"foo\\": bar }\');\\n        }, 3000));\\n    }\\n\\n    // test.js\\n    import { delayResponse3seconds } from \'./mock\';\\n\\n    function rewritePattern(pattern, replacement) {\\n       console.log(`Attempting to rewrite: ${pattern} with: ${replacement}`);\\n       const toRewrite = browser.mock(`**/${pattern}`);\\n       toRewrite.respond(delayResponse3seconds);\\n       console.log(`Successfully rewrote ${pattern} to ${replacement}`);\\n    }\\n    ```\\n- The [Chrome Devtools Protocol](https://webdriver.io/docs/api/chromium) support that comes out of the box has also enabled us to automate some tests that were a manual chore. Being able to call `browser.throttle(\u201cGood3G\u201d)` after our initial page load has allowed us to more accurately verify how the video player behaves under more real world conditions for our mobile users.\\n\\n- Thanks to [WebdriverIO\u2019s CDP mapping](https://webdriver.io/docs/devtools-service/#getmetrics), we have been able to create and maintain a suite of performance tests. Calling `browser.getMetrics()` after a page load and interacting with the player has enabled us to verify that once a player is set up and embedded onto a customer\u2019s website, it will not cause any undue Cumulative Layout Shifts for the end user, which create a disruptive page loading experience.\\n\\n## Summary\\n\\nOverall, JW Player\u2019s migration to WebdriverIO was nothing short of a huge success. Between the performance and \u201cquality of life\u201d improvements over our old framework, WebdriverIO\u2019s feature set has allowed us to automate a couple of hundred manual test cases. We\'ve been able to greatly cut down the length of our regression cycles from approximately 1 week to just a couple of days. Most importantly, however, these improvements have allowed us to find a record number of defects, leading to a better quality product and delivering more customer value."},{"id":"WebdriverIO Opens an OpenCollective","metadata":{"permalink":"/blog/2021/03/31/open-collective","editUrl":"https://github.com/Abhi6722/hackers-hub/edit/main/website/blog/blog/2021-03-31-open-collective.md","source":"@site/blog/2021-03-31-open-collective.md","title":"WebdriverIO Opens an OpenCollective","description":"Today the WebdriverIO team announced in their OpenJS Foundation Q&A session that the project opens an OpenCollective to allow users and companies to donate to the development of the project and support community members to run WebdriverIO workshops and other types of events. This allows everyone to be paid to work on features and bug fixes as well as help the community to pay for pizza or rental space when hosting WebdriverIO workshops or meetups.","date":"2021-03-31T00:00:00.000Z","formattedDate":"March 31, 2021","tags":[],"readingTime":4.85,"truncated":false,"authors":[{"name":"Christian Bromann","url":"http://twitter.com/bromann","imageURL":"https://s.gravatar.com/avatar/d98b16d7c93d15865f34a225dd4b1254?s=80"}],"prevItem":{"title":"Case Study - How WebdriverIO facilitated faster releases and better code quality for an online video company","permalink":"/blog/2021/06/22/jwplayer-case-study"},"nextItem":{"title":"Grouping Specs for Execution in a Single Instance","permalink":"/blog/2021/03/23/grouping-specs"}},"content":"Today the WebdriverIO team announced in their [OpenJS Foundation](https://openjsf.org/) Q&A session that the project opens an [OpenCollective](https://opencollective.com/webdriverio) to allow users and companies to donate to the development of the project and support community members to run WebdriverIO workshops and other types of events. This allows everyone to be paid to work on features and bug fixes as well as help the community to pay for pizza or rental space when hosting WebdriverIO workshops or meetups.\\n\\nIf your company uses WebdriverIO and benefits from it, please ask your manager or your marketing team to support the project by donating to the collective. Support will allow the maintainers to dedicate more time for maintenance and new features for everyone.\\n\\nAs part of this we also like to announce the official WebdriverIO Swag Store: [shop.webdriver.io](http://shop.webdriver.io), which will be used as an income source for the collective. All purchases from that store will directly go into our fund and to you. We start our collection with a T-shirt, a sweatshirt and a couple of accessories but will soon extend to more. So stay tuned!\\n\\nWe want to be transparent in the way we accept expenses to the collective. Everyone should be eligible to participate and send in expenses for development on certain features. We also want to give back to the community by allowing us to expense event expenses. The following expense types may be eligible to be reimbursed from the collective:\\n\\n#### Event Expenses\\n\\nIf you host an event that has a speaker talking about using WebdriverIO and it\'s features you can expense up to __$100__. Reimbursement requirements for event expenses include:\\n\\n- You or the event account must share the project on social media (Twitter, Facebook or LinkedIn) at least 3x\\n- The event page must have the WebdriverIO logo and a link to the project page in your meetup description\\n- You must use the funds for qualified event expenses such as food, beverage, room or equipment rental.\\n- You must submit receipts with your reimbursement request.\\n\\nOur goal with this expense policy is to help the community to run events, to promote the project and support anyone learning about WebdriverIO. We\'ve already seen project meetups happening in New York and The Netherlands and hope to see more of this in the future.\\n\\n#### Development Expenses\\n\\nIf you have done development work on any of the repositories within the GitHub WebdriverIO organisation you may reimburse up to __$1000__ if the following requirements are met:\\n\\n- You must have submitted qualifying pull requests that have closed at least 10 issues that were labeled with [`Expensable \ud83d\udcb8`](https://github.com/webdriverio/webdriverio/labels/Expensable%20%F0%9F%92%B8)\\n- Every additional issue closed with that label can be expensed with $100\\n- You must submit links to all issues you\u2019ve closed due to your pull requests\\n- In order to close the ticket automatically, you must have one commit message with the Fix keyword. For example, Fix #1234 to close ticket #1234.\\n- Pull Requests must be merged by someone from the [core team](https://github.com/webdriverio/webdriverio/blob/main/AUTHORS.md#tsc-technical-steering-committee). If there are several Pull Requests, the core team member either selects the most recent one or the best one - that\u2019s up to them to decide what is best for the project.\\n- You must claim an [`Expensable \ud83d\udcb8`](https://github.com/webdriverio/webdriverio/labels/Expensable%20%F0%9F%92%B8) issue by commenting to the issue thread to ensure that no one else is working on the same issue.\\n- Anyone contributing to WebdriverIO is eligible to expense their work if the implemented features or bug fixes are not objectives of a commercial job.\\n\\nPlease note that contributing on behalf of a company does not make you eligible to also get reimbursed by the collective. If a company pays you to work on WebdriverIO we see this already as a contribution to the project by the company.\\n\\nWe understand that $1000 for fixing 10 bugs or implementing 10 features may seem arbitrary because some work items will take longer than others. However by requiring someone to finish 10 work items we hope that this uncertainty of effort and time will balance out. We also understand that this will not reimburse someone by their market value and it certainly won\'t allow someone to work full time on WebdriverIO. The goal of the collective is to reimburse people that usually would contribute in their free time in a very transparent and open way.\\n\\n#### Travel Expenses\\n\\nIf you are a member of the [Technical Steering Committee team](https://github.com/webdriverio/webdriverio/blob/main/AUTHORS.md#tsc-technical-steering-committee) you are eligible to expense flights and hotel accommodations for travel to conferences or meetups as part of a speaking engagement on WebdriverIO, not paid by the event itself or a company. You may expense up to $500. Reimbursement requirements for travel expenses include:\\n\\n- You must send out a post from your main social media account (e.g. Twitter, LinkedIn or personal blog) thanking all contributors of the collective after the event took place.\\n- You must use the funds for qualified travel expenses such as ground or air transportation to the event and hotel accommodations.\\n- You must submit receipts with your reimbursement request.\\n\\nEven though currently there are no in-person events happening due to the COVID-19 pandemic, we hope that we come back to times where we can reconnect with the community on a personal level. For that we would like to support the core team with their travel expenses.\\n\\nOverall we hope that this expense policy is fair and inclusive enough that anyone can participate. Opening a collective might sound easy in the beginning but doesn\'t end up being a trivial effort when you consider transparency and fairness. We expect to make amendments to our policies once we gather more experience from the process.\\n\\nThank you to everyone who will donate money to the collective and therefore will support the project and everyone contributing to it. It really means a lot \u2764\ufe0f"},{"id":"Grouping Specs for Execution in a Single Instance","metadata":{"permalink":"/blog/2021/03/23/grouping-specs","editUrl":"https://github.com/Abhi6722/hackers-hub/edit/main/website/blog/blog/2021-03-23-grouping-specs.md","source":"@site/blog/2021-03-23-grouping-specs.md","title":"Grouping Specs for Execution in a Single Instance","description":"Until now, WebdriverIO has created a separate instance to run each of the spec files. So, if we have a directory structure that looks something like this:","date":"2021-03-23T00:00:00.000Z","formattedDate":"March 23, 2021","tags":[],"readingTime":2.36,"truncated":false,"authors":[{"name":"Ross Addinall","url":"http://twitter.com/rossaddinall","imageURL":"https://s.gravatar.com/avatar/340d9dcc2c732de725ea9d94bdfcfe82?s=80"}],"prevItem":{"title":"WebdriverIO Opens an OpenCollective","permalink":"/blog/2021/03/31/open-collective"},"nextItem":{"title":"WebdriverIO v7 Released","permalink":"/blog/2021/02/09/webdriverio-v7-released"}},"content":"Until now, WebdriverIO has created a separate instance to run each of the spec files. So, if we have a directory structure that looks something like this:\\n\\n```\\ntest\\n \u2514\u2500\u2500\u2500 specs\\n         \u2502  test_login.js\\n         \u2502  test_product_order.js\\n         \u2502  test_checkout.js\\n         \u2502  test_b1.js\\n         \u2502  test_b2.js\\n```\\nand the config file has specs defined as follows:\\n\\n```json\\n    \\"specs\\": [\\n        \'./test/specs/test*.js\'\\n    ],\\n```\\nthen when WebdriverIO is run, the specs definition will be expanded to create a list of all the test files, and a separate instance will be created to run each test (up to the value of \\"maxInstances\\").  Remaining tests will be queued until tests complete.  Consequently, each test is run in its own instance.\\n\\nThis model has many advantages.  It means that tests can be run in parallel and makes it easier to retry tests that fail etc.\\n\\nHowever, there are cases where this does not work so well.  In one case a users flow involved transpiling tens of thousands of Typescript files for each of the ~250 test files, resulting in a huge overhead in the speed of the testing.  In another case a remote device farm was provisioning a new device for each test with all the associated setup thereby impacting performance and cost.\\n\\nAt [Vertizan](https://www.vitaq.io) we are integrating our AI-driven and functional coverage-led Vitaq test automation tool with WebdriverIO and Mocha. For Vitaq AI to work, it needs to be able to select which test/action to run next and that requires having all of the tests available in a single instance.\\n\\nConsequently, we have worked with the WebdriverIO team to implement a syntax which allows the user to specify which tests should be grouped together for execution in the same instance.  All of the three test execution frameworks (Mocha, Jasmine, Cucumber) are supported by this approach, and by default they will run the tests sequentially.\\n\\nTo take advantage of this capability, the definition of the specs in the WDIO config file has been extended so that it can now accept arrays within the specs array. All of the files within an inner array are grouped together and run in the same instance.\\n\\nSo, the following specs definition:\\n\\n```json\\n    \\"specs\\": [\\n        [\\n            \\"./test/specs/test_login.js\\",\\n            \\"./test/specs/test_product_order.js\\",\\n            \\"./test/specs/test_checkout.js\\"\\n        ],\\n        \\"./test/specs/test_b*.js\\",\\n    ],\\n```\\nwhen run against the previously described directory tree would result in three instances:\\n- One instance would run the group of test_login.js, test_product_order.js and test_checkout.js\\n- Another instance would run test_b1.js\\n- A final instance would run test_b2.js\\n\\nIt is only the specs definition that supports this syntax.\\n\\n**EDIT:**\\nThis syntax has now been extended to support specs defined in suites, so you can now also define suites like this:\\n```json\\n    \\"suites\\": {\\n        end2end: [\\n            [\\n                \\"./test/specs/test_login.js\\",\\n                \\"./test/specs/test_product_order.js\\",\\n                \\"./test/specs/test_checkout.js\\"\\n            ]\\n        ],\\n        allb: [\\"./test/specs/test_b*.js\\"]\\n},\\n```\\nand in this case all of the tests of the \\"end2end\\" suite would be run in a single instance."},{"id":"WebdriverIO v7 Released","metadata":{"permalink":"/blog/2021/02/09/webdriverio-v7-released","editUrl":"https://github.com/Abhi6722/hackers-hub/edit/main/website/blog/blog/2021-02-09-webdriverio-v7-released.md","source":"@site/blog/2021-02-09-webdriverio-v7-released.md","title":"WebdriverIO v7 Released","description":"It\'s the time of the year where the WebdriverIO project is releasing a new major update. It\u2019s almost become a tradition for us to rewrite the complete code base to further grow the project. When we announced the v5 update, we moved from a multi-repository setup to a mono-repo. This time, the rewrite of the code base is just as important and impactful, but comes with almost no implications for the end user. As more and more contributors have joined the project, we\'ve noticed that using pure JavaScript can be helpful to keep the entry barrier for contributions low, but that it ultimately decreases the quality of contributions overall. With the growing size of the code in the project, keeping up with all the different types that were thrown around was becoming more difficult for us as core contributors. Since we already had a lot of TypeScript fans among us, we decided to move to TypeScript quickly after meeting at the OpenJS Collaborator Summit.","date":"2021-02-09T00:00:00.000Z","formattedDate":"February 9, 2021","tags":[],"readingTime":8.11,"truncated":false,"authors":[{"name":"Christian Bromann","url":"http://twitter.com/bromann","imageURL":"https://s.gravatar.com/avatar/d98b16d7c93d15865f34a225dd4b1254?s=80"}],"prevItem":{"title":"Grouping Specs for Execution in a Single Instance","permalink":"/blog/2021/03/23/grouping-specs"},"nextItem":{"title":"New Network Primitives (Beta)","permalink":"/blog/2020/07/10/network-primitives"}},"content":"It\'s the time of the year where the WebdriverIO project is releasing a new major update. It\u2019s almost become a tradition for us to rewrite the complete code base to further grow the project. When we [announced the v5](/blog/2018/12/19/webdriverio-v5-released) update, we moved from a multi-repository setup to a mono-repo. This time, the rewrite of the code base is just as important and impactful, but comes with almost no implications for the end user. As more and more contributors have joined the project, we\'ve noticed that using pure JavaScript can be helpful to keep the entry barrier for contributions low, but that it ultimately decreases the quality of contributions overall. With the growing size of the code in the project, keeping up with all the different types that were thrown around was becoming more difficult for us as core contributors. Since we already had a lot of TypeScript fans among us, we decided to move to TypeScript quickly after meeting at the [OpenJS Collaborator Summit](https://youtu.be/HqIstZSsCTA).\\n\\nOur hope is that by moving to TypeScript, fewer bugs will be introduced during continued development on the framework. It will help improve the quality of code contributions and the speed of development of certain features. It also brings more confidence in new versions that we ship to the user.\\n\\nThis major update will largely only impact TypeScript users as we have updated types in all places and changed the way we distribute them. As part of the rewrite, we upgraded to Cucumber v7, which also moved its codebase to TypeScript. Because of that we had to update some of the Cucumber hooks to ensure they come with proper type safety. In the following we go into every major change and will describe how you can upgrade to v7.\\n\\n## Drop Node v10 Support\\n\\nWe\'ve dropped support for Node v10, which was moved into a maintenance LTS phase by the Node.js team in May 2020. While this version still receives important security updates until April 2021, we recommend updating your Node.js version to v14 or higher.\\n\\nTo update Node.js, it is important to know how it was installed in the first place. If you are in a Docker environment, you can just upgrade the base image like:\\n\\n```git\\n- FROM mhart/alpine-node:10\\n+ FROM mhart/alpine-node:14\\n```\\n\\nWe recommend using [NVM](https://github.com/nvm-sh/nvm) (Node Version Manager) to install and manage Node.js versions. You can find a detailed description on how to install NVM and update Node in their [project readme](https://github.com/nvm-sh/nvm#installing-and-updating).\\n\\n## TypeScript Rewrite\\n\\nWe have rewritten the complete code base and almost touched all files to add type safety and to fix a lot of bugs on the way. This was a true community effort and would have taken much longer if we didn\u2019t have so many people helping with code contributions. Thank you all for that \u2764\ufe0f! Before, WebdriverIO auto-generated all type definitions, which caused the creation of a lot of duplicate types and inconsistency. With this overhaul, all types are directly taken from the code itself and centralized in a single new helper package called [`@wdio/types`](https://github.com/webdriverio/webdriverio/tree/main/packages/wdio-types). If you have been using TypeScript, you will now have much better type support for various commands and the configuration file.\\n\\nThere are two significant changes how this TypeScript rewrite will impact you. While in v6 you would set `@wdio/sync` in your types of your `tsconfig.json`, this will now change to be `webdriverio/sync`. Similar for running WebdriverIO asynchronously. Instead of just defining `webdriverio` in your types you now need to set `webdriverio/async`:\\n\\n```git\\n// tsconfig.json\\n\\"types\\": [\\n  \\"node\\",\\n-  \\"@wdio/sync\\",\\n+  \\"webdriverio/sync\\",\\n  \\"@wdio/mocha-framework\\"\\n],\\n```\\n\\nor\\n\\n```git\\n// tsconfig.json\\n\\"types\\": [\\n  \\"node\\",\\n-  \\"webdriverio\\",\\n+  \\"webdriverio/async\\",\\n  \\"@wdio/mocha-framework\\"\\n],\\n```\\n\\nLastly, if you define custom commands, you need to provide their types slightly different now, if using module-style type definition files (type definition file uses import/export; tsconfig.json contains `include` section):\\n\\n```ts\\n// define custom commands in v6\\ndeclare namespace WebdriverIO {\\n    // adding command to `browser`\\n    interface Browser {\\n        browserCustomCommand: (arg: number) => void\\n    }\\n}\\n```\\nthis now has to be:\\n```ts\\ndeclare global {\\n    namespace WebdriverIO {\\n        interface Browser {\\n            browserCustomCommand: (arg: number) => void\\n        }\\n    }\\n}\\n```\\nOtherwise, if using ambient type definition files (no include section in tsconfig, no import/export in type definition file), then keep the custom command declaration the same as before, since including the `global` declaration as above will require the type definition file to be changed to a module.\\n\\nAlongside with this change we also equipped the testrunner to auto-compile your configuration if TypeScript is detected, this allows to leverage type safety in your WDIO configuration without any additional setup (big thanks for this contribution goes to [@r4j4h](https://github.com/r4j4h)). With that you also don\'t need `ts-node/register` to be required in your Mocha, Jasmine or Cucumber options, e.g.:\\n\\n```suggestion\\njasmineOpts: {\\n    - requires: [\'ts-node/register\', \'tsconfig-paths/register\'],\\n    + requires: [\'tsconfig-paths/register\'],\\n},\\n```\\n\\nYou can read more about WebdriverIO TypeScript integration in our [docs](/docs/typescript).\\n\\n## Cucumber v7 Update\\n\\nThe folks working on Cucumber have done a tremendous job moving their code base to TypeScript, which has made our lives tremendously easier. The new Cucumber integration required us to update the parameters within our [Cucumber hooks](/docs/options#beforefeature).\\n\\nIf you have been using Cucumber, all you need to do to update to v7 is to update your Cucumber imports to their new package:\\n\\n```git\\n- const { Given, When, Then } = require(\'cucumber\')\\n+ const { Given, When, Then } = require(\'@cucumber/cucumber\')\\n```\\n\\n## Improved Google Lighthouse Integration\\n\\nSince v6 WebdriverIO can run on the [WebDriver protocol](https://w3c.github.io/webdriver/) for true cross browser automation, but also automate specific browsers using browser APIs such as [Chrome DevTools](https://chromedevtools.github.io/devtools-protocol/). This allows for interesting integrations into tools that allow broader testing capabilities such as [Google Lighthouse](https://developers.google.com/web/tools/lighthouse). With the `@wdio/devtools-service`, WebdriverIO users were able to access these capabilities using Google Lighthouse to run [performance tests](https://www.youtube.com/watch?v=Al7zlLdd_es). In this release, we\u2019ve also updated Google Lighthouse to the latest version to enable new performance metrics such as [Cumulative Layout Shifts](https://web.dev/cls/) or [First Input Delay](https://web.dev/fid/).\\n\\nWhile in v6 performance tests were automatically run on a mobile environment, we have decided to change this and make the default behavior more obvious. Therefore, if you run performance tests in v7, there aren\'t any changes to the environment where you run your tests. We still recommend emulating a mobile device to more accurately capture the user experience of users most impacted by bad application performance. To do so, you can run the following commands:\\n\\n```js\\nbrowser.emulateDevice(\'iPhone X\')\\nbrowser.enablePerformanceAudits({\\n    networkThrottling: \'Regular 3G\',\\n    cpuThrottling: 4,\\n    cacheEnabled: false,\\n    formFactor: \'mobile\'\\n})\\n```\\n\\nThe `formFactor` property has been added with the update to Google Lighthouse v7, which determines how performance metrics are scored and if mobile-only audits are skipped.\\n\\n### New PWA Check Command\\n\\nIn addition,  we have deepened our integration to the tool and added audits for capturing the quality of your [progressive web apps](https://web.dev/progressive-web-apps/) (PWA). These applications are built with modern web APIs to deliver enhanced capabilities, reliability, and installability while reaching anyone, anywhere, on any device with a single codebase. To test if your application fulfills the PWA requirements we have introduced a `checkPWA` command that runs a variety of audits, validating the set up of your app:\\n\\n```js\\nconst result = browser.checkPWA()\\nexpect(result.passed).toBe(true)\\n```\\n\\nWe will continue to add more integrations into tools like Google Lighthouse to provide more testing capabilities, e.g. accessibility, best practices and SEO.\\n\\n## Auto Compiling\\n\\nIn v7 of WebdriverIO we made using compiler tools like Babel or TypeScript a lot easier. The testrunner can now automatically compile the config if it finds the necessary packages in your modules. Usually these had to be defined in your framework options like so:\\n\\n```js\\n    mochaOpts: {\\n        ui: \'bdd\',\\n        require: [\'@babel/register\'],\\n        // ...\\n    },\\n```\\n\\nThese settings need to be removed now as WebdriverIO automatically includes them. Read more about how to set up [Babel](/docs/babel) or [TypeScript](/docs/typescript) in our docs.\\n\\n## Stricter Protocol Compliance\\n\\nThe WebDriver protocol has been upgraded to a W3C recommended standard since 2018. A lot of cloud vendors and tools have been able to update their implementation making all artifacts of the JSONWireProtocol obsolete. The WebdriverIO projects wants to support this transition by adding additional checks to its capability configuration to ensure users don\'t accidentally send a mixture of both protocols resulting in an unexpected behavior. With the new version your session request will automatically fail if you send incompatible capabilities along, e.g.:\\n\\n```js\\ncapabilities: {\\n    browserName: \'Chrome\',\\n    platform: \'Windows 10\', // invalid JSONWire Protocol capability\\n    \'goog:chromeOptions\': { ... }\\n}\\n```\\n\\n## Test Coverage Reporting\\n\\nThe [`@wdio/devtools-service`](https://www.npmjs.com/package/@wdio/devtools-service) now offers to capture the code coverage of your JavaScript application files. This can help you to identify whether you should write more e2e tests or not. To enable the feature you have to enable it by setting the coverageReporter option for the service:\\n\\n```js\\n// wdio.conf.js\\nservices: [\\n    [\'devtools\' {\\n        coverageReporter: {\\n            enable: true,\\n            type: \'html\',\\n            logDir: __dirname + \'/coverage\'\\n        }\\n    }]\\n]\\n```\\n\\nYou can also assert the code coverage within your tests using the new `getCoverageReport` command, e.g.:\\n\\n```js\\nconst coverage = browser.getCoverageReport()\\nexpect(coverage.lines.total).toBeAbove(0.9)\\nexpect(coverage.statements.total).toBeAbove(0.9)\\nexpect(coverage.functions.total).toBeAbove(0.9)\\nexpect(coverage.branches.total).toBeAbove(0.9)\\n```\\n\\n## New Docs\\n\\nAs you might already have seen, we have updated our [docs](https://webdriver.io) to give this new release a brand new face. We\'ve upgraded our Docusaurus setup to v2 and gave the whole design a new touch. Big shout out to [Anton Meier](https://www.linkedin.com/in/antoschka-kartoschka) for helping us out and making our robot on the front page so lively.\\n\\nThat\'s it! We hope you enjoy the new version and update your framework soon-ish to get all these new features, type safety and bug fixes for your projects. If you have any questions don\'t hesitate to start a conversation on the [discussions page](https://github.com/webdriverio/webdriverio/discussions) or join our growing [support chat](https://gitter.im/webdriverio/webdriverio) that has already reached 6.7k active members."},{"id":"New Network Primitives (Beta)","metadata":{"permalink":"/blog/2020/07/10/network-primitives","editUrl":"https://github.com/Abhi6722/hackers-hub/edit/main/website/blog/blog/2020-07-10-network-primitives.md","source":"@site/blog/2020-07-10-network-primitives.md","title":"New Network Primitives (Beta)","description":"The WebdriverIO team continues its efforts to provide more functionality to its automation interface by shipping new network primitives to its API. With the latest v6.3. update you can now easily mock web resources in your test and define custom responses that allow you to drastically reduce testing time as you can now better test individual scenarios. With that WebdriverIO catches up with other popular testing tools like Puppeteer, Playwright or Cypress and even simplifies mocking further.","date":"2020-07-10T00:00:00.000Z","formattedDate":"July 10, 2020","tags":[],"readingTime":2.645,"truncated":false,"authors":[{"name":"Christian Bromann","url":"http://twitter.com/bromann","imageURL":"https://s.gravatar.com/avatar/d98b16d7c93d15865f34a225dd4b1254?s=80"}],"prevItem":{"title":"WebdriverIO v7 Released","permalink":"/blog/2021/02/09/webdriverio-v7-released"},"nextItem":{"title":"WebdriverIO Open Office Hours","permalink":"/blog/2020/07/01/office-hours"}},"content":"The WebdriverIO team continues its efforts to provide more functionality to its automation interface by shipping new network primitives to its API. With the latest `v6.3`. update you can now easily mock web resources in your test and define custom responses that allow you to drastically reduce testing time as you can now better test individual scenarios. With that WebdriverIO catches up with other popular testing tools like [Puppeteer](https://pptr.dev/), [Playwright](https://playwright.dev/) or [Cypress](https://www.cypress.io/) and even simplifies mocking further.\\n\\nReplacing a REST API request from a browser can now be as simple as follows:\\n\\n```js\\nconst mock = browser.mock(\'https://todo-backend-express-knex.herokuapp.com/\')\\n\\nmock.respond([{\\n    title: \'Injected (non) completed Todo\',\\n    order: null,\\n    completed: false\\n}, {\\n    title: \'Injected completed Todo\',\\n    order: null,\\n    completed: true\\n}])\\n\\nbrowser.url(\'https://todobackend.com/client/index.html?https://todo-backend-express-knex.herokuapp.com/\')\\n\\n$(\'#todo-list li\').waitForExist()\\nconsole.log($$(\'#todo-list li\').map(el => el.getText()))\\n// outputs: \\"[ \'Injected (non) completed Todo\', \'Injected completed Todo\' ]\\"\\n```\\n\\nIn addition to that you can als modify JavaScript of CSS files as well as abort requests or modify responses dynamically based on the original response. You can find more information on all features in the [Mocks and Spies](/docs/mocksandspies) section of the docs.\\n\\n## Throttling\\n\\nAside mocking the new version also ships with another network command that allows to modify the network throughput of the browser allowing to test under different network condition, e.g. Regular 3G or even Offline mode:\\n\\n```js\\n// throttle to Regular 3G\\nbrowser.throttle(\'Regular 3G\')\\n// disable network completely\\nbrowser.throttle(\'Offline\')\\n// set custom network throughput\\nbrowser.throttle({\\n    \'offline\': false,\\n    \'downloadThroughput\': 200 * 1024 / 8,\\n    \'uploadThroughput\': 200 * 1024 / 8,\\n    \'latency\': 20\\n})\\n```\\n\\nThis can open up interesting use case where you want to ensure that your progressive web app (PWA) stores all essential resources for offline users to use the application.\\n\\n## Support\\n\\nThis feature uses Chrome DevTools capabilities to enable such behavior. Therefore it can only be supported where such an interface is available which is __Chrome__, __Firefox Nightly__ and __Chromium Edge__ right now. The Firefox team at Mozilla is working hard to ship this into the stable build of Firefox, therefore support for it can be expected soon.\\n\\nOn top of that the folks at [Sauce Labs](https://saucelabs.com/) working on various of WebDriver extensions that even allow this functionality to be support in the cloud. More updates on this will follow soon.\\n\\n## Implementation\\n\\nWith this feature WebdriverIO now always incorporates [Puppeteer](https://pptr.dev/) as second automation driver allowing these extra features whenever possible. Moving forward the team is looking into more opportunities to enable Chrome DevTools features into the built in API.\\n\\nPlease let us know what you think! We are expecting some bugs here and there but will make sure to fix them immediately. While we are pretty confident with the current interface design it might be still possible that some tweaks will be applied to make it even more user friendly.\\n\\n## Give us feedback!\\n\\nWe are releasing this as `beta` feature and hope that you can help us identify weaknesses in the implementation and support. Please give it a try and create an issue if things are unclear or just don\'t work. We hope with the help of the community and you we are able to ship this as stable within the next months!"},{"id":"WebdriverIO Open Office Hours","metadata":{"permalink":"/blog/2020/07/01/office-hours","editUrl":"https://github.com/Abhi6722/hackers-hub/edit/main/website/blog/blog/2020-07-01-office-hours.md","source":"@site/blog/2020-07-01-office-hours.md","title":"WebdriverIO Open Office Hours","description":"Contributing to a big Open Source project can be hard. Especially if the codebase is large and requires a lot of context to understand what certain changes do. Then there is the possibility that tools or infrastructure is being used that are unknown. Nevertheless the project depends on your contributions and help to identify bugs and fix them. How can we overcome this hurdle?","date":"2020-07-01T00:00:00.000Z","formattedDate":"July 1, 2020","tags":[],"readingTime":1.545,"truncated":false,"authors":[{"name":"Christian Bromann","url":"http://twitter.com/bromann","imageURL":"https://s.gravatar.com/avatar/d98b16d7c93d15865f34a225dd4b1254?s=80"}],"prevItem":{"title":"New Network Primitives (Beta)","permalink":"/blog/2020/07/10/network-primitives"},"nextItem":{"title":"WebdriverIO v6 Released","permalink":"/blog/2020/03/26/webdriverio-v6-released"}},"content":"Contributing to a big Open Source project can be hard. Especially if the codebase is large and requires a lot of context to understand what certain changes do. Then there is the possibility that tools or infrastructure is being used that are unknown. Nevertheless the project depends on your contributions and help to identify bugs and fix them. How can we overcome this hurdle?\\n\\nAt last weeks [OpenJS Foundation](https://openjsf.org/) [Collaborator Summit](https://openjscs2020.sched.com/) the WebdriverIO team announced to introduce Open Office Hours that allow everyone to schedule individual 1:1 pairing sessions with the WebdriverIO contributors. This allows you to get started contributing to WebdriverIO easily with the help of people that know the code base well. We only ask you to pick [a task](https://github.com/webdriverio/webdriverio/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3Afirst-timers-only) you would like to work on up-front so that the pairing partner can be prepared for the session to provide better guidance. This is a free opportunity for you to not only give back to the WebdriverIO community but also get to know the team behind the project.\\n\\nCurrently we offer 4 slots a week from: every Wednesday 10am - 12am (CEST / GMT+2) for our European friends as well as: 11am - 13am (PDT / GMT -7) for people living on the west side of this hemisphere. You can book an appointment at any time on:\\n\\n[calendly.com/webdriverio/open-office-hours](https://calendly.com/webdriverio/open-office-hours)\\n\\nAll sessions will be held over [Zoom](https://zoom.us/) or [Google Hangouts](https://hangouts.google.com/) but alternative platforms are possible, please let us know in the comment section. Also please note that this is not a way to get individual consulting for your own projects. The time is to be used to work on WebdriverIO related bugs or features. For support questions we still ask you to use our [Gitter Support Channel](https://gitter.im/webdriverio/webdriverio).\\n\\nWe are looking forward to meet you all online and hope to find more collaborators helping us to push the project forward!"},{"id":"WebdriverIO v6 Released","metadata":{"permalink":"/blog/2020/03/26/webdriverio-v6-released","editUrl":"https://github.com/Abhi6722/hackers-hub/edit/main/website/blog/blog/2020-03-26-webdriverio-v6-released.md","source":"@site/blog/2020-03-26-webdriverio-v6-released.md","title":"WebdriverIO v6 Released","description":"If you read this and are already about to freak out because you just spent a lot of time migrating to v5, don\'t worry! This major update is far less \\"breaking\\" than the one last year. While all the architectural changes last year left us no choice to break a lot of things, we were very careful this time and made sure that upgrading the framework won\'t become a big task.","date":"2020-03-26T00:00:00.000Z","formattedDate":"March 26, 2020","tags":[],"readingTime":10.705,"truncated":false,"authors":[{"name":"Christian Bromann","url":"http://twitter.com/bromann","imageURL":"https://s.gravatar.com/avatar/d98b16d7c93d15865f34a225dd4b1254?s=80"}],"prevItem":{"title":"WebdriverIO Open Office Hours","permalink":"/blog/2020/07/01/office-hours"},"nextItem":{"title":"WireMock as a Service","permalink":"/blog/2019/12/05/wiremock"}},"content":"If you read this and are already about to freak out because you just spent a lot of time migrating to v5, don\'t worry! This major update is far less \\"breaking\\" than the one last year. While all the architectural changes last year left us no choice to break a lot of things, we were very careful this time and made sure that upgrading the framework won\'t become a big task.\\n\\nThis major update is much more reasonable and contains subtle changes that will help the project further grow while remaining performant at the same time. This blog post will go into details about all major changes and will explain what you need to do to transition from v5 to the v6.\\n\\n## Drop Node v8 Support\\n\\nWe\'ve dropped support for Node v8, which was deprecated by the Node.js team at the start of 2020. It is not recommended to run any systems using that version anymore. We strongly advise to switch to Node v12 which will be supported until April 2022.\\n\\n### How to Update?\\n\\nTo update Node.js, it is important to know how it was installed in the first place. If you are in a Docker environment, you can just upgrade the base image like:\\n\\n```git\\n- FROM mhart/alpine-node:8\\n+ FROM mhart/alpine-node:12\\n```\\n\\nWe recommend using [NVM](https://github.com/nvm-sh/nvm) (Node Version Manager) to install and manage Node.js versions. You can find a detailed description on how to install NVM and update Node in their [project readme](https://github.com/nvm-sh/nvm#installing-and-updating).\\n\\n## `devtools` Automation Protocol is now Default\\n\\nBecause of the great success of automation tools like [Puppeteer](https://pptr.dev/) and [Cypress.io](https://www.cypress.io/) it became obvious that the [WebDriver](https://w3c.github.io/webdriver/) protocol in its current shape and form doesn\'t meet the requirements of todays developer and automation engineers. Members of the WebdriverIO project are part of the [W3C Working Group](https://www.w3.org/testing/browser/) that defines the WebDriver specification and they work together with browser vendors on solutions to improve the current state of the art. Thanks to folks from Microsoft there already proposals about a new [bidirectional connection](https://github.com/MicrosoftEdge/MSEdgeExplainers/tree/master/WebDriverRPC) similar to other automation protocols like [Chrome Devtools](https://chromedevtools.github.io/devtools-protocol/).\\n\\nUntil we have reached consensus between all browser vendors on the new WebDriver architecture, the project wants to offer alternative solutions. This is why we\'ve started to support Puppeteer natively using the same APIs. We already announced support for it [last year](https://webdriver.io/blog/2019/09/16/devtools.html) and have now fully embed it into the project. This means that to run a local test script you won\'t need to download a browser driver anymore. WebdriverIO checks if a browser driver is running and accessible at `localhost:4444/` and uses Puppeteer as fallback if not. If you use the WebdriverIO API the experience using WebDriver vs Puppeteer should be the same, running commands on Puppeteer might even be a little faster.\\n\\n> __Note:__ using Puppeteer instead of WebDriver is only supported if running tests locally and if the browser is located on the same machine as the tests.\\n\\nBeing able to access Puppeteer in your tests allows you to leverage the capabilities of the Chrome DevTools protocol which has a much richer set of automation features. In your tests you are free to switch between Puppeteer and WebdriverIO API as you wish, e.g.:\\n\\n```js\\ndescribe(\'my e2e tests\', () => {\\n    // ...\\n\\n    it(\'replaces the WebdriverIO logo with the Puppeteer logo\', () => {\\n        browser.url(\'https://webdriver.io\')\\n\\n        /**\\n         * run Puppeteer code with promises to intercept network requests\\n         * and replace the WebdriverIO logo in the docs with the Puppeteer logo\\n         */\\n        const wdioLogo = \'webdriverio.png\'\\n        const pptrLogo = \'https://user-images.githubusercontent.com/10379601/29446482-04f7036a-841f-11e7-9872-91d1fc2ea683.png\'\\n        browser.call(async () => {\\n            const puppeteerBrowser = browser.getPuppeteer()\\n            const page = (await puppeteerBrowser.pages())[0]\\n            await page.setRequestInterception(true)\\n            page.on(\'request\', (interceptedRequest) => (\\n                interceptedRequest.url().endsWith(wdioLogo)\\n                    ? interceptedRequest.continue({ url: pptrLogo })\\n                    : interceptedRequest.continue()\\n            ))\\n        })\\n\\n        // continue with sync WebdriverIO commands\\n        browser.refresh()\\n        browser.pause(2000)\\n    })\\n\\n})\\n```\\n\\nWe have integrated Puppeteer so you can run \\"cross-browser\\" tests on Chrome, Firefox (Nightly) and Chromium Edge. Note that the term cross-browser is used with quotation marks here. A lot of automation tools today advertise their cross-browser support while not being really honest about what it actually means. All Chromium based browser like Google Chrome, Chromium Edge or Electron based apps use the identical engine under the hood. It is questionable that there is much value testing on multiple Chromium based browser. In addition to that the support for Firefox is and will be experimental as it was implemented in an ad-hoc effort by a team at Mozilla which hasn\'t committed to bring it out of its experimental state and continue support for it.\\n\\nWe have not planned to integrate [Playwright](https://github.com/microsoft/playwright) as we can not afford to download their custom build browsers every time someone installs WebdriverIO. We will observe its development and might consider an integration at some point.\\n\\nThe WebdriverIO team wants to emphasize that it continues to be invested in WebDriver as an automation standard which is till today the only true cross-browser automation protocol. We will always prefer a standards based solution that has been developed by a diverse group of people representing the industry at large.\\n\\n### How to Update?\\n\\nIf you are running your tests on WebDriver already, nothing needs to be changed. WebdriverIO will only fallback to Puppeteer if it can\'t find a browser driver running.\\n\\n## Performance Improvements\\n\\nA big goal with the new release was to make WebdriverIO more performant and faster. Running tests on Puppeteer can already speed up your local execution. But we also looked into other areas to improve. With v6 we replaced our heavy dependency to [`request`](https://github.com/request/request) which has been fully deprecated as off February 11th 2020. With that we were able to reduce the bundle size of the `webdriver` and `webdriverio` package by 4x:\\n\\n![bundle size comparison](./assets/bundlesize.png)\\n\\nBy using [`got`](https://github.com/sindresorhus/got) as new dependency to make requests in WebDriver we are now technically also able to run WebdriverIO in the browser which creates interesting possibilities and was a requirement for our [roadmap item](https://github.com/webdriverio/webdriverio/blob/main/ROADMAP.md#upcoming-projects-in-no-particular-order) to build a fiddle platform for WebdriverIO scripts.\\n\\nThe new version v6 will also come with a lot of internal improvements that will speed up test execution and lower CPU and memory usage. Especially when it comes to fetching elements we were able to reduce a lot of overhead and speed things up:\\n\\n![improved flamechart](./assets/flamechart.jpg)\\n\\n### How to Update?\\n\\nThese improvements come for free and you don\'t need to do anything to better performance in v6 when upgrading.\\n\\n## Service Configurations\\n\\nWe are very proud about the amount of different [services](https://www.npmjs.com/search?q=wdio-service) and [reporters](https://www.npmjs.com/search?q=wdio-reporter) that the community built. All these additional plugins require specific configurations in your `wdio.conf.js` and we want to make sure that all these settings are being made standardized structure. Until v5 of WebdriverIO specific options to services and reporters could be defined anywhere in the `wdio.conf.js`, e.g. the Sauce service:\\n\\n```js\\n// wdio.conf.js\\nexport.config = {\\n  // ...\\n  services: [\'sauce\'],\\n  user: process.env.SAUCE_USERNAME,\\n  key: process.env.SAUCE_ACCESS_KEY,\\n  region: \'us\',\\n  sauceConnect: true,\\n  // ...\\n};\\n```\\n\\nWith v6 we moved all configurations into the services list close to where the service is actually defined. This will help to maintain a clear structure in the config file while at the same time keep the set of different \\"native\\" supported configurations clear. In v6 the example above needs to be modified as to become this:\\n\\n```js\\n// wdio.conf.js\\nexport.config = {\\n    // ...\\n    user: process.env.SAUCE_USERNAME,\\n    key: process.env.SAUCE_ACCESS_KEY,\\n    region: \'us\', // WebdriverIO Configuration\\n    services: [\\n        [\'sauce\', {\\n            sauceConnect: true, // @wdio/sauce-service configuration\\n            sauceConnectOpts: { // @wdio/sauce-service configuration\\n                // ...\\n            }\\n        }]\\n    ],\\n    // ...\\n};\\n```\\n\\nAs part of this effort we also looked into the service option names and renamed to be more short and precise.\\n\\n### How to Update?\\n\\nWalk through your WDIO configuration files and look for configurations that are not specifically defined by as WebDriver or WDIO [options](https://webdriver.io/docs/options.html). These needs to be moved into the service list according to the example above. In addition to that have a look if option names have changed and update them accordingly.\\n\\n## Command Interface Changes\\n\\nIn the past we have been adding a lot of additional functionality into single commands like click to serve different purposes. This new functionality could be used by applying parameters to the command. Unfortunately the amount of such parameters has grown and caused a lot of confusion and made some commands not readable anymore. If you ever had to use `$(\'#elem\').waitForExist(null, null true)` to wait until an element does __not__ exist anymore you will know how bad things have become.\\n\\nWith v6 we have changed the structure of a couple of commands to allow named parameters instead. With that the code becomes much more readable and allows better type enforcement when using TypeScript. The above example looks in v6 as follows:\\n\\n```js\\n$(\'#elem\').waitForExist({ reverse: true })\\n```\\n\\n### How to Update?\\n\\nWe have changed the structure of the following commands:\\n\\n- affected `browser` methods:\\n    - [newWindow](https://webdriver.io/docs/api/browser/newWindow.html)\\n    - [react$](https://webdriver.io/docs/api/browser/react$.html)\\n    - [react$$](https://webdriver.io/docs/api/browser/react$$.html)\\n    - [waitUntil](https://webdriver.io/docs/api/browser/waitUntil.html)\\n\\n- affected element methods:\\n    - [dragAndDrop](https://webdriver.io/docs/api/element/dragAndDrop.html)\\n    - [moveTo](https://webdriver.io/docs/api/element/moveTo.html)\\n    - [react$](https://webdriver.io/docs/api/element/react$.html)\\n    - [react$$](https://webdriver.io/docs/api/element/react$$.html)\\n    - [scrollIntoView](https://webdriver.io/docs/api/element/scrollIntoView.html)\\n    - [waitForClickable](https://webdriver.io/docs/api/element/waitForClickable.html)\\n    - [waitForDisplayed](https://webdriver.io/docs/api/element/waitForDisplayed.html)\\n    - [waitForEnabled](https://webdriver.io/docs/api/element/waitForEnabled.html)\\n    - [waitForExist](https://webdriver.io/docs/api/element/waitForExist.html)\\n    - [waitUntil](https://webdriver.io/docs/api/element/waitUntil.html)\\n\\nIf you use TypeScript in your project it should automatically tell you to all places that needs to be updated. If you don\'t use TypeScript which recommend to just search for every command in your code base and modify it accordingly. It should be a pretty mechanical and straightforward task.\\n\\n## New Assertion Library\\n\\nWith the update to v6 you will now automatically get access to our new native embedded assertion library [`expect-webdriverio`](https://www.npmjs.com/package/expect-webdriverio). It is a special designed assertion library for WebdriverIO that was inspired by Jests [`expect`](https://www.npmjs.com/package/expect) package. It comes with key features like:\\n\\n- waits for expectation to succeed\\n- detailed error messages\\n- support for Mocha, Cucumber, Jest and Jasmine\\n- builtin types for TypeScript and JS autocompletion\\n\\nThis will not only simplify the setup of your WebdriverIO framework but also gets you better error messages if an assertion fails, e.g. when checking the visibility of an element like:\\n\\n```js\\nconst elem = $(\'#someElem\')\\nexpect(elem).toHaveText(\'Click #2\')\\n```\\n\\nIt will fail with an error message like:\\n\\n![Error Message](https://raw.githubusercontent.com/mgrybyk/expect-webdriverio/HEAD/docs/img/errors/text.png?raw=true)\\n\\n### How to Update?\\n\\nIf you already use an assertion library like [Chai](https://www.chaijs.com/) you can continue doing, especially if you are not interested using `expect-webdriverio`. However you can also start writing new assertions with the new assertion API and maintain two different types of assertion libraries until you decide to get rid of the other.\\n\\n## Other Changes\\n\\nNext to all major updates that were described above there are also some minor changes that are worth mentioning:\\n\\n- __TypeScript Support:__ we improved the typings for WebdriverIO and WebDriver to include better descriptions and more detail\\n- __WebDriver Default Path:__ we changed default WebDriver path from `/wd/hub` to `/` as most of the browser drivers now default to this, this should have no effect for you - however if you have trouble connecting to a WebDriver endpoint after the upgrade, this could be a reason for that issue.\\n  > __Note for Appium users:__ If you are using a local or global install of Appium and you start Appium through the command line, you should also provide the cli argument `--base-path /`. This will prevent Appium not finding a matching local emulator/simulator/real device and start using the default `path: \'/\'` that WebdriverIO uses.\\\\\\nIf you are using the `@wdio/appium-service` you don\'t need to do anything.\\n- __Command Renaming:__ we renamed command `launchApp` to `launchChromeApp` for Chrome WebDriver sessions\\n- __Spec Filtering:__ the [Spec Filtering](https://webdriver.io/blog/2019/11/01/spec-filtering.html) feature is now enabled by default so that browser sessions aren\'t started if the framework can\'t find a test to run in the file (this can not be disabled anymore)\\n- __New Hook:__ we added a new hook to the testrunner called `onWorkerStart` which will be executed right before we launch the worker process\\n- __Modified Hook Signature:__ we modified the signature of our before/after test/hook hooks to allow you to access the frameworks native event objects - please have a look into the config file [documentation](/docs/configurationfile) and update your hooks accordingly\\n- __Cucumber Update:__ we have updated the `@wdio/cucumber-framework` adapter to use v6 of Cucumber\\n- __Overwrite Capabilities:__ By default the launcher will overwrite the capabilities instead of merging them when using the launcher\\n\\n## LTS Support\\n\\nWith the release of v6 we will continue to support v5 until we decide to release a new major version v7. We created a [backporting process](https://github.com/webdriverio/webdriverio/blob/main/CONTRIBUTING.md#back-porting-bug-fixes) that allows us to seamlessly backport bug fixes and features from v6 to v5. Please note that as the code between both versions diverge we won\'t be able to backport every feature and bug fix. We might ask code contributors to provide a similar PR that has been made to the `master` branch also to the `v5` branch.\\n\\nThat said, we generally recommend to update to the latest version as soon as possible to make sure that you leverage bug fixes that have been made to the project."},{"id":"WireMock as a Service","metadata":{"permalink":"/blog/2019/12/05/wiremock","editUrl":"https://github.com/Abhi6722/hackers-hub/edit/main/website/blog/blog/2019-12-05-wiremock.md","source":"@site/blog/2019-12-05-wiremock.md","title":"WireMock as a Service","description":"We are pleased to announce that we now have a new mocking service for WebdriverIO called wdio-wiremock-service.","date":"2019-12-05T00:00:00.000Z","formattedDate":"December 5, 2019","tags":[],"readingTime":1.97,"truncated":false,"authors":[{"name":"Erwin Heitzman","url":"http://github.com/erwinheitzman","imageURL":"https://avatars1.githubusercontent.com/u/15839059?s=80&v=4"}],"prevItem":{"title":"WebdriverIO v6 Released","permalink":"/blog/2020/03/26/webdriverio-v6-released"},"nextItem":{"title":"Avoid starting session for excluded specs","permalink":"/blog/2019/11/01/spec-filtering"}},"content":"We are pleased to announce that we now have a new mocking service for WebdriverIO called `wdio-wiremock-service`.\\n\\n## What can it do?\\n\\nThis service helps you to run WireMock seamlessly when running tests with [WebdriverIO](https://webdriver.io). It uses the well known [Maven](https://mvnrepository.com/repos/central) repository to download the WireMock jar for you which is then automatically installed, started and stopped. Stay up to date by joining the community over at [Gitter](https://gitter.im/erwinheitzman/wdio-wiremock-service) for help and support.\\n\\nA few things you can do with this service:\\n\\n- Automatically run [WireMock](http://wiremock.org/) alongside the WebdriverIO testrunner\\n- Supports usage of mock and fixture files\\n- Match request URLs, methods, headers cookies and bodies using a wide variety of strategies. First class support for JSON and XML.\\n- Configure WireMock with all the available [options](https://github.com/erwinheitzman/wdio-wiremock-service/blob/master/README.md#options)\\n\\n## Installation\\n\\n```sh\\nnpm install wdio-wiremock-service --save-dev\\n```\\n\\nInstructions on how to install `WebdriverIO` can be found [here.](https://webdriver.io/docs/gettingstarted.html)\\n\\n## Configuration\\n\\nIn order to use the service you need to add it to your service array:\\n\\n```js title=\\"wdio.conf.js\\"\\nexport.config = {\\n  // ...\\n  services: [\'wiremock\'],\\n  // ...\\n};\\n```\\n\\nThere are a lot more options that are available for configuration, for a full overview go [here](https://github.com/erwinheitzman/wdio-wiremock-service/blob/master/README.md#options).\\n\\n## Creating mocks and fixtures\\n\\nThe service creates a directory (`./mock` by default) with two subdirectories (`mappings` and `__files`). It will use the `mappings` directory to look for mock files and it will use the `__files` directory to look for fixture files.\\n\\nKnowing this, creating a fixture is as easy as creating a file in the `__files` directory:\\n\\n```json title=\\"./mock/__files/hello-world.json\\"\\nHello world\\n```\\n\\nAnd creating your first mock is as simple as creating a file in the `mappings` directory:\\n\\nKnowing this, creating a fixture is as easy as creating a file in the `__files` directory:\\n\\n```json title=\\"./mock/mappings/my-test.json\\"\\n{\\n  \\"request\\": {\\n      \\"method\\": \\"GET\\",\\n      \\"url\\": \\"/api/mytest\\"\\n  },\\n  \\"response\\": {\\n      \\"status\\": 200,\\n      \\"bodyFileName\\": \\"hello-world.json\\"\\n  }\\n}\\n```\\n\\n## Writing tests\\n\\nWriting your first test is really straight forward:\\n\\n```js title=\\"./test/specs/mytest.js\\"\\nconst fetch = require(\'node-fetch\');\\nconst assert = require(\'assert\');\\n\\ndescribe(\'My test\', () => {\\n  it(\'should assert the mock data\', () => {\\n    browser.call(async () => {\\n      await fetch(\'http://localhost:8080/api/mytest\')\\n        .then((res) => res.text())\\n        .then((body) => {\\n            // assert that the request body returns the expected value\\n            assert.equal(body, \'More content\');\\n        });\\n    });\\n  });\\n});\\n```\\n\\n# Support\\n\\nStay up to date by joining the community over at [Gitter](https://gitter.im/erwinheitzman/wdio-wiremock-service) to join others and for support and questions.\\n\\nSee you there!"},{"id":"Avoid starting session for excluded specs","metadata":{"permalink":"/blog/2019/11/01/spec-filtering","editUrl":"https://github.com/Abhi6722/hackers-hub/edit/main/website/blog/blog/2019-11-01-spec-filtering.md","source":"@site/blog/2019-11-01-spec-filtering.md","title":"Avoid starting session for excluded specs","description":"It\'s a common approach to filter specs with tags, grep or any other techniques, however we had a gotcha here before - a new session is created for every spec file which takes some time, especially for mobile tests.","date":"2019-11-01T00:00:00.000Z","formattedDate":"November 1, 2019","tags":[],"readingTime":1.895,"truncated":false,"authors":[{"name":"Mykola Grybyk","url":"http://github.com/mgrybyk"}],"prevItem":{"title":"WireMock as a Service","permalink":"/blog/2019/12/05/wiremock"},"nextItem":{"title":"Chrome DevTools as Automation Protocol","permalink":"/blog/2019/09/16/devtools"}},"content":"It\'s a common approach to filter specs with tags, grep or any other techniques, however we had a gotcha here before - a new session is created for every spec file which takes some time, especially for mobile tests.\\n\\nWe\'ve added a [feature](https://github.com/webdriverio/webdriverio/pull/4531) that allows to filter spec files before a session is started. The feature is enabled by default for Cucumber framework only and is disabled by default for Mocha and Jasmine frameworks to avoid breaking changes. To use the feature, it has to be enabled in `wdio.conf.js` with feature flag, also all `browser` function calls like `browser.addCommand()` or any other have to be moved away from root scope. You can still use env flags, config or capabilities as before.\\n\\nThe following is only required for Mocha and Jasmine users who want to use the feature:\\n\\n- Enable the feature with a flag in `wdio.conf.js`\\n```js\\n// wdio.conf.js\\nexport.config = {\\n    // ...\\n    featureFlags: {\\n        specFiltering: true\\n    },\\n}\\n```\\n\\n- Move custom commands declaration to `before` hook, if you have such, example:\\n```js\\n// wdio.conf.js\\nexport.config = {\\n    // ...\\n    mochaOpts: {\\n        /**\\n         * all the files that interacts with `browser` object in a root scope\\n         * have to be required in `before` hook if `specFiltering` feature is enabled.\\n         */\\n        require: [\\n            \\"@babel/register\\", // if you have any transpilers leave them as is\\n            \\"./src/wdio/commands\\" // remove from here\\n        ]\\n    },\\n    before (capabilities, specs) {\\n        require(\\"./src/wdio/commands\\") // add here\\n    },\\n}\\n```\\n- Move custom command declarations from root scope to suite level (or move them to another file and require it in `before` hook, see 2.1), if you had such, example:\\n```js\\n// my.spec.js\\n\\n/**\\n * move `browser.addCommand()` as well as other browser functions calls\\n * from root scope to suite level (or another file)\\n */\\nbrowser.addCommand(\'myCommand\', () => {}) // remove!\\n\\n// it\'s still possible to use config, capabilities or env flags as before.\\ndescribe(\'my suite in \' + browser.capabilities.browserName, () => {\\n    // add it to suite/test scope\\n    browser.addCommand(\'myCommand\', () => {})\\n\\n    it(\'my test\', () => {\\n        browser.myCommand()\\n    })\\n})\\n```\\n\\nWe are happy to answer any questions and awaiting your feedback.\\n\\nPlease note that the feature will be enabled for all test frameworks in v6 so it\'s recommended to start preparation in advance.\\n\\nThanks!"},{"id":"Chrome DevTools as Automation Protocol","metadata":{"permalink":"/blog/2019/09/16/devtools","editUrl":"https://github.com/Abhi6722/hackers-hub/edit/main/website/blog/blog/2019-09-16-devtools.md","source":"@site/blog/2019-09-16-devtools.md","title":"Chrome DevTools as Automation Protocol","description":"Over the last few years a lot of new testing frameworks have evolved that provide different capabilities but also come with certain limitations. While tools like Selenium are often seen as slow and flaky and others like Cypress.io or Puppeteer are hyped as the future in the testing space. In reality all tools have their own use cases, have different levels of support and are based on a completely different architecture. Comparing them is rather useless as it ends up comparing apples with oranges. In larger test suites flakiness and race conditions can happen using all of these tools so that we can safely say that up to this point none of them (including WebdriverIO) has found the ultimate solution for world /(domin|autom)ation/.","date":"2019-09-16T00:00:00.000Z","formattedDate":"September 16, 2019","tags":[],"readingTime":5.825,"truncated":false,"authors":[{"name":"Christian Bromann","url":"http://github.com/christian-bromann","imageURL":"https://s.gravatar.com/avatar/d98b16d7c93d15865f34a225dd4b1254?s=80"}],"prevItem":{"title":"Avoid starting session for excluded specs","permalink":"/blog/2019/11/01/spec-filtering"},"nextItem":{"title":"WebdriverIO V5 now also supports CucumberJS","permalink":"/blog/2019/07/11/cucumberjs-v5-released"}},"content":"Over the last few years a lot of new testing frameworks have evolved that provide different capabilities but also come with certain limitations. While tools like [Selenium](https://www.seleniumhq.org/) are often seen as slow and flaky and others like [Cypress.io](https://www.cypress.io/) or [Puppeteer](https://pptr.dev/) are hyped as the future in the testing space. In reality all tools have their own use cases, have different levels of support and are based on a completely different architecture. Comparing them is rather useless as it ends up comparing apples with oranges. In larger test suites flakiness and race conditions can happen using all of these tools so that we can safely say that up to this point none of them (including WebdriverIO) has found the ultimate solution for world `/(domin|autom)ation/`.\\n\\nAt the end of the day there are more or less two different approaches to how you can automate a browser. One is using an official W3C web standard called [WebDriver](https://w3c.github.io/webdriver/) and the other is the native browser interface that some of the browsers expose these days. The WebDriver protocol is the de-facto standard automation technique that allows you to not only automate all desktop browsers but also run automation on arbitrary user agents that include mobile devices, desktop applications or even Smart TVs. If you don\'t use WebDriver your automation framework most likely uses the native browser interfaces to run its automation on. While in the past every browser had its own (often not documented) protocol, these days a lot of browsers, including Chrome, Edge and soon even Firefox, come with a somewhat unified interface that is close to what is called the [Chrome DevTools Protocol](https://chromedevtools.github.io/devtools-protocol/). While WebDriver provides true cross-browser support and allows you to run tests on a large scale in the cloud using vendors like [Sauce Labs](https://saucelabs.com/), native browser interfaces often allow many more automation capabilities like listening and interacting with network or DOM events while often being limited to a single browser only.\\n\\nWith the release of WebdriverIO v5.13 we now introduce a new option that allows you to specify the automation protocol for your test and leverage the capabilities of both worlds. With that you can now decide whether to run your tests using WebDriver or Chrome DevTools (via Puppeteer). Nothing actually changes for your tests, just the automation happens using different technologies. We\'ve created a new NPM package that we call [`devtools`](https://www.npmjs.com/package/devtools) which has all WebDriver commands implemented but executes them using Puppeteer. It is a new type of plugin that even allows you to build your own WebDriver based automation package to automate an arbitrary device with WebdriverIO. The new option, called `automationProtocol`, expects a string and is by default set to `\\"webdriver\\"` to run automation using WebdriverIOs own [`webdriver`](https://www.npmjs.com/package/webdriver) bindings. However if you install the new `devtools` package via:\\n\\n```bash npm2yarn\\n$ npm install --save-dev devtools webdriverio\\n```\\n\\nand set `automationProtocol: \'devtools\'` in your options, all the automation happens via Chrome DevTools (more specifically via Puppeteer) while using the same WebdriverIO command interface:\\n\\n```js\\nconst { remote } = require(\'webdriverio\')\\n\\nlet client;\\n\\n(async function () {\\n    client = await remote({\\n        automationProtocol: \'devtools\', // CHANGE PROTOCOL HERE\\n        capabilities: { browserName: \'chrome\' } // or `browserName: \'firefox\'`\\n    })\\n\\n    await client.url(\'https://webdriver.io\')\\n    console.log(await client.getTitle())\\n    await client.deleteSession()\\n})().catch(async (e) => {\\n    console.error(e.stack)\\n    await client.deleteSession()\\n})\\n```\\n\\nThis is especially great for local testing since you are no longer required to download a browser driver which often causes confusion as to where to download and how to run them. In addition to that, tests will run much quicker since WebdriverIO is directly connected to the browser.\\n\\nAs mentioned before, you can now leverage the advantages of running true cross-browser tests at scale with WebDriver, as well as leveraging all the additional automation capabilities of DevTools in one single tool. That said, given the fact that it is not possible to switch the protocols during a session, you might want to have one set of tests that require Puppeteer involvement, while also having a second set that you run cross-browser in the cloud.\\n\\nIn order to access Puppeteer in your tests, we have introduced a command called `getPuppeteer()`, which returns the [`browser class`](https://pptr.dev/#?product=Puppeteer&version=v1.19.0&show=api-class-browser) of the Puppeteer framework. From there on you can access the Puppeteer interface and all of its other classes. Note that these interfaces provide commands that are solely promise-based and WebdriverIO does not wrap them as you might know it using the WDIO testrunner. In this case we recommend wrapping all Puppeteer command calls manually within the [`call`](https://webdriver.io/docs/api/browser/call.html) command that ensures that all promises are resolved before it moves on with other commands. For example, the following script shows how you can use WebdriverIO using the `devtools` automation protocol via Puppeteer in the WDIO testrunner world:\\n\\n```js\\ndescribe(\'my e2e tests\', () => {\\n    // ...\\n\\n    it(\'replaces the WebdriverIO logo with the Puppeteer logo\', () => {\\n        browser.url(\'https://webdriver.io\')\\n\\n        /**\\n         * run Puppeteer code with promises to intercept network requests\\n         * and replace the WebdriverIO logo in the docs with the Puppeteer logo\\n         */\\n        browser.call(async () => {\\n            const puppeteerBrowser = browser.getPuppeteer()\\n            const page = (await puppeteerBrowser.pages())[0]\\n            await page.setRequestInterception(true)\\n            page.on(\'request\', interceptedRequest => {\\n                if (interceptedRequest.url().endsWith(\'webdriverio.png\')) {\\n                    return interceptedRequest.continue({\\n                        url: \'https://user-images.githubusercontent.com/10379601/29446482-04f7036a-841f-11e7-9872-91d1fc2ea683.png\'\\n                    })\\n                }\\n\\n                interceptedRequest.continue()\\n            })\\n        })\\n\\n        // continue with sync WebdriverIO commands\\n        browser.refresh()\\n        browser.pause(2000)\\n    })\\n\\n    // ...\\n})\\n```\\n\\nWe also made sure that you can use the `devtools` automation protocol with WDIO testrunner services like [`@wdio/devtools-service`](https://www.npmjs.com/package/@wdio/devtools-service) to make the experience as seamless as possible. You can find the complete script example to run in standalone mode in the WebdriverIO [example directory](https://github.com/webdriverio/webdriverio/tree/main/examples/devtools/intercept.js).\\n\\nWe recommend only running tests on the devtools protocol if your functional test requires some sort of automation capability that is not provided by WebDriver. It also makes sense to switch to `devtools` whenever running tests locally as the test execution will be much faster. If you follow our best practices you should split up your wdio config files per environment (e.g. local testing vs. run tests against Sauce Labs or in your grid). You can now have a config that defines a set of tests that require some Puppeteer interaction:\\n\\n```js\\n// wdio.devtools.conf.js\\nconst { config } = require(\'./wdio.conf.js\')\\nexports.config = Object.assign(config, {\\n    /**\\n     * set automation protocol to devtools\\n     */\\n    automationProtocol: \'devtools\',\\n    /**\\n     * define a set of tests that require Puppeteer involvement\\n     */\\n    specs: [\\n        \'tests/e2e/devtools/**\'\\n    ],\\n    /**\\n     * run tests only on Firefox and Chrome in headless mode\\n     */\\n    capabilities: [{\\n        browserName: \'chrome\',\\n        \'goog:chromeOptions\': {\\n            headless: true\\n        }\\n    }, {\\n        browserName: \'firefox\',\\n        \'moz:firefoxOptions\': {\\n            headless: true\\n        }\\n    }]\\n    // other specific options ...\\n})\\n```\\n\\nWith the new `automationProtocol` option, we\'ve opened the project up to automation technologies beyond WebDriver. There are advantages and disadvantages using both approaches and with this feature we allow you to use both in one single tool. The [`devtools package`](https://www.npmjs.com/package/devtools) is still work in progress and we are finalizing all of its features within the upcoming weeks. If you have any feedback, bugs or comments on this please reach out via [Twitter](https://twitter.com/webdriverio) or on our Gitter [support chat](https://gitter.im/webdriverio/webdriverio).\\n\\nThanks!"},{"id":"WebdriverIO V5 now also supports CucumberJS","metadata":{"permalink":"/blog/2019/07/11/cucumberjs-v5-released","editUrl":"https://github.com/Abhi6722/hackers-hub/edit/main/website/blog/blog/2019-07-11-cucumberjs-v5-released.md","source":"@site/blog/2019-07-11-cucumberjs-v5-released.md","title":"WebdriverIO V5 now also supports CucumberJS","description":"We are pleased to announce that we now have support for CucumberJS in WebdriverIO V5!!!!","date":"2019-07-11T00:00:00.000Z","formattedDate":"July 11, 2019","tags":[],"readingTime":7.14,"truncated":false,"authors":[{"name":"Wim Selles","url":"http://github.com/wswebcreation","imageURL":"https://avatars2.githubusercontent.com/u/11979740?s=460&v=4"}],"prevItem":{"title":"Chrome DevTools as Automation Protocol","permalink":"/blog/2019/09/16/devtools"},"nextItem":{"title":"File Uploads with WebdriverIO","permalink":"/blog/2019/06/25/file-upload"}},"content":"We are pleased to announce that we now have support for CucumberJS in WebdriverIO V5!!!!\\nThis has been a great challenge for the project committers so we\'re all very thankful for the time and effort they put into this.\\nSo normally we would say\\n\\n```sh\\nnpm install @wdio/cucumber-framework --save-dev\\n```\\n\\nand go with the flow, but this time it is different. When you upgrade to the latest version of the Cucumber framework you also need to upgrade to the **latest version of WebdriverIO**.\\nIn this blog post we want to give you some guidelines on how to do that.\\n\\n## Where to start\\nUpgrading to the latest version of the Cucumber framework isn\'t that simple, because as said, you also need to migrate to version 5 of WebdriverIO.\\nTo understand what you need to do we have created some steps you might want to follow which will make the migration a lot easier for you.\\nBut before we explain the steps, you first need to understand the differences between WebdriverIO V4 and WebdriverIO V5.\\n\\n### NodeJS support\\nWebdriverIO now needs NodeJS 8 or higher. Be aware that NodeJS 8 will end it\'s LTS support at the end of 2019, so upgrading to 10 would be better.\\nIf you want to know more about the NodeJS LTS support check [this](https://github.com/nodejs/Release). This might help you convince your colleagues / DEVOPS engineers to upgrade you NodeJS instances.\\n\\n*As a side note, if you want to know what is supported by NodeJS by default you can check [node.green](https://node.green/) and follow all upcoming changes.*\\n\\n### W3C support\\nWebdriverIO is now fully supporting the W3C protocol, this has a lot of advantages, but for your existing scripts some minor downsides.\\nOne of the downsides might be that you are using methods that are based on the JSONWire Protocol, that are not supported by the newest drivers like for example ChromeDriver 74+.\\nThis might result in errors like for example `browser.positionClick() is not a function`. If you see this error you are using a not supported method for the W3C supported Driver.\\nSee the API documentation [here](https://webdriver.io/docs/api.html) to see which command is a WebDriver Protocol (W3C) or a JSONWire protocol command.\\n\\nJust a little side note, we tried to keep all `browser` and `element` commands, see the link above, agnostic to the protocol. Nothing changed here for you.\\nTo provide you some insight on how this works please check for example the `keys` command, you will find the support for both protocols [here](https://github.com/webdriverio/webdriverio/blob/main/packages/webdriverio/src/commands/browser/keys.js#L45-L50).\\n\\nIf you want to use W3C with cloud vendors, like for example Sauce Labs or Browserstack, you need to use a vendor specific prefix in your capabilities.\\nPlease check the websites of the vendors to see what you need to do.\\n\\nBut, you always need to end with the advantages. So, with W3C you will now see that the browsers follow a common web standard for web automation.\\nThis helps WebdriverIO to build a reliable framework on top of it. And last but not least, with W3C support from all browser vendors we now also get better support for Appium, check the latest post of [Apple here](https://webkit.org/blog/9395/webdriver-is-coming-to-safari-in-ios-13/).\\nSo, W3C is a major step for us all!!\\n\\n### Command changes\\nOver the years WebdriverIO added more and more commands for different automation protocols without applying a pattern to it which resulted in having a bunch of duplication and inconsistent naming.\\nEven though the list looks exhausting, most of the commands that have changed were used internally. Please check the [changelog of V5](https://github.com/webdriverio/webdriverio/blob/main/CHANGELOG.md#v500-2018-12-20) to see all the changes.\\n\\n### Breaking changes\\nWhen creating a better product and thus releasing a major version, you will always have breaking changes. We can\'t repeat it enough but please check the [changelog of V5](https://github.com/webdriverio/webdriverio/blob/main/CHANGELOG.md#v500-2018-12-20) to see all the breaking changes.\\n\\n**Don\'t only read the changes in the V5.0.0 release, but also read the rest of the changes!**\\n\\n### It\'s not only WebdriverIO who evolved!\\nWhen you are going to use the latest version of the `@wdio/cucumber-framework`, you\'ll also get the latest version of Cucumber. **This means you also need to look at the breaking changes between CucumberJS 2 and CucumberJS 5.**\\nPlease check the [changelog of CucumberJS](https://github.com/cucumber/cucumber-js/blob/master/CHANGELOG.md#300-2017-08-08) from version 3 till 5 to see what changed in CucumberJS.\\n\\n### Migration steps\\nSo enough about the differences between V4 and V5, please follow the steps below to make the migration a little bit smoother. The idea behind these steps is to migrate with small baby steps.\\nThe advantage of doing it in small baby steps is that you also have some time to look at your code again and maybe refactor it or remove duplicate and ugly not needed code.\\n\\n#### 1. Start with a clean project\\nWe advise you to create a fresh new project which you can easily copy to your old project and migrate 1 feature file and it\'s steps per scenario.\\nWhen you do this you can easily disable scenario\'s in your old project, and run the new migrated tests in the new project, maybe even embed it in your pipeline.\\n\\nBefore installing dependencies, we need to initialize an empty NPM project (this will allow us to the cli to install needed dependencies to our local project).\\nTo do this, run:\\n\\n```sh\\nmkdir webdriverio-test && cd webdriverio-test\\nnpm init -y\\n```\\n\\nThe `-y` will answer \'yes\' to all the prompts, giving us a standard NPM project. Feel free to omit the `-y` if you\'d like to specify your own project details.\\n\\n#### 2. Install WebdriverIO CLI\\nWe recommend using the test runner because it comes with a lot of useful features that makes your life easier. With WebdriverIO v5 and up, the testrunner has moved into the [@wdio/cli](https://www.npmjs.com/package/@wdio/cli) NPM package.\\n\\nNow we need to install the cli. Do that by running:\\n\\n```sh\\nnpm i --save-dev @wdio/cli\\n```\\n\\n#### 3. Generate Configuration File\\nWe\'ll next want to generate a configuration file that stores all of our WebdriverIO settings. To do that just run the configuration utility:\\n\\n```sh\\nnpx wdio config\\n```\\n\\nA question interface pops up. It will help to create the config easy and fast and install all needed dependencies.\\nCheck the file and read the comments, some things changed so reading them might help you understand what changed in the configuration file.\\n\\n**NOTE:**\\nIf you were using a compiler in your `cucumberOpts` you need to be aware of the fact that CucumberJS removed the `compiler`. This means that WebdriverIO can\'t provide you with this option, but, as you might expect from our hard working contributors, there is a different solution.\\nPlease check [Babel](https://webdriver.io/docs/babel.html) or [TypeScript](https://webdriver.io/docs/typescript.html) for the new way of using a compiler.\\n\\n#### 4. Create the same folder structure\\nNow that everything has been set up, it\'s best to create the same folder structure you now have in your project.\\n\\n**DON\'T COPY THE FILE, ONLY THE FOLDER STRUCTURE**\\n\\n#### 5. Migrate feature file per feature file\\nWhen you have the folder structure, copy **1 feature file** to the new project. Start with the easiest file and if you have more than 1 scenario in it, comment out all scenario\'s and leave 1 active.\\nNow make sure you migrate the steps that belong to that specific scenario, including all pageobjects that belong to the implementation, to the new project. Keep in mind that there are breaking changes in WebdriverIO in selecting elements and so on, see above.\\nIf you were using the `defineSupportCode` from CucumberJS, please check the [CucumberJS changelog for V4](https://github.com/cucumber/cucumber-js/blob/master/CHANGELOG.md#400-2018-01-24). That is deprecated now.\\n\\nDo this for each scenario, migrate it step by step, if you face issues, fix them and proceed. And don\'t forget to clean up the coding mess you, or your colleagues, might have made in the past.\\n\\n#### 6. When you\'re done\\nBecause you created a clean project you can now easily do the following:\\n\\n1. Remove all WebdriverIO V4 dependencies in your old project.\\n2. Copy all dependencies from the new project to the old project.\\n3. Remove all test related files.\\n4. Copy all new test related files to your project.\\n\\nAnd you\'re done, time to party.\\n\\n# Support\\nIf you need support you can find us on the `WebdriverIO`- Gitter channel by clicking on this link [![Gitter chat](https://badges.gitter.im/webdriverio/webdriverio.svg)](https://gitter.im/webdriverio/webdriverio \\"Gitter chat\\").\\nWhen you ask for support we only have 1 question for you, please provide us a detailed description of your issue, what you already did and so on. Otherwise you ask us to find a needle in a haystack and trust me, that will be very hard for us.\\n\\nHappy testing!\\n\\nGrtz,\\n\\nThe Blue Guy"},{"id":"File Uploads with WebdriverIO","metadata":{"permalink":"/blog/2019/06/25/file-upload","editUrl":"https://github.com/Abhi6722/hackers-hub/edit/main/website/blog/blog/2019-06-25-file-upload.md","source":"@site/blog/2019-06-25-file-upload.md","title":"File Uploads with WebdriverIO","description":"Testing an upload scenario in the browser is a rare but not uncommon case in the automation testing space. It is always important to evaluate the importance of such a test because in many situations you end up testing the browser more than your application. So always keep in mind how much additional functionality your frontend application puts on top of the default upload behavior of the browser. If for example most of the magic happens in the backend it makes much more sense to mimik an upload using a simple Node.js POST request using packages like request or axios.","date":"2019-06-25T00:00:00.000Z","formattedDate":"June 25, 2019","tags":[],"readingTime":3.21,"truncated":false,"authors":[{"name":"Christian Bromann","url":"https://twitter.com/bromann","imageURL":"https://s.gravatar.com/avatar/d98b16d7c93d15865f34a225dd4b1254?s=80"}],"prevItem":{"title":"WebdriverIO V5 now also supports CucumberJS","permalink":"/blog/2019/07/11/cucumberjs-v5-released"},"nextItem":{"title":"Visual Regression for V5","permalink":"/blog/2019/05/18/visual-regression-for-v5"}},"content":"Testing an upload scenario in the browser is a rare but not uncommon case in the automation testing space. It is always important to evaluate the importance of such a test because in many situations you end up testing the browser more than your application. So always keep in mind how much additional functionality your frontend application puts on top of the default upload behavior of the browser. If for example most of the magic happens in the backend it makes much more sense to mimik an upload using a simple Node.js `POST` request using packages like [`request`](https://www.npmjs.com/package/request) or [`axios`](https://www.npmjs.com/package/axios).\\n\\n## Find and expose file inputs\\n\\nLet\'s say our frontend app does a lot of things on top of just uploading a file (e.g. validation or some other frontend side manipulation of the file that is about to be uploaded). Now the first thing we should do is to find the input elements from type `file`. Be aware that apps build in React, Angular or other frameworks often hide these elements as there are hard to style using pure CSS. Therefore they hide the elements and mimic the input with a `div` or other more styleable HTML tags.\\n\\n```js\\n// Two hidden input elements, 1 for single file upload 1 for multiple.\\n<input class=\\"upload-data-file-input hidden\\" type=\\"file\\">\\n<input class=\\"upload-data-file-input-multiple hidden\\" type=\\"file\\">\\n```\\n\\nIn order to become capable to modify the value of this element we need to make it visible. The [WebDriver spec](https://w3c.github.io/webdriver/#interactability) defines input elements to be interactable in order to [change their value](https://w3c.github.io/webdriver/#element-send-keys). So let\'s do that:\\n\\n```js\\n/**\\n * The css class name \\"upload-data-file-input hidden\\" is just an example\\n * and you can replace with your app.\\n */\\nconst fileUpload = $(\'.upload-data-file-input\');\\nbrowser.execute(\\n    // assign style to elem in the browser\\n    (el) => el.style.display = \'block\',\\n    // pass in element so we don\'t need to query it again in the browser\\n    fileUpload\\n);\\nfileUpload.waitForDisplayed();\\n```\\n\\nWith the [`execute`](https://webdriver.io/docs/api/browser/execute.html) we can simply modify the element properties to either remove the `hidden` class or give the element displayedness.\\n\\n## Uploading the file\\n\\nUnfortunately the mechanism to upload a file with a browser highly depends on your test setup. At the end of the day the browser needs to be able to access the file that you want tp upload. For the local scenario it is super simple. Since you run the browser on your local machine and the file that you want to upload also exists on your local machine, all you need to do is to set the value of the file path to the input element:\\n\\n```js\\n/**\\n * it is recommended to always use the absolute path of the file as it ensures\\n * that it can be found by the browser.\\n */\\nconst path = require(\'path\');\\nconst filePath = path.join(__dirname, \'path/to/your/file\');\\nfileUpload.setValue(filePath);\\n```\\n\\nIf you automate a browser that is running on a remote machine this approach won\'t work anymore because the file that is located locally (or wherever the tests are running) does not exist on the remote machine where the browser is running. For these scenarios the Selenium project created a [`file`](https://webdriver.io/docs/api/chromium.html#file) that is currently only supported when running Chrome or using a Selenium Grid with the Selenium standalone server. The command expects the file payload to be passed in as base64 string. Since this is quite inconvenient to use WebdriverIO has implemented an `upload` command that allows you to pass in just the file name and the framework takes care of parsing it properly. The upload example will now look like:\\n\\n```js\\nconst path = require(\'path\');\\nconst filePath = path.join(__dirname, \'path/to/your/file\');\\n\\nconst remoteFilePath = browser.uploadFile(filePath);\\n$(\'.upload-data-file-input\').setValue(remoteFilePath);\\n```\\n\\nNote that the remote file name is different from your local filename. Therefore you need to set the value based on the remote file name you get from the `uploadFile` command.\\n\\nThat was it!!! Happy Uploading \ud83d\ude09\ud83d\ude4c\ud83c\udffb \u2764\ufe0f"},{"id":"Visual Regression for V5","metadata":{"permalink":"/blog/2019/05/18/visual-regression-for-v5","editUrl":"https://github.com/Abhi6722/hackers-hub/edit/main/website/blog/blog/2019-05-18-visual-regression-for-v5.md","source":"@site/blog/2019-05-18-visual-regression-for-v5.md","title":"Visual Regression for V5","description":"We are pleased to announce that we now have a new Visual Regression service for WebdriverIO V5 called wdio-image-comparison-service.","date":"2019-05-18T00:00:00.000Z","formattedDate":"May 18, 2019","tags":[],"readingTime":4.505,"truncated":false,"authors":[{"name":"Wim Selles","url":"http://github.com/wswebcreation","imageURL":"https://avatars2.githubusercontent.com/u/11979740?s=460&v=4"}],"prevItem":{"title":"File Uploads with WebdriverIO","permalink":"/blog/2019/06/25/file-upload"},"nextItem":{"title":"React Selectors","permalink":"/blog/2019/04/03/react-selectors"}},"content":"We are pleased to announce that we now have a new Visual Regression service for WebdriverIO V5 called `wdio-image-comparison-service`.\\n\\n## What can it do?\\n*wdio-image-comparison-service* is a lightweight *WebdriverIO* service for browsers / mobile browsers / hybrid apps to do image comparison on screens, elements or full page screens.\\n\\nYou can:\\n\\n- save or compare screens / elements / full page screens against a baseline\\n- automatically create a baseline when no baseline is there\\n- blockout custom regions and even automatically exclude a status and or tool bars (mobile only) during a comparison\\n- increase the element dimensions screenshots\\n- use different comparison methods\\n- and much more, see the [options here](https://github.com/wswebcreation/wdio-image-comparison-service/blob/master/docs/OPTIONS.md)\\n\\nThe module is now based on the power of the new [`webdriver-image-comparison`](https://github.com/wswebcreation/webdriver-image-comparison) module. This is a lightweight module to retrieve the needed data and screenshots for all browsers / devices.\\nThe comparison power comes from [ResembleJS](https://github.com/Huddle/Resemble.js). If you want to compare images online you can check the [online tool](https://rsmbl.github.io/Resemble.js/).\\n\\n\\nIt can be used for:\\n\\n- desktop browsers (Chrome / Firefox / Safari / Internet Explorer 11 / Microsoft Edge)\\n- mobile / tablet browsers (Chrome / Safari on emulators / real devices) via Appium\\n- Hybrid apps via Appium\\n\\nFor versions check below:\\n\\n[![Sauce Test Status](https://eu-central-1.saucelabs.com/browser-matrix/wdio-image-comparison-service.svg)](https://eu-central-1.saucelabs.com/u/wdio-image-comparison-service)\\n\\n## Installation\\nInstall this module locally with the following command to be used as a (dev-)dependency:\\n\\n```bash npm2yarn\\nnpm install --save-dev wdio-image-comparison-service\\n```\\n\\nInstructions on how to install `WebdriverIO` can be found [here.](http://webdriver.io/guide/getstarted/install.html)\\n\\n## Usage\\n> ***wdio-image-comparison-service* supports NodeJS 8 or higher**\\n\\n### Configuration\\n`wdio-image-comparison-service` is a service so it can be used as a normal service. You can set it up in your `wdio.conf.js` file with the following:\\n\\n```js\\nconst { join } = require(\'path\');\\n\\n// wdio.conf.js\\nexports.config = {\\n    // ...\\n    // =====\\n    // Setup\\n    // =====\\n    services: [\\n        [\'image-comparison\',\\n        // The options\\n        {\\n            // Some options, see the docs for more\\n            baselineFolder: join(process.cwd(), \'./tests/sauceLabsBaseline/\'),\\n            formatImageName: \'{tag}-{logName}-{width}x{height}\',\\n            screenshotPath: join(process.cwd(), \'.tmp/\'),\\n            savePerInstance: true,\\n            autoSaveBaseline: true,\\n            blockOutStatusBar: true,\\n            blockOutToolBar: true,\\n            // ... more options\\n        }],\\n    ],\\n    // ...\\n};\\n```\\n\\nMore plugin options can be found [here](https://github.com/wswebcreation/wdio-image-comparison-service/blob/master/docs/OPTIONS.md#plugin-options).\\n\\n### Writing tests\\n*wdio-image-comparison-service* is framework agnostic, meaning that you can use it with all the frameworks WebdriverIO supports like `Jasmine|Mocha`.\\nYou can use it like this:\\n\\n```js\\ndescribe(\'Example\', () => {\\n  beforeEach(() => {\\n     browser.url(\'https://webdriver.io\');\\n  });\\n\\n  it(\'should save some screenshots\', () => {\\n  \\t// Save a screen\\n  \\tbrowser.saveScreen(\'examplePaged\', { /* some options*/ });\\n\\n  \\t// Save an element\\n  \\tbrowser.saveElement($(\'#element-id\'), \'firstButtonElement\', { /* some options*/ });\\n\\n  \\t// Save a full page screens\\n  \\tbrowser.saveFullPageScreen(\'fullPage\', { /* some options*/ });\\n  });\\n\\n  it(\'should compare successful with a baseline\', () => {\\n  \\t// Check a screen\\n  \\texpect(browser.checkScreen(\'examplePaged\', { /* some options*/ })).toEqual(0);\\n\\n  \\t// Check an element\\n  \\texpect(browser.checkElement($(\'#element-id\'), \'firstButtonElement\', { /* some options*/ })).toEqual(0);\\n\\n  \\t// Check a full page screens\\n  \\texpect(browser.checkFullPageScreen(\'fullPage\', { /* some options*/ })).toEqual(0);\\n  });\\n});\\n```\\n\\n**If you run for the first time without having a baseline the `check`-methods will reject the promise with the following warning:**\\n\\n```sh\\n#####################################################################################\\n Baseline image not found, save the actual image manually to the baseline.\\n The image can be found here:\\n /Users/wswebcreation/Git/wdio-image-comparison-service/.tmp/actual/desktop_chrome/examplePage-chrome-latest-1366x768.png\\n If you want the module to auto save a non existing image to the baseline you\\n can provide \'autoSaveBaseline: true\' to the options.\\n#####################################################################################\\n\\n```\\n\\nThis means that the current screenshot is saved in the actual folder and you **manually need to copy it to your baseline**.\\nIf you instantiate `wdio-image-comparison-service` with `autoSaveBaseline: true` the image will automatically be saved into the baseline folder.\\n\\n### Nice new feature\\nWhen you create a fullpage screenshot you might have some elements that stay in the view, like a stickyheader or a chatbox.\\nThese elements normally mess up the screenshot like you can see on the left side of the below image.\\n\\nBut you can now add elements that need to be hidden after the first scroll which will give you a result as you can see in the right side of the below image.\\nThis can be done by adding this property to your test:\\n\\n```js\\nbrowser.checkFullPageScreen(\'fullPage\', {\\n    hideAfterFirstScroll: [\\n        $(\'nav-bar\'),\\n        $(\'chat-box\'),\\n    ],\\n});\\n```\\n\\n![fullpage-example](./assets/image-comparison.jpg)\\n\\n\\n### Test result outputs\\nThe `save(Screen/Element/FullPageScreen)` methods will provide the following information after the method has been executed:\\n\\n```js\\nconst saveResult = {\\n  // The device pixel ratio of the instance that has run\\n  devicePixelRatio: 1,\\n  // The formatted filename, this depends on the options `formatImageName`\\n  fileName: \'examplePage-chrome-latest-1366x768.png\',\\n  // The path where the actual screenshot file can be found\\n  path: \'/Users/wswebcreation/Git/wdio-image-comparison-service/.tmp/actual/desktop_chrome\',\\n};\\n```\\n\\nSee the [Save output](https://github.com/wswebcreation/wdio-image-comparison-service/blob/master/docs/OUTPUT.md#save-output) section in the [output](https://github.com/wswebcreation/wdio-image-comparison-service/blob/master/docs/OUTPUT.md) docs for the images.\\n\\nBy default the `check(Screen/Element/FullPageScreen)` methods will only provide a mismatch percentage like `1.23`, but when the plugin has the options `returnAllCompareData: true` the following information is provided after the method has been executed:\\n\\n```js\\nconst checkResult = {\\n  // The formatted filename, this depends on the options `formatImageName`\\n  fileName: \'examplePage-chrome-headless-latest-1366x768.png\',\\n  folders: {\\n      // The actual folder and the file name\\n      actual: \'/Users/wswebcreation/Git/wdio-image-comparison-service/.tmp/actual/desktop_chrome/examplePage-chrome-headless-latest-1366x768.png\',\\n      // The baseline folder and the file name\\n      baseline: \'/Users/wswebcreation/Git/wdio-image-comparison-service/localBaseline/desktop_chrome/examplePage-chrome-headless-latest-1366x768.png\',\\n      // This following folder is optional and only if there is a mismatch\\n      // The folder that holds the diffs and the file name\\n      diff: \'/Users/wswebcreation/Git/wdio-image-comparison-service/.tmp/diff/desktop_chrome/examplePage-chrome-headless-latest-1366x768.png\',\\n    },\\n    // The mismatch percentage\\n    misMatchPercentage: 2.34\\n};\\n```\\n\\nSee the [Check output on failure](https://github.com/wswebcreation/wdio-image-comparison-service/blob/master/docs/OUTPUT.md#check-output-on-failure) section in the [output](https://github.com/wswebcreation/wdio-image-comparison-service/blob/master/docs/OUTPUT.md) docs for the images.\\n\\n# Support\\nIf you need support you can find me on the `wdio-image-comparison-service`- Gitter channel, or click on this link [![Gitter chat](https://badges.gitter.im/wswebcreation/wdio-image-comparison-service.png)](https://gitter.im/wswebcreation/wdio-image-comparison-service \\"Gitter chat\\")\\n\\nHappy testing!\\n\\nGrtz,\\n\\nThe Blue Guy"},{"id":"React Selectors","metadata":{"permalink":"/blog/2019/04/03/react-selectors","editUrl":"https://github.com/Abhi6722/hackers-hub/edit/main/website/blog/blog/2019-04-03-react-selectors.md","source":"@site/blog/2019-04-03-react-selectors.md","title":"React Selectors","description":"ReactJS is one of the most widely use Front-End libraries in the web. Along side React, many developers use styling tools that will minify or re-write the class attribute values attached to the HTML elements via className props in JSX. These minifications and overwrites make it difficult to select the generated HTML using the WebDriver\'s query commands like findElement or findElements since it\'s not guaranteed that the class name will remain the same.","date":"2019-04-03T00:00:00.000Z","formattedDate":"April 3, 2019","tags":[],"readingTime":3.695,"truncated":false,"authors":[{"name":"Baruch Velez","url":"http://github.com/baruchvlz","imageURL":"https://avatars1.githubusercontent.com/u/14321495?s=460&v=4"}],"prevItem":{"title":"Visual Regression for V5","permalink":"/blog/2019/05/18/visual-regression-for-v5"},"nextItem":{"title":"Shadow DOM Support & reusable component objects","permalink":"/blog/2019/02/22/shadow-dom-support"}},"content":"[ReactJS](https://github.com/facebook/react) is one of the most widely use Front-End libraries in the web. Along side React, many developers use styling tools that will minify or re-write the class attribute values attached to the HTML elements via `className` props in JSX. These minifications and overwrites make it difficult to select the generated HTML using the WebDriver\'s query commands like `findElement` or `findElements` since it\'s not guaranteed that the class name will remain the same.\\n\\nToday we introduce two new commands, `browser.react$` and `browser.react$$`, to WebdriverIO\'s browser object that allows you to query for a single or multiple React component instances in the page with an easy to use API. These new commands will return the WebdriverIO element(s) for the query in where you will have access to the complete element commands API.\\n\\n## Usage\\n\\nInternally, WebdriverIO uses a library called [resq](https://github.com/baruchvlz/resq) to query React\'s VirtualDOM in order to retrieve the nodes. This library allows WebdriverIO to find any component in the VirtualDOM by the component\'s name and also filter this selection by state and/or props.\\n\\nWebdriverIO\'s provided API, `browser.react$` and `browser.react$$`, methods have three parameters. The first parameter is the selector to query, this parameter is required. The second and third parameters are optional filters, `props` and `state` respectively.\\n\\n```js\\nconst selector = \'MyComponent\'\\nconst propFilter = { someProp: true }\\nconst stateFilter = \'this is my state\'\\n\\nbrowser.react$(selector, {\\n    props: propFilter,\\n    state: stateFilter\\n})\\n```\\n\\nIn the examples we will cover basic usages for all three parameters.\\n\\n## Examples\\n\\nIn the following examples, we will base our queries against this example React application.\\n\\n```jsx\\n// mycomponent.jsx\\nimport React from \'react\'\\nimport ReactDOM from \'react-dom\'\\n\\nconst MyComponent = (props) => {\\n    const { name } = props;\\n    const [state] = React.useState(name === \'there\' ? \', how are you?\' : \'\')\\n\\n    return (\\n        <div>\\n            Hello {name || \'World\'}{state}\\n        </div>\\n    )\\n}\\n\\nReactDOM.render(\\n    <div>\\n        <MyComponent />\\n        <MyComponent name=\\"Barry\\"/>\\n        <MyComponent name=\\"WebdriverIO\\"/>\\n        <MyComponent name=\\"there\\"/>\\n    </div>,\\n    document.getElementById(\'#root\'),\\n)\\n```\\n\\nIn this app, we have one component that renders some text depending on the property `name` passed to it.\\n\\n#### Selecting and filtering\\n\\nNow, let\'s say we want to test that the first instance of `MyComponent` is correctly displayed in the browser. Well, with the `browser.react$` command, we can select this first instance and then query against it.\\n\\n```javascript\\n// spec/mycomponent.test.js\\n\\ntest(\'it should be displayed\', () => {\\n    const myComponent = browser.react$(\'MyComponent\')\\n\\n    expect(myComponent.isDisplayed()).toBe(true) // pass\\n})\\n```\\nSimple, no? But what if we want to select the component that says `Hello WebdriverIO` and verify that the text is correct? Well, we can filter our queries!\\n\\n```javascript\\n// spec/mycomponent.test.js\\n\\ntest(\'it should correctly display \\"Hello WebdriverIO\\"\', () => {\\n    const myComponent = browser.react$(\'MyComponent\', {\\n        props: { name: \'WebdriverIO\' }\\n    })\\n\\n    expect(myComponent.getText()).toBe(\'Hello WebdriverIO\') // pass\\n})\\n```\\nIn React, the props will always be an object so for this filter parameter we can only pass an object to be used to filter our results.\\n\\nYou might\'ve noticed that in our component we have a state that adds extra text if the name matches `there`. We can select this component by filtering the components by their current state.\\n\\n```javascript\\n// spec/mycomponent.test.js\\n\\ntest(\'it should correctly display \\"Hello WebdriverIO\\"\', () => {\\n    const myComponent = browser.react$(\'MyComponent\', {\\n        state: \', how are you?\'\\n    })\\n\\n    expect(myComponent.getText()).toBe(\'Hello there, how are you?\') // pass\\n})\\n```\\nAs you can see, for the state filter we pass the string that equals to the current state of the component, this last parameter in the function can be any of the following: string, number, boolean, array, or object. This is because all these types are valid state types for React.\\n\\n#### What about `browser.react$$`?\\n\\nBy now you might be wondering why we are using `browser.react$` in all the examples. Well, both commands have the same parameters and work almost the same with the **only difference** being that `browser.react$$` will return an array of all the WebdriverIO elements corresponding to the selector and/or filter match.\\n\\n## Final Words\\n\\nWe are very pleased with this addition and we hope you can take full advantage of it. We suggest you use [React Dev Tools](https://github.com/facebook/react-devtools), using this tool will help you see how the components in the application are called, which props they have, and which state they are currently in. Once you know this information, using WebdriverIO\'s React API will be a lot easier.\\n\\n> __Note:__ This blog post was updated after the v6 release to reflect changes to the command interface."},{"id":"Shadow DOM Support & reusable component objects","metadata":{"permalink":"/blog/2019/02/22/shadow-dom-support","editUrl":"https://github.com/Abhi6722/hackers-hub/edit/main/website/blog/blog/2019-02-22-shadow-dom-support.md","source":"@site/blog/2019-02-22-shadow-dom-support.md","title":"Shadow DOM Support & reusable component objects","description":"Shadow DOM is one of the key browser features that make up web components. Web components are a really great way to build reusable elements, and are able to scale all the way up to complete web applications. Style encapsulation, the feature that gives shadow DOM it\'s power, has been a bit of a pain when it comes to E2E or UI testing. Things just got a little easier though, as WebdriverIO v5.5.0 introduced built-in support for shadow DOM via two new commands, shadow$ and shadow$$. Let\'s dig into what they\'re all about.","date":"2019-02-22T00:00:00.000Z","formattedDate":"February 22, 2019","tags":[],"readingTime":6.275,"truncated":false,"authors":[{"name":"John Robinson","url":"https://www.github.com/jrobinson01","imageURL":"https://avatars0.githubusercontent.com/u/1584296?s=460&v=4"}],"prevItem":{"title":"React Selectors","permalink":"/blog/2019/04/03/react-selectors"},"nextItem":{"title":"WebdriverIO v5 Released","permalink":"/blog/2018/12/19/webdriverio-v5-released"}},"content":"Shadow DOM is one of the key browser features that make up web components. Web components are a really great way to build reusable elements, and are able to scale all the way up to complete web applications. Style encapsulation, the feature that gives shadow DOM it\'s power, has been a bit of a pain when it comes to E2E or UI testing. Things just got a little easier though, as WebdriverIO v5.5.0 introduced built-in support for shadow DOM via two new commands, [`shadow$`](https://webdriver.io/docs/api/element/shadow$.html) and [`shadow$$`](https://webdriver.io/docs/api/element/shadow$$.html). Let\'s dig into what they\'re all about.\\n\\n## History\\n\\nWith v0 of the shadow DOM spec, came the `/deep/` selector. This special selector made it possible to query inside an element\'s `shadowRoot`. Here we\'re querying for a button that is inside the `my-element` custom element\'s `shadowRoot`:\\n\\n```javascript\\n$(\'body my-element /deep/ button\');\\n```\\nThe /deep/ selector was [short lived](https://developers.google.com/web/updates/2017/10/remove-shadow-piercing), and is [rumored to be replaced](https://tabatkins.github.io/specs/css-shadow-parts/) some day.\\n\\nWith /deep/ being deprecated and subsequently removed, developers found other ways to get at their shadow elements. The typical approach was to use custom commands in WebdriverIO. These commands used the `execute` command to string together querySelector and shadowRoot.querySelector calls in order to find elements. This generally worked such that, instead of a basic string query, queries were put into arrays. Each string in the array represented a shadow boundary. Using these commands looked something like this:\\n\\n```javascript\\nconst myButton = browser.shadowDomElement([\'body my-element\', \'button\']);\\n```\\n\\nThe downside of both the `/deep/` selector and the javascript approach was that in order to find an element, the query always needed to start at the document level. This made tests a little unwieldy and hard to maintain. Code like this was not uncommon:\\n\\n```javascript\\nit(\'submits the form\', ()=> {\\n  const myInput = browser.shadowDomElement(BASE_SELECTOR.concat([\'my-deeply-nested-element\', \'input\']));\\n  const myButton = browser.shadowDomElement(BASE_SELECTOR.concat([\'my-deeply-nested-element\', \'button\']));\\n  myInput.setValue(\'test\');\\n  myButton.click();\\n});\\n```\\n\\n## The `shadow$` and `shadow$$` Commands\\nThese commands take advantage of the `$` command in WebdriverIO v5\'s ability to use a function selector. They work just like the existing [`$`](https://webdriver.io/docs/api/element/$.html) and [`$$`](https://webdriver.io/docs/api/element/$$.html) commands in that you call it on an element, but instead of querying an element\'s light DOM, they query an element\'s shadow DOM (they fall back to querying light dom if for whatever reason, you\'re not using any polyfills).\\n\\nSince they\'re element commands, it\'s no longer required to start at the root document when building your queries. Once you have an element, calling `element.shadow$(\'selector\')` queries inside that element\'s shadowRoot for the element that matches the given selector. From any element, you can chain `$` and `shadow$` commands as deeply as needed.\\n\\n## Page Objects\\nLike their counterparts, `$` and `$$`, the shadow commands make page objects a breeze to write, read and maintain. Let\'s assume we\'re working with a page that looks something like this:\\n\\n```html\\n<body>\\n  <my-app>\\n    <app-login></app-login>\\n  </my-app>\\n</body>\\n```\\nThis uses two custom elements, `my-app` and `app-login`. We can see that `my-app` is in the `body`\'s light DOM, and inside it\'s light DOM is an `app-login` element. An example of a page object to interact with this page might look like so:\\n\\n``` javascript\\nclass LoginPage {\\n\\n  open() {\\n    browser.url(\'/login\');\\n  }\\n\\n  get app() {\\n    // my-app lives in the document\'s light DOM\\n    return browser.$(\'my-app\');\\n  }\\n  get login() {\\n    // app-login lives in my-app\'s light DOM\\n    return this.app.$(\'app-login\');\\n  }\\n\\n  get usernameInput() {\\n    // the username input is inside app-login\'s shadow DOM\\n    return this.login.shadow$(\'input #username\');\\n  }\\n\\n  get passwordInput() {\\n    // the password input is inside app-login\'s shadow DOM\\n    return this.login.shadow$(\'input[type=password]\');\\n  }\\n  get submitButton() {\\n    // the submit button is inside app-login\'s shadow DOM\\n    return this.login.shadow$(\'button[type=submit]\');\\n  }\\n\\n  login(username, password) {\\n    this.login.setValue(username);\\n    this.username.setValue(password);\\n    this.submitButton.click();\\n  }\\n}\\n```\\n\\nIn the example above, you can see how it\'s easy to leverage the getter methods of your page object to drill further and further into different parts of your application. This keeps your selectors nice and focused. For example, should you decide to move the `app-login` element around, you only have to change one selector.\\n\\n\\n## Component Objects\\nFollowing the page object pattern is really powerful on its own. The big draw of web components is that you can create reusable elements. The downside with only using page objects though, is that you might end up repeating code and selectors in different page objects to be able to interact with the elements encapsulated in your web components.\\n\\n The component object pattern attempts to reduce that repetition and move the component\'s api into an object of its own. We know that in order to interact with an element\'s shadow DOM, we first need the host element. Using a base class for your component objects makes this pretty straightforward. Here\'s a bare-bones component base class that takes the `host` element in its constructor and unrolls that element\'s queries up to the browser object, so it can be reused in many page objects (or other component objects), without having to know anything about the page itself:\\n\\n```javascript\\nclass Component {\\n\\n  constructor(host) {\\n    const selectors = [];\\n    // Crawl back to the browser object, and cache all selectors\\n    while (host.elementId && host.parent) {\\n      selectors.push(host.selector);\\n      host = host.parent;\\n    }\\n    selectors.reverse();\\n    this.selectors_ = selectors;\\n  }\\n\\n  get host() {\\n    // Beginning with the browser object, reselect each element\\n    return this.selectors_.reduce((element, selector) => element.$(selector), browser);\\n  }\\n}\\n\\nmodule.exports = Component;\\n```\\n\\nWe can then write a subclass for our app-login component:\\n\\n```javascript\\nconst Component = require(\'./component\');\\n\\nclass Login extends Component {\\n\\n  get usernameInput() {\\n    return this.host.shadow$(\'input #username\');\\n  }\\n\\n  get passwordInput() {\\n    return this.host.shadow$(\'input[type=password]\');\\n  }\\n\\n  get submitButton() {\\n    return this.login.shadow$(\'button[type=submit]\');\\n  }\\n\\n  login(username, password) {\\n    this.usernameInput.setValue(username);\\n    this.passwordInput.setValue(password);\\n    this.submitButton.click();\\n  }\\n}\\n\\nmodule.exports = Login;\\n```\\n\\nFinally, we can use the component object inside our login page object:\\n\\n```javascript\\nconst Login = require(\'./components/login\');\\n\\nclass LoginPage {\\n\\n  open() {\\n    browser.url(\'/login\');\\n  }\\n\\n  get app() {\\n    return browser.$(\'my-app\');\\n  }\\n\\n  get loginComponent() {\\n    // return a new instance of our login component object\\n    return new Login(this.app.$(\'app-login\'));\\n  }\\n\\n}\\n```\\nThis component object can now be used in tests for any page or section of your app that uses an app-login web component, without having to know about how that component is structured. If you later decide to change the internal structure of the web component, you only need to update the component object.\\n\\n\\n## Future\\nCurrently the [WebDriver protocol](https://w3c.github.io/webdriver/) does not provide native support for shadow DOM, but there has been [progress](https://github.com/w3c/webdriver/pull/1320) made for it. Once the spec is finalized, WebdriverIO will implement the spec. There\'s a decent chance that the `shadow` commands will change under the hood, but I\'m pretty confident that they\'re usage will be the same as it is today, and that test code that uses them will need little to no refactoring.\\n\\n## Browser Support\\nIE11-Edge: Shadow DOM is not supported in IE or Edge, but can be polyfilled. The shadow commands work great with the polyfills.\\n\\nFirefox: Calling `setValue(value)` on an input field in Firefox results in an error, complaining that the input is \\"not reachable by keyboard\\". A workaround for now is to use a custom command (or method on your component object) that sets the input field\'s value via `browser.execute(function)`.\\n\\nSafari: WebdriverIO has some safety mechanisms to help mitigate issues with stale element references. This is a really nice feature but unfortunately Safari\'s webdriver does not provide the proper error response when attempting to interact with what in other browsers, is a stale element reference. This is unfortunate but at the same time, it\'s generally a bad practice to cache element references. Stale element references are typically completely mitigated by using the page and component object patterns outlined above.\\n\\nChrome: it just works. :tada:"},{"id":"WebdriverIO v5 Released","metadata":{"permalink":"/blog/2018/12/19/webdriverio-v5-released","editUrl":"https://github.com/Abhi6722/hackers-hub/edit/main/website/blog/blog/2018-12-19-webdriverio-v5-released.md","source":"@site/blog/2018-12-19-webdriverio-v5-released.md","title":"WebdriverIO v5 Released","description":"We are pleased to announce that a new major version of WebdriverIO has finally been released! I never thought that it would take this long (it\'s been over a year), but we can finally say that the new version of WebdriverIO is ready for use (and better than ever). There has been over 800 commits, from over 34 different contributors; and I am truly grateful to everyone who participated in this collective effort. With that being said...","date":"2018-12-19T00:00:00.000Z","formattedDate":"December 19, 2018","tags":[],"readingTime":10.675,"truncated":false,"authors":[{"name":"Christian Bromann","url":"http://twitter.com/bromann","imageURL":"https://s.gravatar.com/avatar/d98b16d7c93d15865f34a225dd4b1254?s=80"}],"prevItem":{"title":"Shadow DOM Support & reusable component objects","permalink":"/blog/2019/02/22/shadow-dom-support"}},"content":"We are pleased to announce that a new major version of WebdriverIO has finally been released! I never thought that it would take this long (it\'s been over a year), but we can finally say that the new version of WebdriverIO is ready for use (and better than ever). There has been over 800 commits, from over [34 different contributors](https://github.com/webdriverio/webdriverio/graphs/contributors); and I am truly grateful to everyone who participated in this collective effort. With that being said...\\n\\n## <center>\ud83c\udf89 \ud83c\udf89 \ud83c\udf89 Time to celebrate! \ud83c\udf89 \ud83c\udf89 \ud83c\udf89</center>\\n<div style={{ width: \'100%\', height: 0, paddingBottom: \'56%\', position: \'relative\' }}>\\n    <iframe\\n        src=\\"https://giphy.com/embed/l0MYt5jPR6QX5pnqM\\"\\n        width=\\"100%\\"\\n        height=\\"100%\\"\\n        style={{ position: \'absolute\' }}\\n        frameBorder=\\"0\\"\\n        class=\\"giphy-embed\\"\\n        allowFullScreen\\n    ></iframe>\\n</div>\\n\\n<br />\\n\\nWhen I began to practically rewrite this project from scratch [one year ago](https://github.com/webdriverio/webdriverio/commit/e375d2e3a664da087a6494c3ae381f762031303a), I knew there would be problems here and there. However, I was confident that the WebdriverIO community in the support channels would work collectively to help each other out; and I\'m proud to say, I was right!\\n\\n## The Goal\\n\\nLooking into the history of the project, it is humbling to see how much it has been grown within just a few years. From a handful of downloads a day, to now almost 50k; as well as the knowledge that big companies are relying on this tool to ship their software on daily basis, it became obvious that the next big feature had to be sustainability. The first step was made by [joining the JS.Foundation](https://twitter.com/webdriverio/status/908013968861655040) at of 2017.\\n\\n<br /><blockquote class=\\"twitter-tweet\\" data-lang=\\"de\\"><p lang=\\"en\\" dir=\\"ltr\\">Proud to announce that <a href=\\"https://twitter.com/webdriverio?ref_src=twsrc%5Etfw\\">@webdriverio</a> is joining <a href=\\"https://twitter.com/the_jsf?ref_src=twsrc%5Etfw\\">@the_jsf</a> to continue to grow as project and community \ud83c\udf89 \ud83d\udc4f <a href=\\"https://t.co/N58Iv5oC9r\\">https://t.co/N58Iv5oC9r</a></p>&mdash; WebdriverIO (@webdriverio) <a href=\\"https://twitter.com/webdriverio/status/908013968861655040?ref_src=twsrc%5Etfw\\">13. September 2017</a></blockquote><br />\\n\\nThe next step was to implement a technical infrastructure that would allow the project to grow. By reviewing other successful open source projects such as e.g. [Jest](https://jestjs.io/) or [Babel](https://babeljs.io/), we adapted a monolithic project structure to simplify the process of contributing to WebdriverIO.<br />\\n<br />\\nWe wanted to start this effort completely community driven, and began to gather [feedback](https://github.com/webdriverio/webdriverio/issues/2403) from everyone who was using WebdriverIO on daily basis. We created a [Gitter channel](https://gitter.im/webdriverio/webdriverio) in order to discuss architectural changes, and to organize the work of porting the packages into the new tech stack that was [Lerna](https://lernajs.io/).\\n\\n## New Package Structure\\n\\nAs we moved to a monolithic system we scoped all WebdriverIO packages into the [`@wdio`](https://www.npmjs.com/org/wdio) NPM organization. This would make it simpler to onboard contributors to release new package versions, and better clarifies which packages are \\"officially\\" maintained by the organization or are 3rd party community packages.<br />\\n<br />\\nIf you have been using `wdio-mocha-framework` or `wdio-spec-reporter` in your project please update the packages to use the ones built for v5: `@wdio/mocha-framework` or `@wdio/spec-reporter`. Going forward the version number of all packages are now pinned to each other; meaning that you should always have the same versions for all \\"official\\" WebdriverIO packages that you use.\\n\\n## We Did Some Spring Cleaning\\n\\nWhen people proposed new commands to the API, we contributors became more and more hesitant to introduce them. There were a vast number of existing commands; and many of these requested commands provided very little difference from existing commands. This was beginning to become a maintenance nightmare.<br />\\n<br />\\nStarting with v5 we created a \\"base\\" WebdriverIO package called [`webdriver`](https://www.npmjs.com/package/webdriver). It contains the bare logic to make a HTTP request to a WebDriver endpoint; and includes all of the commands from [various specifications](https://github.com/webdriverio/webdriverio/tree/main/packages/webdriver/protocol) (including the [WebDriver](https://w3c.github.io/webdriver/) spec as well as Appium\'s [Mobile JSONWire protocol](https://github.com/SeleniumHQ/mobile-spec/blob/master/spec-draft.md)) defined in a simple to maintain JSON object.<br />\\n<br />\\nAs part of that effort we\'ve renamed many of the commands in order to align them closer to the pattern that has been used in the protocol. The base WebDriver client now also returns the `value` property of all protocol command responses, so that we were able to get rid of a lot of redundancy (e.g. `title` is now called with `getTitle`).<br />\\n<br />\\nAdditionally, we have seen significant confusion regarding the WebdriverIO API, and the fact that it sometimes took selectors as a first argument, and sometimes not. This was causing various problems e.g. building a consistent and useful TypeScript definition for it. In the new version __we got rid of selectors as command parameters__, and enforced the difference between commands only accessible from the browser/client instance, and those from the element instance. In order to click on an element, you must now first fetch it, and then call the click command on that instance, e.g.\\n\\n```js\\nbrowser.click(\'#elem\') // throws \'browser.click is not a function\'\\n\\nconst elem = $(\'#elem\')\\nelem.click() // clicks successfully on the element\\n// or\\n$(\'#elem\').click()\\n\\nelem.url(\'https://webdriver.io\') // throws because the url command is scoped on the browser object\\n```\\n\\n## Website Changes\\n\\nWe already had an automated system that generated the docs for our website. As part of the new architecture and tech stack we however ported this from [Hexo](https://hexo.io/) to [Docusaurus](https://docusaurus.io/).<br />\\n<br />\\nWe are still in the process of finalizing this effort, as we want to continue providing everyone a way to easily [change the version](https://github.com/webdriverio/webdriverio/issues/3147) of the docs. We are also looking into [providing multiple translations](https://github.com/webdriverio/webdriverio/issues/3148) of the docs so that people who don\'t speak english can better understand and use WebdriverIO. Please reach out to us on [Twitter](https://twitter.com/webdriverio), or directly on the issue thread if you want to help out. This is probably one of the best ways to get involved into an open source project.\\n\\n## How To Upgrade To v5\\n\\nThere are significantly more things that we have been working on over the last year that you might like to read about. Check out the official [changelog](https://github.com/webdriverio/webdriverio/blob/main/CHANGELOG.md#v500-2018-12-20) to find all of the changes that describe the new version. We will probably continue to update this over time, as we weren\'t able to keep a list of every detail that changed. We would also like to ask you to have a look into the new [guide section](https://webdriver.io/docs/gettingstarted.html) and our updated docs in general.<br />\\n<br />\\nThere is unfortunately no easy upgrade tool that you can download and run to update your test suites from v4 to v5 (even though we would love to have such a thing, PRs are welcome \ud83d\ude09). If you run into any issues upgrading to v5 please join our support [![Gitter](https://badges.gitter.im/webdriverio/webdriverio.svg)](https://gitter.im/webdriverio/webdriverio?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge) and reach out to us.<br />\\n<br />\\nEvery project is different, so it is impossible to have one single guide for everyone. However, the following step by step description will help you get closer to where you need to be:<br />\\n<br />\\n- read the [changelog](https://github.com/webdriverio/webdriverio/blob/main/CHANGELOG.md#v500-2018-12-20) to understand all breaking changes\\n- remove all `wdio-*` packages from your `package.json`\\n- remove your `node_modules` directory\\n- install the latest version of webdriverio: `$ npm install webdriverio@latest`\\n- install the new wdio testrunner: `$ npm install @wdio/cli --save-dev`\\n- if you have a `wdio.conf.js` in your root directory, create a backup: `$ cp wdio.conf.js wdio_backup.conf.js`\\n- rerun the configuration wizard: `$ npx wdio config`\\n- merge custom modifications of your old `wdio_backup.conf.js` into your new config file. Don\'t merge everything at once - just begin with the basic setup using no services and just the e.g. spec reporter to run tests locally and work towards a full migration\\n- take the simplest test in your suite and rename the commands according to the changelog\\n- have your log directory set in your config (e.g. `outputDir: __dirname`) to ensure you can see everything that is going on including errors (you can later set it to a proper log directory)\\n- attempt to run the the test suite you modified `$ npx wdio wdio.conf.js --spec ./path/to/modified/test.js`\\n- repeat on your remaining test files\\n- add reporters and services back into your `wdio.conf.js`, and see if they work as expected (__Note:__ it is possible that services or reporters that you have used aren\'t ported to v5 yet, if so, please raise an issue in the repository of that community package or try to port it)\\n\\n<br />If you have issues porting your test suite, check the issues thread to see if someone has already reported the same problem; and then reach out to us on our gitter channel. We may have missed porting / not yet ported a functionality that you have been using in your test. Thanks to the new project structure, we can quickly fix this and provide an update version for you!<br />\\n<br />\\nWe will release further blog articles in our new blog with tutorials on how to upgrade WebdriverIO to v5 soon. You can also checkout the excellent [video series](https://www.youtube.com/watch?v=MO8xeC-w2Og&list=PL8HowI-L-3_9Ep7lxVrRDF-az5ku4sur_) from our beloved [Will Brock](https://twitter.com/willbrock) on the new release. An update to the [WebdriverIO Learning Course](https://learn.webdriver.io/) is also already in work.\\n\\n## What Is Next\\n\\nWe didn\'t put put all this hard work into the project to end here. Instead, we just get started. We truly believe that [WebDriver](https://www.w3.org/TR/webdriver1/) is and always will be the automation standard of the industry. Therefore we are actively engaged in contributing to the standard to ensure that all commands are compliant to the protocols. We also will take your common problems and general feedback back to the [W3C Working Groups](https://www.w3.org/testing/browser/) in order to ensure that we can address major issues at the core of the technology.\\n\\n<br /><blockquote class=\\"twitter-tweet\\" data-lang=\\"de\\"><p lang=\\"en\\" dir=\\"ltr\\">To ensure that <a href=\\"https://twitter.com/webdriverio?ref_src=twsrc%5Etfw\\">@webdriverio</a> is always conforming to the <a href=\\"https://twitter.com/hashtag/WebDriver?src=hash&amp;ref_src=twsrc%5Etfw\\">#WebDriver</a> standard, it will sends its representatives directly to the <a href=\\"https://twitter.com/w3c?ref_src=twsrc%5Etfw\\">@w3c</a> TPAC meetings so you can use the latest features as soon as they are available \ud83d\ude4c\ud83c\udffb <a href=\\"https://t.co/oJbHPn99Oc\\">pic.twitter.com/oJbHPn99Oc</a></p>&mdash; WebdriverIO (@webdriverio) <a href=\\"https://twitter.com/webdriverio/status/1055813210480238593?ref_src=twsrc%5Etfw\\">26. October 2018</a></blockquote><br />\\n\\nAfter the release, we will be begin working on a detailed roadmap for the next year that allows you to participate in the progress and help us prioritizing features.\\n\\n## An Open Source Project Made With \u2764\ufe0f\\n\\nBefore I close up this blog post, I want to address that WebdriverIO is an open source project maintained by dedicated people who love open source. Often, I get the feeling that people take this work for granted and forget that there are real humans spending their free time to provide some piece of software to everyone for free. As [@left_pad](https://twitter.com/left_pad) stated in the official Babel7 release:\\n\\n<blockquote>\\"[...] I can only describe it as dread when seeing a message from someone online wondering why something hasn\'t been released while another asks why this bug isn\'t fixed yet. I want to just rush it out and be done with it but I also have a desire to take this seriously.\\"</blockquote>\\n\\nPlease always be reminded that when you open an issue or ask for a feature that you are basically asking someone to spend his time on something to give you exactly that for free! Open source project can only work and survive if everyone participates and helps out with something. We are all humans and bugs happen, if you find them, please let us know in a way that we can easily work with the information and quickly fix it. It\'s even better if everyone once in a while takes some time of his day to contribute back. We are maintaining [a list](https://github.com/webdriverio/webdriverio/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3A%22good+first+pick%22) of well described issues that anyone can claim and start working on.<br />\\n<br />\\nAgain, this project is not sponsored nor owned by any company. It is a collaborative effort of an inclusive community that loves to help each other out. Let\'s continue to stay exactly that!\\n\\n## Thank You\\n\\nFinally, I want to thank a few people that have helped to make this release happen; and/or for being such great people in the community. First, I want to thank all [34](https://github.com/webdriverio/webdriverio/graphs/contributors) contributors that participated in making this happen, as well as all the other [328](https://github.com/webdriverio-boneyard/v4/graphs/contributors) people that have been collaborating since the beginning.<br />\\n<br />\\nI personally want to thank [Kevin Lamping](https://twitter.com/klamping) for making a stellar [online learning course](https://learn.webdriver.io/) as well as so so much other great content on [YouTube](https://t.co/WX6flUsZ8e) over the last few years. As mentioned above - also a big thank you to [Will Brock](https://twitter.com/willbrock) for his [video course](https://www.youtube.com/watch?v=MO8xeC-w2Og&list=PL8HowI-L-3_9Ep7lxVrRDF-az5ku4sur_) on the new release.\\n\\nI want to thank everyone who has been deeply involved in the support channel helping people out on daily basis. With over 3500 users it became impossible for me to answer everyone on the level I did before. Thank you [Erwin Heitzman](https://github.com/erwinheitzman), [Tu Huynh](https://github.com/TuHuynhVan), [Jim Davis](https://twitter.com/fijijavis), [Xu Cao](https://github.com/caoxu2000), [Boris Osipov](https://github.com/BorisOsipov) and [Wim Selles](https://twitter.com/wswebcreation).\\n\\nBig shoutout to [Daniel Chivescu](https://twitter.com/iamdanchiv) and [Josh Cypher](https://twitter.com/joshuacypher) who have been giving talks on WebdriverIO around the world.<br />\\n<br />\\nAnd last but not least thank you [Adam Bjerstedt](https://github.com/abjerstedt), who has not only been helping out in the community channel; but also for helping to push out the v5 release at the end.<br />\\n<br />\\n\ud83d\ude4f\\n\\n<script async src=\\"https://platform.twitter.com/widgets.js\\" charset=\\"utf-8\\"><\/script>"}]}')}}]);