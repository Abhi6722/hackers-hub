"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6864],{4137:function(e,t,r){r.d(t,{Zo:function(){return p},kt:function(){return m}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),u=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},p=function(e){var t=u(e.components);return n.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=u(r),m=a,h=d["".concat(l,".").concat(m)]||d[m]||c[m]||i;return r?n.createElement(h,s(s({ref:t},p),{},{components:r})):n.createElement(h,s({ref:t},p))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,s=new Array(i);s[0]=d;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:a,s[1]=o;for(var u=2;u<i;u++)s[u]=r[u];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},8448:function(e,t,r){var n=r(7294);t.Z=function(e){var t=e.children,r=e.hidden,a=e.className;return n.createElement("div",{role:"tabpanel",hidden:r,className:a},t)}},7225:function(e,t,r){r.d(t,{Z:function(){return d}});var n=r(7462),a=r(7294),i=r(1048),s=r(2713);var o=function(){var e=(0,a.useContext)(s.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e},l=r(3309),u=r(6010),p="tabItem_vU9c";function c(e){var t,r,n,i=e.lazy,s=e.block,c=e.defaultValue,d=e.values,m=e.groupId,h=e.className,b=a.Children.map(e.children,(function(e){if((0,a.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),v=null!=d?d:b.map((function(e){var t=e.props;return{value:t.value,label:t.label}})),k=(0,l.lx)(v,(function(e,t){return e.value===t.value}));if(k.length>0)throw new Error('Docusaurus error: Duplicate values "'+k.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var f=null===c?c:null!=(t=null!=c?c:null==(r=b.find((function(e){return e.props.default})))?void 0:r.props.value)?t:null==(n=b[0])?void 0:n.props.value;if(null!==f&&!v.some((function(e){return e.value===f})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+f+'" but none of its children has the corresponding value. Available values are: '+v.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var w=o(),g=w.tabGroupChoices,y=w.setTabGroupChoices,N=(0,a.useState)(f),q=N[0],x=N[1],C=[],O=(0,l.o5)().blockElementScrollPositionUntilNextRender;if(null!=m){var T=g[m];null!=T&&T!==q&&v.some((function(e){return e.value===T}))&&x(T)}var E=function(e){var t=e.currentTarget,r=C.indexOf(t),n=v[r].value;n!==q&&(O(t),x(n),null!=m&&y(m,n))},S=function(e){var t,r=null;switch(e.key){case"ArrowRight":var n=C.indexOf(e.currentTarget)+1;r=C[n]||C[0];break;case"ArrowLeft":var a=C.indexOf(e.currentTarget)-1;r=C[a]||C[C.length-1]}null==(t=r)||t.focus()};return a.createElement("div",{className:"tabs-container"},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,u.Z)("tabs",{"tabs--block":s},h)},v.map((function(e){var t=e.value,r=e.label;return a.createElement("li",{role:"tab",tabIndex:q===t?0:-1,"aria-selected":q===t,className:(0,u.Z)("tabs__item",p,{"tabs__item--active":q===t}),key:t,ref:function(e){return C.push(e)},onKeyDown:S,onFocus:E,onClick:E},null!=r?r:t)}))),i?(0,a.cloneElement)(b.filter((function(e){return e.props.value===q}))[0],{className:"margin-vert--md"}):a.createElement("div",{className:"margin-vert--md"},b.map((function(e,t){return(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==q})}))))}function d(e){var t=(0,i.Z)();return a.createElement(c,(0,n.Z)({key:String(t)},e))}},2713:function(e,t,r){var n=(0,r(7294).createContext)(void 0);t.Z=n},8669:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return o},contentTitle:function(){return l},metadata:function(){return u},toc:function(){return p},default:function(){return d}});var n=r(7462),a=r(3366),i=(r(7294),r(4137)),s=(r(7225),r(8448),["components"]),o={id:"wdio-intercept-service",title:"Intercept Service",custom_edit_url:"https://github.com/chmanie/wdio-intercept-service/edit/master//README.md"},l=void 0,u={unversionedId:"wdio-intercept-service",id:"wdio-intercept-service",isDocsHomePage:!1,title:"Intercept Service",description:"wdio-intercept-service is a 3rd party package, for more information please see GitHub | npm",source:"@site/docs/_wdio-intercept-service.md",sourceDirName:".",slug:"/wdio-intercept-service",permalink:"/docs/wdio-intercept-service",editUrl:"https://github.com/chmanie/wdio-intercept-service/edit/master//README.md",tags:[],version:"current",frontMatter:{id:"wdio-intercept-service",title:"Intercept Service",custom_edit_url:"https://github.com/chmanie/wdio-intercept-service/edit/master//README.md"},sidebar:"docs",previous:{title:"ChromeDriver Service",permalink:"/docs/wdio-chromedriver-service"},next:{title:"Zafira Listener Service",permalink:"/docs/wdio-zafira-listener-service"}},p=[{value:"Prerequisites",id:"prerequisites",children:[],level:2},{value:"Installation",id:"installation",children:[],level:2},{value:"Usage",id:"usage",children:[{value:"Usage with WebDriver CLI",id:"usage-with-webdriver-cli",children:[],level:3},{value:"Usage with WebDriver Standalone",id:"usage-with-webdriver-standalone",children:[],level:3}],level:2},{value:"Quickstart",id:"quickstart",children:[],level:2},{value:"Supported browsers",id:"supported-browsers",children:[],level:2},{value:"API",id:"api",children:[{value:"browser.setupInterceptor()",id:"browsersetupinterceptor",children:[],level:3},{value:"browser.expectRequest(method: string, url: string, statusCode: number)",id:"browserexpectrequestmethod-string-url-string-statuscode-number",children:[],level:3},{value:"browser.getExpectations()",id:"browsergetexpectations",children:[],level:3},{value:"browser.resetExpectations()",id:"browserresetexpectations",children:[],level:3},{value:"browser.assertRequests()",id:"browserassertrequests",children:[],level:3},{value:"browser.assertExpectedRequestsOnly(inOrder?: boolean)",id:"browserassertexpectedrequestsonlyinorder-boolean",children:[],level:3},{value:"browser.getRequest(index: number)",id:"browsergetrequestindex-number",children:[],level:3},{value:"browser.getRequests()",id:"browsergetrequests",children:[],level:3}],level:2},{value:"TypeScript support",id:"typescript-support",children:[],level:2},{value:"Running the tests",id:"running-the-tests",children:[],level:2},{value:"Contributing",id:"contributing",children:[],level:2},{value:"License",id:"license",children:[],level:2}],c={toc:p};function d(e){var t=e.components,r=(0,a.Z)(e,s);return(0,i.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"wdio-intercept-service is a 3rd party package, for more information please see ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/chmanie/wdio-intercept-service"},"GitHub")," | ",(0,i.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/wdio-intercept-service"},"npm"))),(0,i.kt)("p",null,"\ud83d\udd78 Capture and assert HTTP ajax calls in ",(0,i.kt)("a",{parentName:"p",href:"http://webdriver.io/"},"webdriver.io")),(0,i.kt)("p",null,"This is a plugin for ",(0,i.kt)("a",{parentName:"p",href:"http://webdriver.io/"},"webdriver.io"),". If you don't know it yet, check it out, it's pretty cool."),(0,i.kt)("p",null,"Although selenium and webdriver are used for e2e and especially UI testing, you might want to assess HTTP requests done by your client code (e.g. when you don't have immediate UI feedback, like in metrics or tracking calls). With wdio-intercept-service you can intercept ajax HTTP calls initiated by some user action (e.g. a button press, etc.) and make assertions about the request and corresponding resposes later."),(0,i.kt)("p",null,"There's one catch though: you can't intercept HTTP calls that are initiated on page load (like in most SPAs), as it requires some setup work that can only be done after the page is loaded (due to limitations in selenium). ",(0,i.kt)("strong",{parentName:"p"},"That means you can just capture requests that were initiated inside a test.")," If you're fine with that, this plugin might be for you, so read on."),(0,i.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"webdriver.io ",(0,i.kt)("strong",{parentName:"li"},"v5.x"),".")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Heads up! If you're still using webdriver.io v4, please use the v2.x branch of this plugin!")),(0,i.kt)("h2",{id:"installation"},"Installation"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"npm install wdio-intercept-service -D\n")),(0,i.kt)("h2",{id:"usage"},"Usage"),(0,i.kt)("h3",{id:"usage-with-webdriver-cli"},"Usage with WebDriver CLI"),(0,i.kt)("p",null,"It should be as easy as adding wdio-intercept-service to your ",(0,i.kt)("inlineCode",{parentName:"p"},"wdio.conf.js"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"exports.config = {\n  // ...\n  services: ['intercept']\n  // ...\n};\n")),(0,i.kt)("p",null,"and you're all set."),(0,i.kt)("h3",{id:"usage-with-webdriver-standalone"},"Usage with WebDriver Standalone"),(0,i.kt)("p",null,"When using WebdriverIO Standalone, the ",(0,i.kt)("inlineCode",{parentName:"p"},"before")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"beforeTest")," / ",(0,i.kt)("inlineCode",{parentName:"p"},"beforeScenario")," functions need to be called manually."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"import { remote } from 'webdriverio';\nimport WebdriverAjax from 'wdio-intercept-service'\n\nconst WDIO_OPTIONS = {\n  port: 9515,\n  path: '/',\n  capabilities: {\n    browserName: 'chrome'\n  },\n}\n\nlet browser;\nconst interceptServiceLauncher = WebdriverAjax();\n\nbeforeAll(async () => {\n  browser = await remote(WDIO_OPTIONS)\n  interceptServiceLauncher.before(null, null, browser)\n})\n\nbeforeEach(async () => {\n  interceptServiceLauncher.beforeTest()\n})\n\nafterAll(async () => {\n  await client.deleteSession()\n});\n\ndescribe('', async () => {\n  ... // See example usage\n});\n")),(0,i.kt)("p",null,"Once initialized, some related functions are added to your browser command chain (see ",(0,i.kt)("a",{parentName:"p",href:"#api"},"API"),")."),(0,i.kt)("h2",{id:"quickstart"},"Quickstart"),(0,i.kt)("p",null,"Example usage:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"browser.url('http://foo.bar');\nbrowser.setupInterceptor(); // capture ajax calls\nbrowser.expectRequest('GET', '/api/foo', 200); // expect GET request to /api/foo with 200 statusCode\nbrowser.expectRequest('POST', '/api/foo', 400); // expect POST request to /api/foo with 400 statusCode\nbrowser.expectRequest('GET', /\\/api\\/foo/, 200); // can validate a URL with regex, too\nbrowser.click('#button'); // button that initiates ajax request\nbrowser.pause(1000); // maybe wait a bit until request is finished\nbrowser.assertRequests(); // validate the requests\n")),(0,i.kt)("p",null,"Get details about requests:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"browser.url('http://foo.bar')\nbrowser.setupInterceptor();\nbrowser.click('#button')\nbrowser.pause(1000);\n\nvar request = browser.getRequest(0);\nassert.equal(request.method, 'GET');\nassert.equal(request.response.headers['content-length'], '42');\n")),(0,i.kt)("h2",{id:"supported-browsers"},"Supported browsers"),(0,i.kt)("p",null,"It should work with somewhat newer versions of all browsers. Please report an issue if it doesn't seem to work with yours."),(0,i.kt)("h2",{id:"api"},"API"),(0,i.kt)("h3",{id:"browsersetupinterceptor"},"browser.setupInterceptor()"),(0,i.kt)("p",null,"Captures ajax calls in the browser. You always have to call the setup function in order to assess requests later."),(0,i.kt)("h3",{id:"browserexpectrequestmethod-string-url-string-statuscode-number"},"browser.expectRequest(method: string, url: string, statusCode: number)"),(0,i.kt)("p",null,"Make expectations about the ajax requests that are going to be initiated during the test. Can (and should) be chained. The order of the expectations should map to the order of the requests being made."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"method")," (",(0,i.kt)("inlineCode",{parentName:"li"},"String"),"): http method that is expected. Can be anything ",(0,i.kt)("inlineCode",{parentName:"li"},"xhr.open()")," accepts as first argument."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"url")," (",(0,i.kt)("inlineCode",{parentName:"li"},"String"),"|",(0,i.kt)("inlineCode",{parentName:"li"},"RegExp"),"): exact URL that is called in the request as a string or RegExp to match"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"statusCode")," (",(0,i.kt)("inlineCode",{parentName:"li"},"Number"),"): expected status code of the response")),(0,i.kt)("h3",{id:"browsergetexpectations"},"browser.getExpectations()"),(0,i.kt)("p",null,"Helper method. Returns all the expectations you've made up until that point"),(0,i.kt)("h3",{id:"browserresetexpectations"},"browser.resetExpectations()"),(0,i.kt)("p",null,"Helper method. Resets all the expectations you've made up until that point"),(0,i.kt)("h3",{id:"browserassertrequests"},"browser.assertRequests()"),(0,i.kt)("p",null,"Call this method when all expected ajax requests are finished. It compares the expectations to the actual requests made and asserts the following:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Count of the requests that were made"),(0,i.kt)("li",{parentName:"ul"},"The order of the requests"),(0,i.kt)("li",{parentName:"ul"},"The method, the URL and the statusCode should match for every request made")),(0,i.kt)("h3",{id:"browserassertexpectedrequestsonlyinorder-boolean"},"browser.assertExpectedRequestsOnly(inOrder?: boolean)"),(0,i.kt)("p",null,"Similar to ",(0,i.kt)("inlineCode",{parentName:"p"},"browser.assertRequests"),", but validates only the requests you specify in your ",(0,i.kt)("inlineCode",{parentName:"p"},"expectRequest")," directives, without having to map out all the network requests that might happen around that. If ",(0,i.kt)("inlineCode",{parentName:"p"},"inOrder")," equals to ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," (default), the requests are expected to be made in the same order as they were setup with ",(0,i.kt)("inlineCode",{parentName:"p"},"expectRequest"),"."),(0,i.kt)("h3",{id:"browsergetrequestindex-number"},"browser.getRequest(index: number)"),(0,i.kt)("p",null,"To make more sophisticated assertions about a specific request you can get details for a specific request after it is finished. You have to provide the index of the request you want to access in the order the requests were initiated (starting with 0)."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"index")," (",(0,i.kt)("inlineCode",{parentName:"li"},"Number"),"): number of the request you want to access")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Returns")," ",(0,i.kt)("inlineCode",{parentName:"p"},"request")," object:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"request.url"),": requested URL"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"request.method"),": used HTTP method"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"request.body"),": payload/body data used in request"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"request.headers"),": request http headers as JS object"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"request.response.headers"),": response http headers as JS object"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"request.response.body"),": response body (will be parsed as JSON if possible)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"request.response.statusCode"),": response status code")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"A note on ",(0,i.kt)("inlineCode",{parentName:"strong"},"request.body"),":")," wdio-intercept-service will try to parse the request body as follows:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"string: Just return the string (",(0,i.kt)("inlineCode",{parentName:"li"},"'value'"),")"),(0,i.kt)("li",{parentName:"ul"},"JSON: Parse the JSON object using ",(0,i.kt)("inlineCode",{parentName:"li"},"JSON.parse()")," (",(0,i.kt)("inlineCode",{parentName:"li"},"({ key: value })"),")"),(0,i.kt)("li",{parentName:"ul"},"FormData: Will output the FormData in the format ",(0,i.kt)("inlineCode",{parentName:"li"},"{ key: [value1, value2, ...] }")),(0,i.kt)("li",{parentName:"ul"},"ArrayBuffer: Will try to convert the buffer to a string (experimental)"),(0,i.kt)("li",{parentName:"ul"},"Anything else: Will use a brutal ",(0,i.kt)("inlineCode",{parentName:"li"},"JSON.stringify()")," on your data. Good luck!")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"For the ",(0,i.kt)("inlineCode",{parentName:"strong"},"fetch")," API, we only support string and JSON data!")),(0,i.kt)("h3",{id:"browsergetrequests"},"browser.getRequests()"),(0,i.kt)("p",null,"Get all captured requests as an array."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Returns")," array of ",(0,i.kt)("inlineCode",{parentName:"p"},"request")," objects."),(0,i.kt)("h2",{id:"typescript-support"},"TypeScript support"),(0,i.kt)("p",null,"This plugin provides its own TS types. Just point your tsconfig to the type extensions like mentioned ",(0,i.kt)("a",{parentName:"p",href:"https://webdriver.io/docs/typescript.html#framework-types"},"here"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'"compilerOptions": {\n    // ..\n    "types": ["node", "webdriverio", "wdio-intercept-service"]\n},\n')),(0,i.kt)("h2",{id:"running-the-tests"},"Running the tests"),(0,i.kt)("p",null,"A recent version of Chrome is required to run the tests locally. You may need to update the ",(0,i.kt)("inlineCode",{parentName:"p"},"chromedriver")," dependency to match the version installed on your system."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"npm test\n")),(0,i.kt)("h2",{id:"contributing"},"Contributing"),(0,i.kt)("p",null,"I'm happy for every contribution. Just open an issue or directly file a PR.",(0,i.kt)("br",{parentName:"p"}),"\n","Please note that this interceptor library is written to work with legacy browsers such as Internet Explorer. As such, any code used in ",(0,i.kt)("inlineCode",{parentName:"p"},"lib/interceptor.js")," must at least be parseable by Internet Explorer's JavaScript runtime."),(0,i.kt)("h2",{id:"license"},"License"),(0,i.kt)("p",null,"MIT"))}d.isMDXComponent=!0}}]);