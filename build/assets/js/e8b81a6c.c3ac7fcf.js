"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8379],{4137:function(e,t,a){a.d(t,{Zo:function(){return u},kt:function(){return m}});var n=a(7294);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,l=function(e,t){if(null==e)return{};var a,n,l={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(l[a]=e[a]);return l}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var s=n.createContext({}),c=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},u=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var a=e.components,l=e.mdxType,i=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),p=c(a),m=l,h=p["".concat(s,".").concat(m)]||p[m]||d[m]||i;return a?n.createElement(h,r(r({ref:t},u),{},{components:a})):n.createElement(h,r({ref:t},u))}));function m(e,t){var a=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var i=a.length,r=new Array(i);r[0]=p;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:l,r[1]=o;for(var c=2;c<i;c++)r[c]=a[c];return n.createElement.apply(null,r)}return n.createElement.apply(null,a)}p.displayName="MDXCreateElement"},8448:function(e,t,a){var n=a(7294);t.Z=function(e){var t=e.children,a=e.hidden,l=e.className;return n.createElement("div",{role:"tabpanel",hidden:a,className:l},t)}},7225:function(e,t,a){a.d(t,{Z:function(){return p}});var n=a(7462),l=a(7294),i=a(1048),r=a(2713);var o=function(){var e=(0,l.useContext)(r.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e},s=a(3309),c=a(6010),u="tabItem_vU9c";function d(e){var t,a,n,i=e.lazy,r=e.block,d=e.defaultValue,p=e.values,m=e.groupId,h=e.className,v=l.Children.map(e.children,(function(e){if((0,l.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),k=null!=p?p:v.map((function(e){var t=e.props;return{value:t.value,label:t.label}})),g=(0,s.lx)(k,(function(e,t){return e.value===t.value}));if(g.length>0)throw new Error('Docusaurus error: Duplicate values "'+g.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var b=null===d?d:null!=(t=null!=d?d:null==(a=v.find((function(e){return e.props.default})))?void 0:a.props.value)?t:null==(n=v[0])?void 0:n.props.value;if(null!==b&&!k.some((function(e){return e.value===b})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+b+'" but none of its children has the corresponding value. Available values are: '+k.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var f=o(),w=f.tabGroupChoices,N=f.setTabGroupChoices,x=(0,l.useState)(b),y=x[0],C=x[1],j=[],H=(0,s.o5)().blockElementScrollPositionUntilNextRender;if(null!=m){var U=w[m];null!=U&&U!==y&&k.some((function(e){return e.value===U}))&&C(U)}var E=function(e){var t=e.currentTarget,a=j.indexOf(t),n=k[a].value;n!==y&&(H(t),C(n),null!=m&&N(m,n))},T=function(e){var t,a=null;switch(e.key){case"ArrowRight":var n=j.indexOf(e.currentTarget)+1;a=j[n]||j[0];break;case"ArrowLeft":var l=j.indexOf(e.currentTarget)-1;a=j[l]||j[j.length-1]}null==(t=a)||t.focus()};return l.createElement("div",{className:"tabs-container"},l.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,c.Z)("tabs",{"tabs--block":r},h)},k.map((function(e){var t=e.value,a=e.label;return l.createElement("li",{role:"tab",tabIndex:y===t?0:-1,"aria-selected":y===t,className:(0,c.Z)("tabs__item",u,{"tabs__item--active":y===t}),key:t,ref:function(e){return j.push(e)},onKeyDown:T,onFocus:E,onClick:E},null!=a?a:t)}))),i?(0,l.cloneElement)(v.filter((function(e){return e.props.value===y}))[0],{className:"margin-vert--md"}):l.createElement("div",{className:"margin-vert--md"},v.map((function(e,t){return(0,l.cloneElement)(e,{key:t,hidden:e.props.value!==y})}))))}function p(e){var t=(0,i.Z)();return l.createElement(d,(0,n.Z)({key:String(t)},e))}},2713:function(e,t,a){var n=(0,a(7294).createContext)(void 0);t.Z=n},8965:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return o},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return u},default:function(){return p}});var n=a(7462),l=a(3366),i=(a(7294),a(4137)),r=(a(7225),a(8448),["components"]),o={id:"expect-webdriverio",title:"Expect",custom_edit_url:"https://github.com/webdriverio/expect-webdriverio/edit/master//README.md"},s=void 0,c={unversionedId:"api/expect-webdriverio",id:"api/expect-webdriverio",isDocsHomePage:!1,title:"Expect",description:'When you\'re writing tests, you often need to check that values meet certain conditions. expect gives you access to a number of "matchers" that let you validate different things on the browser, an element or mock object.',source:"@site/docs/api/_expect-webdriverio.md",sourceDirName:"api",slug:"/api/expect-webdriverio",permalink:"/docs/api/expect-webdriverio",editUrl:"https://github.com/webdriverio/expect-webdriverio/edit/master//README.md",tags:[],version:"current",frontMatter:{id:"expect-webdriverio",title:"Expect",custom_edit_url:"https://github.com/webdriverio/expect-webdriverio/edit/master//README.md"},sidebar:"api",previous:{title:"Introduction",permalink:"/docs/api"},next:{title:"WebDriver Protocol",permalink:"/docs/api/webdriver"}},u=[{value:"Default Options",id:"default-options",children:[{value:"Matcher Options",id:"matcher-options",children:[{value:"Command Options",id:"command-options",children:[],level:5},{value:"String Options",id:"string-options",children:[],level:5},{value:"Number Options",id:"number-options",children:[],level:5}],level:3}],level:2},{value:"Browser Matchers",id:"browser-matchers",children:[{value:"toHaveUrl",id:"tohaveurl",children:[{value:"Usage",id:"usage",children:[],level:5}],level:3},{value:"toHaveUrlContaining",id:"tohaveurlcontaining",children:[{value:"Usage",id:"usage-1",children:[],level:5}],level:3},{value:"toHaveTitle",id:"tohavetitle",children:[{value:"Usage",id:"usage-2",children:[],level:5}],level:3},{value:"toHaveTitleContaining",id:"tohavetitlecontaining",children:[{value:"Usage",id:"usage-3",children:[],level:5}],level:3}],level:2},{value:"Element Matchers",id:"element-matchers",children:[{value:"toBeDisplayed",id:"tobedisplayed",children:[{value:"Usage",id:"usage-4",children:[],level:5}],level:3},{value:"toExist",id:"toexist",children:[{value:"Usage",id:"usage-5",children:[],level:5}],level:3},{value:"toBePresent",id:"tobepresent",children:[{value:"Usage",id:"usage-6",children:[],level:5}],level:3},{value:"toBeExisting",id:"tobeexisting",children:[{value:"Usage",id:"usage-7",children:[],level:5}],level:3},{value:"toBeFocused",id:"tobefocused",children:[{value:"Usage",id:"usage-8",children:[],level:5}],level:3},{value:"toHaveAttribute",id:"tohaveattribute",children:[{value:"Usage",id:"usage-9",children:[],level:5}],level:3},{value:"toHaveAttr",id:"tohaveattr",children:[{value:"Usage",id:"usage-10",children:[],level:5}],level:3},{value:"toHaveAttributeContaining",id:"tohaveattributecontaining",children:[{value:"Usage",id:"usage-11",children:[],level:5}],level:3},{value:"toHaveAttrContaining",id:"tohaveattrcontaining",children:[{value:"Usage",id:"usage-12",children:[],level:5}],level:3},{value:"toHaveElementClass",id:"tohaveelementclass",children:[{value:"Usage",id:"usage-13",children:[],level:5}],level:3},{value:"toHaveElementClassContaining",id:"tohaveelementclasscontaining",children:[{value:"Usage",id:"usage-14",children:[],level:5}],level:3},{value:"toHaveElementProperty",id:"tohaveelementproperty",children:[{value:"Usage",id:"usage-15",children:[],level:5}],level:3},{value:"toHaveValue",id:"tohavevalue",children:[{value:"Usage",id:"usage-16",children:[],level:5}],level:3},{value:"toHaveValueContaining",id:"tohavevaluecontaining",children:[{value:"Usage",id:"usage-17",children:[],level:5}],level:3},{value:"toBeClickable",id:"tobeclickable",children:[{value:"Usage",id:"usage-18",children:[],level:5}],level:3},{value:"toBeDisabled",id:"tobedisabled",children:[{value:"Usage",id:"usage-19",children:[],level:5}],level:3},{value:"toBeEnabled",id:"tobeenabled",children:[{value:"Usage",id:"usage-20",children:[],level:5}],level:3},{value:"toBeSelected",id:"tobeselected",children:[{value:"Usage",id:"usage-21",children:[],level:5}],level:3},{value:"toBeChecked",id:"tobechecked",children:[{value:"Usage",id:"usage-22",children:[],level:5}],level:3},{value:"toHaveHref",id:"tohavehref",children:[{value:"Usage",id:"usage-23",children:[],level:5}],level:3},{value:"toHaveLink",id:"tohavelink",children:[{value:"Usage",id:"usage-24",children:[],level:5}],level:3},{value:"toHaveHrefContaining",id:"tohavehrefcontaining",children:[{value:"Usage",id:"usage-25",children:[],level:5}],level:3},{value:"toHaveLinkContaining",id:"tohavelinkcontaining",children:[{value:"Usage",id:"usage-26",children:[],level:5}],level:3},{value:"toHaveId",id:"tohaveid",children:[{value:"Usage",id:"usage-27",children:[],level:5}],level:3},{value:"toHaveText",id:"tohavetext",children:[{value:"Usage",id:"usage-28",children:[],level:5}],level:3},{value:"toHaveTextContaining",id:"tohavetextcontaining",children:[{value:"Usage",id:"usage-29",children:[],level:5}],level:3},{value:"toBeDisplayedInViewport",id:"tobedisplayedinviewport",children:[{value:"Usage",id:"usage-30",children:[],level:5}],level:3},{value:"toHaveChildren",id:"tohavechildren",children:[{value:"Usage",id:"usage-31",children:[],level:5}],level:3},{value:"toBeElementsArrayOfSize",id:"tobeelementsarrayofsize",children:[{value:"Usage",id:"usage-32",children:[],level:5}],level:3}],level:2},{value:"Network Matchers",id:"network-matchers",children:[{value:"toBeRequested",id:"toberequested",children:[{value:"Usage",id:"usage-33",children:[],level:5}],level:3},{value:"toBeRequestedTimes",id:"toberequestedtimes",children:[{value:"Usage",id:"usage-34",children:[],level:5}],level:3},{value:"toBeRequestedWith",id:"toberequestedwith",children:[{value:"Usage",id:"usage-35",children:[],level:5}],level:3}],level:2},{value:"Default Matchers",id:"default-matchers",children:[],level:2},{value:"TypeScript",id:"typescript",children:[],level:2},{value:"JavaScript (VSCode)",id:"javascript-vscode",children:[],level:2},{value:"Adding your own matchers",id:"adding-your-own-matchers",children:[],level:2}],d={toc:u};function p(e){var t=e.components,a=(0,l.Z)(e,r);return(0,i.kt)("wrapper",(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"When you're writing tests, you often need to check that values meet certain conditions. ",(0,i.kt)("inlineCode",{parentName:"p"},"expect"),' gives you access to a number of "matchers" that let you validate different things on the ',(0,i.kt)("inlineCode",{parentName:"p"},"browser"),", an ",(0,i.kt)("inlineCode",{parentName:"p"},"element")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"mock")," object."),(0,i.kt)("h2",{id:"default-options"},"Default Options"),(0,i.kt)("p",null,"These default options below are connected to the waitforTimeout and waitforInterval options set in the config."),(0,i.kt)("p",null,"Only set the options below if you want to wait for specific timeouts for your assertions."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"{\n    wait: 2000, // ms to wait for expectation to succeed\n    interval: 100, // interval between attempts\n}\n")),(0,i.kt)("p",null,"Set options like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"before () {\n    require('expect-webdriverio').setOptions({ wait: 5000 })\n},\n")),(0,i.kt)("h3",{id:"matcher-options"},"Matcher Options"),(0,i.kt)("p",null,"Every matcher can take several options that allows you to modify the assertion:"),(0,i.kt)("h5",{id:"command-options"},"Command Options"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Name"),(0,i.kt)("th",{parentName:"tr",align:null},"Type"),(0,i.kt)("th",{parentName:"tr",align:null},"Details"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("code",null,(0,i.kt)("var",null,"wait"))),(0,i.kt)("td",{parentName:"tr",align:null},"number"),(0,i.kt)("td",{parentName:"tr",align:null},"time in ms to wait for expectation to succeed. Default: ",(0,i.kt)("inlineCode",{parentName:"td"},"3000"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("code",null,(0,i.kt)("var",null,"interval"))),(0,i.kt)("td",{parentName:"tr",align:null},"number"),(0,i.kt)("td",{parentName:"tr",align:null},"interval between attempts. Default: ",(0,i.kt)("inlineCode",{parentName:"td"},"100"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("code",null,(0,i.kt)("var",null,"message"))),(0,i.kt)("td",{parentName:"tr",align:null},"string"),(0,i.kt)("td",{parentName:"tr",align:null},"user message to prepend before assertion error")))),(0,i.kt)("h5",{id:"string-options"},"String Options"),(0,i.kt)("p",null,"This options can be applied in addition to the command options when strings are being asserted."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Name"),(0,i.kt)("th",{parentName:"tr",align:null},"Type"),(0,i.kt)("th",{parentName:"tr",align:null},"Details"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("code",null,(0,i.kt)("var",null,"ignoreCase"))),(0,i.kt)("td",{parentName:"tr",align:null},"boolean"),(0,i.kt)("td",{parentName:"tr",align:null},"apply ",(0,i.kt)("inlineCode",{parentName:"td"},"toLowerCase")," to both actual and expected values")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("code",null,(0,i.kt)("var",null,"trim"))),(0,i.kt)("td",{parentName:"tr",align:null},"boolean"),(0,i.kt)("td",{parentName:"tr",align:null},"apply ",(0,i.kt)("inlineCode",{parentName:"td"},"trim")," to actual value")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("code",null,(0,i.kt)("var",null,"containing"))),(0,i.kt)("td",{parentName:"tr",align:null},"boolean"),(0,i.kt)("td",{parentName:"tr",align:null},"expect actual value to contain expected value, otherwise strict equal.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("code",null,(0,i.kt)("var",null,"asString"))),(0,i.kt)("td",{parentName:"tr",align:null},"boolean"),(0,i.kt)("td",{parentName:"tr",align:null},"might be helpful to force converting property value to string")))),(0,i.kt)("h5",{id:"number-options"},"Number Options"),(0,i.kt)("p",null,"This options can be applied in addition to the command options when numbers are being asserted."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Name"),(0,i.kt)("th",{parentName:"tr",align:null},"Type"),(0,i.kt)("th",{parentName:"tr",align:null},"Details"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("code",null,(0,i.kt)("var",null,"eq"))),(0,i.kt)("td",{parentName:"tr",align:null},"number"),(0,i.kt)("td",{parentName:"tr",align:null},"equals")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("code",null,(0,i.kt)("var",null,"lte"))),(0,i.kt)("td",{parentName:"tr",align:null},"number"),(0,i.kt)("td",{parentName:"tr",align:null},"less then equals")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("code",null,(0,i.kt)("var",null,"gte"))),(0,i.kt)("td",{parentName:"tr",align:null},"number"),(0,i.kt)("td",{parentName:"tr",align:null},"greater than or equals")))),(0,i.kt)("h2",{id:"browser-matchers"},"Browser Matchers"),(0,i.kt)("h3",{id:"tohaveurl"},"toHaveUrl"),(0,i.kt)("p",null,"Checks if browser is on a specific page."),(0,i.kt)("h5",{id:"usage"},"Usage"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"browser.url('https://webdriver.io/')\nawait expect(browser).toHaveUrl('https://webdriver.io')\n")),(0,i.kt)("h3",{id:"tohaveurlcontaining"},"toHaveUrlContaining"),(0,i.kt)("p",null,"Checks if browser is on a page URL that contains a value."),(0,i.kt)("h5",{id:"usage-1"},"Usage"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"browser.url('https://webdriver.io/')\nawait expect(browser).toHaveUrlContaining('webdriver')\n")),(0,i.kt)("h3",{id:"tohavetitle"},"toHaveTitle"),(0,i.kt)("p",null,"Checks if website has a specific title."),(0,i.kt)("h5",{id:"usage-2"},"Usage"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"browser.url('https://webdriver.io/')\nawait expect(browser).toHaveTitle('WebdriverIO \xb7 Next-gen browser and mobile automation test framework for Node.js')\n")),(0,i.kt)("h3",{id:"tohavetitlecontaining"},"toHaveTitleContaining"),(0,i.kt)("p",null,"Checks if website has a specific title that contains a value."),(0,i.kt)("h5",{id:"usage-3"},"Usage"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"browser.url('https://webdriver.io/')\nawait expect(browser).toHaveTitleContaining('WebdriverIO')\n")),(0,i.kt)("h2",{id:"element-matchers"},"Element Matchers"),(0,i.kt)("h3",{id:"tobedisplayed"},"toBeDisplayed"),(0,i.kt)("p",null,"Calls ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/webdriverio/expect-webdriverio/blob/master/docs/api/element/isDisplayed.html"},(0,i.kt)("inlineCode",{parentName:"a"},"isDisplayed"))," on given element."),(0,i.kt)("h5",{id:"usage-4"},"Usage"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const elem = $('#someElem')\nawait expect(elem).toBeDisplayed()\n")),(0,i.kt)("h3",{id:"toexist"},"toExist"),(0,i.kt)("p",null,"Calls ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/webdriverio/expect-webdriverio/blob/master/docs/api/element/isExisting.html"},(0,i.kt)("inlineCode",{parentName:"a"},"isExisting"))," on given element."),(0,i.kt)("h5",{id:"usage-5"},"Usage"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const elem = $('#someElem')\nawait expect(elem).toExist()\n")),(0,i.kt)("h3",{id:"tobepresent"},"toBePresent"),(0,i.kt)("p",null,"Same as ",(0,i.kt)("inlineCode",{parentName:"p"},"toExist"),"."),(0,i.kt)("h5",{id:"usage-6"},"Usage"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const elem = $('#someElem')\nawait expect(elem).toBePresent()\n")),(0,i.kt)("h3",{id:"tobeexisting"},"toBeExisting"),(0,i.kt)("p",null,"Same as ",(0,i.kt)("inlineCode",{parentName:"p"},"toExist"),"."),(0,i.kt)("h5",{id:"usage-7"},"Usage"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const elem = $('#someElem')\nawait expect(elem).toBeExisting()\n")),(0,i.kt)("h3",{id:"tobefocused"},"toBeFocused"),(0,i.kt)("p",null,"Checks if element has focus. This assertion only works in a web context."),(0,i.kt)("h5",{id:"usage-8"},"Usage"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const elem = $('#someElem')\nawait expect(elem).toBeFocused()\n")),(0,i.kt)("h3",{id:"tohaveattribute"},"toHaveAttribute"),(0,i.kt)("p",null,"Checks if an element has a certain attribute with a specific value."),(0,i.kt)("h5",{id:"usage-9"},"Usage"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const myInput = $('input')\nawait expect(myInput).toHaveAttribute('class', 'form-control')\n")),(0,i.kt)("h3",{id:"tohaveattr"},"toHaveAttr"),(0,i.kt)("p",null,"Same as ",(0,i.kt)("inlineCode",{parentName:"p"},"toHaveAttribute"),"."),(0,i.kt)("h5",{id:"usage-10"},"Usage"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const myInput = $('input')\nawait expect(myInput).toHaveAttr('class', 'form-control')\n")),(0,i.kt)("h3",{id:"tohaveattributecontaining"},"toHaveAttributeContaining"),(0,i.kt)("p",null,"Checks if an element has a certain attribute that contains a value."),(0,i.kt)("h5",{id:"usage-11"},"Usage"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const myInput = $('input')\nawait expect(myInput).toHaveAttributeContaining('class', 'form')\n")),(0,i.kt)("h3",{id:"tohaveattrcontaining"},"toHaveAttrContaining"),(0,i.kt)("p",null,"Same as ",(0,i.kt)("inlineCode",{parentName:"p"},"toHaveAttributeContaining"),"."),(0,i.kt)("h5",{id:"usage-12"},"Usage"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const myInput = $('input')\nawait expect(myInput).toHaveAttrContaining('class', 'form')\n")),(0,i.kt)("h3",{id:"tohaveelementclass"},"toHaveElementClass"),(0,i.kt)("p",null,"Checks if an element has a certain class name."),(0,i.kt)("h5",{id:"usage-13"},"Usage"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const myInput = $('input')\nawait expect(myInput).toHaveElementClass('form-control', { message: 'Not a form control!', })\n")),(0,i.kt)("h3",{id:"tohaveelementclasscontaining"},"toHaveElementClassContaining"),(0,i.kt)("p",null,"Checks if an element has a certain class name that contains provided value."),(0,i.kt)("h5",{id:"usage-14"},"Usage"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const myInput = $('input')\nawait expect(myInput).toHaveElementClassContaining('form')\n")),(0,i.kt)("h3",{id:"tohaveelementproperty"},"toHaveElementProperty"),(0,i.kt)("p",null,"Checks if an element has a certain property."),(0,i.kt)("h5",{id:"usage-15"},"Usage"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const elem = $('#elem')\nawait expect(elem).toHaveElementProperty('height', 23)\nawait expect(elem).not.toHaveElementProperty('height', 0)\n")),(0,i.kt)("h3",{id:"tohavevalue"},"toHaveValue"),(0,i.kt)("p",null,"Checks if an input element has a certain value."),(0,i.kt)("h5",{id:"usage-16"},"Usage"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const myInput = $('input')\nawait expect(myInput).toHaveValue('user', { ignoreCase: true })\n")),(0,i.kt)("h3",{id:"tohavevaluecontaining"},"toHaveValueContaining"),(0,i.kt)("p",null,"Checks if an input element contains a certain value."),(0,i.kt)("h5",{id:"usage-17"},"Usage"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const myInput = $('input')\nawait expect(myInput).toHaveValueContaining('us')\n")),(0,i.kt)("h3",{id:"tobeclickable"},"toBeClickable"),(0,i.kt)("p",null,"Checks if an element can be clicked by calling ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/webdriverio/expect-webdriverio/blob/master/docs/api/element/isClickable.html"},(0,i.kt)("inlineCode",{parentName:"a"},"isClickable"))," on the element."),(0,i.kt)("h5",{id:"usage-18"},"Usage"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const elem = $('#elem')\nawait expect(elem).toBeClickable()\n")),(0,i.kt)("h3",{id:"tobedisabled"},"toBeDisabled"),(0,i.kt)("p",null,"Checks if an element is disabled by calling ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/webdriverio/expect-webdriverio/blob/master/docs/api/element/isEnabled.html"},(0,i.kt)("inlineCode",{parentName:"a"},"isEnabled"))," on the element."),(0,i.kt)("h5",{id:"usage-19"},"Usage"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const elem = $('#elem')\nawait expect(elem).toBeDisabled()\n// same as\nawait expect(elem).not.toBeEnabled()\n")),(0,i.kt)("h3",{id:"tobeenabled"},"toBeEnabled"),(0,i.kt)("p",null,"Checks if an element is enabled by calling ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/webdriverio/expect-webdriverio/blob/master/docs/api/element/isEnabled.html"},(0,i.kt)("inlineCode",{parentName:"a"},"isEnabled"))," on the element."),(0,i.kt)("h5",{id:"usage-20"},"Usage"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const elem = $('#elem')\nawait expect(elem).toBeEnabled()\n// same as\nawait expect(elem).not.toBeDisabled()\n")),(0,i.kt)("h3",{id:"tobeselected"},"toBeSelected"),(0,i.kt)("p",null,"Checks if an element is enabled by calling ",(0,i.kt)("a",{parentName:"p",href:"https://webdriver.io/docs/api/element/isSelected/"},(0,i.kt)("inlineCode",{parentName:"a"},"isSelected"))," on the element."),(0,i.kt)("h5",{id:"usage-21"},"Usage"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const elem = $('#elem')\nawait expect(elem).toBeSelected()\n")),(0,i.kt)("h3",{id:"tobechecked"},"toBeChecked"),(0,i.kt)("p",null,"Same as ",(0,i.kt)("inlineCode",{parentName:"p"},"toBeSelected"),"."),(0,i.kt)("h5",{id:"usage-22"},"Usage"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const elem = $('#elem')\nawait expect(elem).toBeChecked()\n")),(0,i.kt)("h3",{id:"tohavehref"},"toHaveHref"),(0,i.kt)("p",null,"Checks if link element has a specific link target."),(0,i.kt)("h5",{id:"usage-23"},"Usage"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const link = $('a')\nawait expect(link).toHaveHref('https://webdriver.io')\n")),(0,i.kt)("h3",{id:"tohavelink"},"toHaveLink"),(0,i.kt)("p",null,"Same as ",(0,i.kt)("inlineCode",{parentName:"p"},"toHaveHref"),"."),(0,i.kt)("h5",{id:"usage-24"},"Usage"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const link = $('a')\nawait expect(link).toHaveLink('https://webdriver.io')\n")),(0,i.kt)("h3",{id:"tohavehrefcontaining"},"toHaveHrefContaining"),(0,i.kt)("p",null,"Checks if link element contains a specific link target."),(0,i.kt)("h5",{id:"usage-25"},"Usage"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const link = $('a')\nawait expect(link).toHaveHrefContaining('webdriver.io')\n")),(0,i.kt)("h3",{id:"tohavelinkcontaining"},"toHaveLinkContaining"),(0,i.kt)("p",null,"Same as ",(0,i.kt)("inlineCode",{parentName:"p"},"toHaveHrefContaining"),"."),(0,i.kt)("h5",{id:"usage-26"},"Usage"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const link = $('a')\nawait expect(link).toHaveLinkContaining('webdriver.io')\n")),(0,i.kt)("h3",{id:"tohaveid"},"toHaveId"),(0,i.kt)("p",null,"Checks if element has a specific ",(0,i.kt)("inlineCode",{parentName:"p"},"id")," attribute."),(0,i.kt)("h5",{id:"usage-27"},"Usage"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const elem = $('#elem')\nawait expect(elem).toHaveId('elem')\n")),(0,i.kt)("h3",{id:"tohavetext"},"toHaveText"),(0,i.kt)("p",null,"Checks if element has a specific text. Can also be called with an array as parameter in the case where the element can have different texts."),(0,i.kt)("h5",{id:"usage-28"},"Usage"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"browser.url('https://webdriver.io/')\nconst elem = $('.tagline')\nawait expect(elem).toHaveText('Next-gen browser and mobile automation test framework for Node.js')\nawait expect(elem).toHaveText(['Next-gen browser and mobile automation test framework for Node.js', 'Adding helper functions'])\n")),(0,i.kt)("h3",{id:"tohavetextcontaining"},"toHaveTextContaining"),(0,i.kt)("p",null,"Checks if element contains a specific text. Can also be called with an array as parameter in the case where the element can have different texts."),(0,i.kt)("h5",{id:"usage-29"},"Usage"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"browser.url('https://webdriver.io/')\nconst elem = $('.tagline')\nawait expect(elem).toHaveTextContaining('browser and mobile automation test framework')\nawait expect(elem).toHaveTextContaining(['browser and mobile automation test framework', 'helper functions'])\n")),(0,i.kt)("h3",{id:"tobedisplayedinviewport"},"toBeDisplayedInViewport"),(0,i.kt)("p",null,"Checks if an element is within the viewport by calling ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/webdriverio/expect-webdriverio/blob/master/docs/api/element/isDisplayedInViewport.html"},(0,i.kt)("inlineCode",{parentName:"a"},"isDisplayedInViewport"))," on the element."),(0,i.kt)("h5",{id:"usage-30"},"Usage"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const elem = $('#elem')\nawait expect(elem).toBeDisplayedInViewport()\n")),(0,i.kt)("h3",{id:"tohavechildren"},"toHaveChildren"),(0,i.kt)("p",null,"Checks amount of the fetched element's children by calling ",(0,i.kt)("inlineCode",{parentName:"p"},"element.$('./*')")," command."),(0,i.kt)("h5",{id:"usage-31"},"Usage"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const list = $('ul')\nawait expect(list).toHaveChildren() // the list has at least one item\n// same as\nawait expect(list).toHaveChildren({ gte: 1 })\n\nawait expect(list).toHaveChildren(3) // the list has 3 items\n// same as \nawait expect(list).toHaveChildren({ eq: 3 })\n")),(0,i.kt)("h3",{id:"tobeelementsarrayofsize"},"toBeElementsArrayOfSize"),(0,i.kt)("p",null,"Checks amount of fetched elements using ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/webdriverio/expect-webdriverio/blob/master/docs/api/browser/$.html"},(0,i.kt)("inlineCode",{parentName:"a"},"$$"))," command."),(0,i.kt)("h5",{id:"usage-32"},"Usage"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const listItems = $$('ul>li')\nawait expect(listItems).toBeElementsArrayOfSize(5) // 5 items in the list\n\nawait expect(listItems).toBeElementsArrayOfSize({ lte: 10 })\n// same as\nassert.ok(listItems.length <= 10)\n")),(0,i.kt)("h2",{id:"network-matchers"},"Network Matchers"),(0,i.kt)("h3",{id:"toberequested"},"toBeRequested"),(0,i.kt)("p",null,"Checks that mock was called"),(0,i.kt)("h5",{id:"usage-33"},"Usage"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const mock = browser.mock('**/api/todo*')\nawait expect(mock).toBeRequested()\n")),(0,i.kt)("h3",{id:"toberequestedtimes"},"toBeRequestedTimes"),(0,i.kt)("p",null,"Checks that mock was called for the expected amount of times"),(0,i.kt)("h5",{id:"usage-34"},"Usage"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const mock = browser.mock('**/api/todo*')\nawait expect(mock).toBeRequestedTimes(2) // await expect(mock).toBeRequestedTimes({ eq: 2 })\n\nawait expect(mock).toBeRequestedTimes({ gte: 5, lte: 10 }) // request called at least 5 times but less than 11\n")),(0,i.kt)("h3",{id:"toberequestedwith"},"toBeRequestedWith"),(0,i.kt)("p",null,"Checks that mock was called according to the expected options."),(0,i.kt)("p",null,"Most of the options supports expect/jasmine partial matchers like ",(0,i.kt)("a",{parentName:"p",href:"https://jestjs.io/docs/en/expect#expectobjectcontainingobject"},"expect.objectContaining")),(0,i.kt)("h5",{id:"usage-35"},"Usage"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const mock = browser.mock('**/api/todo*', { method: 'POST' })\n\nawait expect(mock).toBeRequestedWith({\n    url: 'http://localhost:8080/api/todo',          // [optional] string | function | custom matcher\n    method: 'POST',                                 // [optional] string | array\n    statusCode: 200,                                // [optional] number | array\n    requestHeaders: { Authorization: 'foo' },       // [optional] object | function | custom matcher\n    responseHeaders: { Authorization: 'bar' },      // [optional] object | function | custom matcher\n    postData: { title: 'foo', description: 'bar' }, // [optional] object | function | custom matcher\n    response: { success: true },                    // [optional] object | function | custom matcher\n})\n\nawait expect(mock).toBeRequestedWith({\n    url: expect.stringMatching(/.*\\/api\\/.*/i),\n    method: ['POST', 'PUT'], // either POST or PUT\n    statusCode: [401, 403],  // either 401 or 403\n    requestHeaders: headers => headers.Authorization.startsWith('Bearer '),\n    postData: expect.objectContaining({ released: true, title: expect.stringContaining('foobar') }),\n    response: r => Array.isArray(r) && r.data.items.length === 20\n})\n")),(0,i.kt)("h2",{id:"default-matchers"},"Default Matchers"),(0,i.kt)("p",null,"In addition to the ",(0,i.kt)("inlineCode",{parentName:"p"},"expect-webdriverio")," matchers you can use builtin Jest's ",(0,i.kt)("a",{parentName:"p",href:"https://jestjs.io/docs/en/expect"},"expect")," assertions or ",(0,i.kt)("a",{parentName:"p",href:"https://jasmine.github.io/api/3.5/global.html#expect"},"expect/expectAsync")," for Jasmine."),(0,i.kt)("h2",{id:"typescript"},"TypeScript"),(0,i.kt)("p",null,"If you are using the ",(0,i.kt)("a",{parentName:"p",href:"https://webdriver.io/docs/clioptions"},"WDIO Testrunner")," everything will be automatically setup. Just follow the ",(0,i.kt)("a",{parentName:"p",href:"https://webdriver.io/docs/typescript#framework-setup"},"setup guide")," from the docs. However if you run WebdriverIO with a different testrunner or in a simple Node.js script you will need to add ",(0,i.kt)("inlineCode",{parentName:"p"},"expect-webdriverio")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"types")," in the ",(0,i.kt)("inlineCode",{parentName:"p"},"tsconfig.json"),"."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'"expect-webdriverio"')," for everyone except of Jasmine/Jest users."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'"expect-webdriverio/jasmine"')," Jasmine"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'"expect-webdriverio/jest"')," Jest")),(0,i.kt)("h2",{id:"javascript-vscode"},"JavaScript (VSCode)"),(0,i.kt)("p",null,"It's required to create ",(0,i.kt)("inlineCode",{parentName:"p"},"jsconfig.json")," in project root and refer to the type definitions to make autocompletion work in vanilla js."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "include": [\n    "**/*.js",\n    "**/*.json",\n    "node_modules/expect-webdriverio"\n  ]\n}\n')),(0,i.kt)("h2",{id:"adding-your-own-matchers"},"Adding your own matchers"),(0,i.kt)("p",null,"Similar to how ",(0,i.kt)("inlineCode",{parentName:"p"},"expect-webdriverio")," extends Jasmine/Jest matchers it's possible to add custom matchers."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Jasmine see ",(0,i.kt)("a",{parentName:"li",href:"https://jasmine.github.io/2.5/custom_matcher.html"},"custom matchers")," doc"),(0,i.kt)("li",{parentName:"ul"},"Everyone else see Jest's ",(0,i.kt)("a",{parentName:"li",href:"https://jestjs.io/docs/en/expect#expectextendmatchers"},"expect.extend"))),(0,i.kt)("p",null,"Custom matchers should be added in wdio ",(0,i.kt)("inlineCode",{parentName:"p"},"before")," hook"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"// wdio.conf.js\n{\n  before() {\n    const matchers = require('./myMatchers')\n    matchers.addCustomMatchers()\n  }\n}\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"// myMatchers.js - Jest example\nmodule.exports = {\n    addCustomMatchers: () => {\n        expect.extend({\n            myMatcher(actual, expected) {\n                return { pass: actual === expected, message: () => 'some message' }\n            },\n        })\n    }\n}\n")))}p.isMDXComponent=!0}}]);