"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7709],{4137:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(n),m=i,h=d["".concat(s,".").concat(m)]||d[m]||u[m]||a;return n?r.createElement(h,o(o({ref:t},c),{},{components:n})):r.createElement(h,o({ref:t},c))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var p=2;p<a;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8448:function(e,t,n){var r=n(7294);t.Z=function(e){var t=e.children,n=e.hidden,i=e.className;return r.createElement("div",{role:"tabpanel",hidden:n,className:i},t)}},7225:function(e,t,n){n.d(t,{Z:function(){return d}});var r=n(7462),i=n(7294),a=n(1048),o=n(2713);var l=function(){var e=(0,i.useContext)(o.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e},s=n(3309),p=n(6010),c="tabItem_vU9c";function u(e){var t,n,r,a=e.lazy,o=e.block,u=e.defaultValue,d=e.values,m=e.groupId,h=e.className,k=i.Children.map(e.children,(function(e){if((0,i.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),v=null!=d?d:k.map((function(e){var t=e.props;return{value:t.value,label:t.label}})),f=(0,s.lx)(v,(function(e,t){return e.value===t.value}));if(f.length>0)throw new Error('Docusaurus error: Duplicate values "'+f.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var g=null===u?u:null!=(t=null!=u?u:null==(n=k.find((function(e){return e.props.default})))?void 0:n.props.value)?t:null==(r=k[0])?void 0:r.props.value;if(null!==g&&!v.some((function(e){return e.value===g})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+g+'" but none of its children has the corresponding value. Available values are: '+v.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var b=l(),w=b.tabGroupChoices,y=b.setTabGroupChoices,N=(0,i.useState)(g),x=N[0],C=N[1],O=[],T=(0,s.o5)().blockElementScrollPositionUntilNextRender;if(null!=m){var j=w[m];null!=j&&j!==x&&v.some((function(e){return e.value===j}))&&C(j)}var E=function(e){var t=e.currentTarget,n=O.indexOf(t),r=v[n].value;r!==x&&(T(t),C(r),null!=m&&y(m,r))},I=function(e){var t,n=null;switch(e.key){case"ArrowRight":var r=O.indexOf(e.currentTarget)+1;n=O[r]||O[0];break;case"ArrowLeft":var i=O.indexOf(e.currentTarget)-1;n=O[i]||O[O.length-1]}null==(t=n)||t.focus()};return i.createElement("div",{className:"tabs-container"},i.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,p.Z)("tabs",{"tabs--block":o},h)},v.map((function(e){var t=e.value,n=e.label;return i.createElement("li",{role:"tab",tabIndex:x===t?0:-1,"aria-selected":x===t,className:(0,p.Z)("tabs__item",c,{"tabs__item--active":x===t}),key:t,ref:function(e){return O.push(e)},onKeyDown:I,onFocus:E,onClick:E},null!=n?n:t)}))),a?(0,i.cloneElement)(k.filter((function(e){return e.props.value===x}))[0],{className:"margin-vert--md"}):i.createElement("div",{className:"margin-vert--md"},k.map((function(e,t){return(0,i.cloneElement)(e,{key:t,hidden:e.props.value!==x})}))))}function d(e){var t=(0,a.Z)();return i.createElement(u,(0,r.Z)({key:String(t)},e))}},2713:function(e,t,n){var r=(0,n(7294).createContext)(void 0);t.Z=r},6363:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return c},default:function(){return d}});var r=n(7462),i=n(3366),a=(n(7294),n(4137)),o=(n(7225),n(8448),["components"]),l={id:"wdio-wiremock-service",title:"WireMock Service",custom_edit_url:"https://github.com/erwinheitzman/wdio-wiremock-service/edit/master//README.md"},s=void 0,p={unversionedId:"wdio-wiremock-service",id:"wdio-wiremock-service",isDocsHomePage:!1,title:"WireMock Service",description:"wdio-wiremock-service is a 3rd party package, for more information please see GitHub | npm",source:"@site/docs/_wdio-wiremock-service.md",sourceDirName:".",slug:"/wdio-wiremock-service",permalink:"/docs/wdio-wiremock-service",editUrl:"https://github.com/erwinheitzman/wdio-wiremock-service/edit/master//README.md",tags:[],version:"current",frontMatter:{id:"wdio-wiremock-service",title:"WireMock Service",custom_edit_url:"https://github.com/erwinheitzman/wdio-wiremock-service/edit/master//README.md"},sidebar:"docs",previous:{title:"UI5 Service",permalink:"/docs/wdio-ui5-service"},next:{title:"Slack Service",permalink:"/docs/wdio-slack-service"}},c=[{value:"Installation",id:"installation",children:[],level:2},{value:"Configuration",id:"configuration",children:[],level:2},{value:"Usage",id:"usage",children:[{value:"Fixtures",id:"fixtures",children:[],level:3},{value:"Mocks",id:"mocks",children:[],level:3},{value:"HTTP API",id:"http-api",children:[{value:"Basic stubbing",id:"basic-stubbing",children:[],level:4},{value:"Saving stubs",id:"saving-stubs",children:[],level:4},{value:"File serving",id:"file-serving",children:[],level:4},{value:"Removing stubs",id:"removing-stubs",children:[],level:4},{value:"Reset",id:"reset",children:[],level:4},{value:"Getting all currently registered stub mappings",id:"getting-all-currently-registered-stub-mappings",children:[],level:4},{value:"Getting a single stub mapping by ID",id:"getting-a-single-stub-mapping-by-id",children:[],level:4},{value:"More information",id:"more-information",children:[],level:4}],level:3},{value:"Writing tests",id:"writing-tests",children:[{value:"Using the WDIO testrunner in synch mode",id:"using-the-wdio-testrunner-in-synch-mode",children:[],level:4},{value:"Using the WDIO testrunner in async mode",id:"using-the-wdio-testrunner-in-async-mode",children:[],level:4},{value:"Using WebdriverIO Standalone",id:"using-webdriverio-standalone",children:[],level:4}],level:3}],level:2},{value:"Options",id:"options",children:[{value:"port",id:"port",children:[],level:3},{value:"rootDir",id:"rootdir",children:[],level:3},{value:"version",id:"version",children:[],level:3},{value:"silent",id:"silent",children:[],level:3},{value:"mavenBaseUrl",id:"mavenbaseurl",children:[],level:3},{value:"args",id:"args",children:[],level:3}],level:2}],u={toc:c};function d(e){var t=e.components,n=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"wdio-wiremock-service is a 3rd party package, for more information please see ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/erwinheitzman/wdio-wiremock-service"},"GitHub")," | ",(0,a.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/wdio-wiremock-service"},"npm"))),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/wdio-wiremock-service"},(0,a.kt)("img",{parentName:"a",src:"https://img.shields.io/npm/dm/wdio-wiremock-service.svg",alt:"downloads"}))),(0,a.kt)("p",null,"This service helps you to run ",(0,a.kt)("a",{parentName:"p",href:"http://wiremock.org/"},"WireMock")," seamlessly when running tests with ",(0,a.kt)("a",{parentName:"p",href:"https://webdriver.io"},"WebdriverIO"),". It uses the well known ",(0,a.kt)("a",{parentName:"p",href:"https://mvnrepository.com/repos/central"},"Maven")," repository to download the WireMock jar for you which is then automatically installed, started and stopped. Stay up to date by joining the community over at ",(0,a.kt)("a",{parentName:"p",href:"https://gitter.im/erwinheitzman/wdio-wiremock-service"},"Gitter")," for help and support."),(0,a.kt)("h2",{id:"installation"},"Installation"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"npm i -D wdio-wiremock-service\n")),(0,a.kt)("p",null,"Instructions on how to install ",(0,a.kt)("inlineCode",{parentName:"p"},"WebdriverIO")," can be found ",(0,a.kt)("a",{parentName:"p",href:"https://webdriver.io/docs/gettingstarted.html"},"here.")),(0,a.kt)("h2",{id:"configuration"},"Configuration"),(0,a.kt)("p",null,"In order to use the service with the wdio testrunner you need to add it to your service array:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"// wdio.conf.js\nexport.config = {\n  // ...\n  services: ['wiremock'],\n  // ...\n};\n")),(0,a.kt)("p",null,"IMPORTANT in version 5 of WebdriverIO you will need to set the port manually!"),(0,a.kt)("p",null,"When using webdriverio standalone you need to add the service and trigger the ",(0,a.kt)("inlineCode",{parentName:"p"},"onPrepare")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"onComplete")," hooks manually. An example can be found ",(0,a.kt)("a",{parentName:"p",href:"####webdriverio-standalone"},"here")," (the example makes use of ",(0,a.kt)("a",{parentName:"p",href:"https://jestjs.io/en/"},"Jest"),"):"),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)("p",null,"In the root directory (default ",(0,a.kt)("inlineCode",{parentName:"p"},"./mock"),") you find two subdirectories, ",(0,a.kt)("inlineCode",{parentName:"p"},"__files")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"mappings")," which are used for your fixtures and mocks."),(0,a.kt)("h3",{id:"fixtures"},"Fixtures"),(0,a.kt)("p",null,"WireMock allows you to use fixture files alongside your mocks, place these in the ",(0,a.kt)("inlineCode",{parentName:"p"},"__files")," directory."),(0,a.kt)("p",null,"Example of a fixture:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},"Hello world!\n")),(0,a.kt)("h3",{id:"mocks"},"Mocks"),(0,a.kt)("p",null,"In order for WireMock to find your mocks, place them in the ",(0,a.kt)("inlineCode",{parentName:"p"},"mappings")," directory."),(0,a.kt)("p",null,"Example of a mock:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "request": {\n        "method": "GET",\n        "url": "/api/mytest"\n    },\n    "response": {\n        "status": 200,\n        "body": "Hello world!"\n    }\n}\n')),(0,a.kt)("p",null,"Example of a mock with a fixture:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "request": {\n        "method": "GET",\n        "url": "/api/mytest"\n    },\n    "response": {\n        "status": 200,\n        "bodyFileName": "hello-world.json"\n    }\n}\n')),(0,a.kt)("h3",{id:"http-api"},"HTTP API"),(0,a.kt)("p",null,"You can also create a stub mapping by posting to WireMock\u2019s HTTP API, this is useful when you want to set different states."),(0,a.kt)("h4",{id:"basic-stubbing"},"Basic stubbing"),(0,a.kt)("p",null,"The following code will configure a response with a status of 200 to be returned when the relative URL exactly matches /example/data (including query parameters). The body of the response will be ",(0,a.kt)("inlineCode",{parentName:"p"},'{ "dummy": [{ "data": "example" }]}')," and a Content-Type header will be sent with a value of application/json."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"it(`a mocked api response created using WireMock's HTTP API`, async () => {\n    const expectedRes = {\n        dummy: [\n            {\n                data: 'example',\n            },\n        ],\n    };\n\n    const body = JSON.stringify({\n        request: {\n            method: 'GET',\n            url: '/example/data',\n        },\n        response: {\n            status: 200,\n            jsonBody: expectedRes,\n        },\n    });\n\n    await browser.call(async () => {\n        await nodeFetch('http://localhost:8080/__admin/mappings/new', { method: 'POST', body });\n\n        await nodeFetch('http://localhost:8080/example/data')\n            .then((res: any) => res.json())\n            .then((body: any) => expect(body).toEqual(expectedRes));\n    });\n});\n")),(0,a.kt)("p",null,"To create the stub described above via the JSON API, the following document can either be posted to ",(0,a.kt)("inlineCode",{parentName:"p"},"http://<host>:<port>/__admin/mappings")," or placed in a file with a .json extension under the mappings directory as a fixture."),(0,a.kt)("h4",{id:"saving-stubs"},"Saving stubs"),(0,a.kt)("p",null,"Stub mappings which have been created can be persisted to the mappings directory via a call to WireMock by posting a request with an empty body to ",(0,a.kt)("inlineCode",{parentName:"p"},"http://<host>:<port>/__admin/mappings/save"),"."),(0,a.kt)("h4",{id:"file-serving"},"File serving"),(0,a.kt)("p",null,"When running the standalone JAR, files placed under the ",(0,a.kt)("inlineCode",{parentName:"p"},"__files")," directory will be served up as if from under the docroot (rootDir), except if stub mapping matching the URL exists. For example if a file exists ",(0,a.kt)("inlineCode",{parentName:"p"},"__files/things/myfile.html")," and no stub mapping will match ",(0,a.kt)("inlineCode",{parentName:"p"},"/things/myfile.html")," then hitting ",(0,a.kt)("inlineCode",{parentName:"p"},"http://<host>:<port>/things/myfile.html")," will serve the file."),(0,a.kt)("h4",{id:"removing-stubs"},"Removing stubs"),(0,a.kt)("p",null,"Stub mappings can be deleted via the HTTP API by issuing a ",(0,a.kt)("inlineCode",{parentName:"p"},"DELETE")," to ",(0,a.kt)("inlineCode",{parentName:"p"},"http://<host>:<port>/__admin/mappings/{id}")," where id is the UUID of the stub mapping, found in its id field."),(0,a.kt)("h4",{id:"reset"},"Reset"),(0,a.kt)("p",null,"The WireMock server can be reset at any time, removing all stub mappings and deleting the request log by sending a ",(0,a.kt)("inlineCode",{parentName:"p"},"POST")," request with an empty body to ",(0,a.kt)("inlineCode",{parentName:"p"},"http://<host>:<port>/__admin/reset"),"."),(0,a.kt)("h4",{id:"getting-all-currently-registered-stub-mappings"},"Getting all currently registered stub mappings"),(0,a.kt)("p",null,"All stub mappings can be fetched by sending a ",(0,a.kt)("inlineCode",{parentName:"p"},"GET")," to ",(0,a.kt)("inlineCode",{parentName:"p"},"http://<host>:<port>/__admin/mappings"),".\nOptionally limit and offset parameters can be specified to constrain the set returned e.g. ",(0,a.kt)("inlineCode",{parentName:"p"},"GET")," ",(0,a.kt)("inlineCode",{parentName:"p"},"http://localhost:8080/__admin/mappings?limit=10&offset=50"),"."),(0,a.kt)("h4",{id:"getting-a-single-stub-mapping-by-id"},"Getting a single stub mapping by ID"),(0,a.kt)("p",null,"A single stub mapping can be retrieved by ID by sending a ",(0,a.kt)("inlineCode",{parentName:"p"},"GET")," to ",(0,a.kt)("inlineCode",{parentName:"p"},"http://<host>:<port>/__admin/mappings/{id}"),"."),(0,a.kt)("h4",{id:"more-information"},"More information"),(0,a.kt)("p",null,"For more information about stubbing check ",(0,a.kt)("a",{parentName:"p",href:"http://wiremock.org/docs/stubbing/"},"WireMock's official documentation"),"."),(0,a.kt)("h3",{id:"writing-tests"},"Writing tests"),(0,a.kt)("p",null,"Writing your first test is really straight forward:"),(0,a.kt)("h4",{id:"using-the-wdio-testrunner-in-synch-mode"},"Using the WDIO testrunner in synch mode"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="./test/specs/mytest.js"',title:'"./test/specs/mytest.js"'},"const fetch = require('node-fetch');\nconst assert = require('assert');\n\nit(`should assert the mock data`, () => {\n    browser.call(async () => {\n        await fetch('http://localhost:8080/api/mytest')\n            .then((res) => res.text())\n            .then((body) => {\n                // assert that the request body returns the expected value\n                assert.equal(body, 'More content');\n            });\n    });\n});\n")),(0,a.kt)("h4",{id:"using-the-wdio-testrunner-in-async-mode"},"Using the WDIO testrunner in async mode"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const fetch = require('node-fetch');\nconst assert = require('assert');\n\nit(`should assert the mock data`, async () => {\n    await browser.call(async () => {\n        await fetch('http://localhost:8080/api/mytest')\n            .then((res) => res.text())\n            .then((body) => {\n                // assert that the request body returns the expected value\n                assert.equal(body, 'More content');\n            });\n    });\n});\n")),(0,a.kt)("h4",{id:"using-webdriverio-standalone"},"Using WebdriverIO Standalone"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="./test/specs/mytest.js"',title:'"./test/specs/mytest.js"'},"const nodeFetch = require('node-fetch');\nconst { remote } = require('webdriverio');\nconst { launcher } = require('wdio-wiremock-service'); // import the service\n\nconst WDIO_OPTIONS = {\n    port: 9515, // chromedriver port\n    path: '/', // remove `path` if you decided using something different from driver binaries.\n    capabilities: {\n        browserName: 'chrome',\n    },\n};\n\nlet wiremockLauncher = new launcher(); // create instance of the service\nlet client;\n\nbeforeAll(async () => {\n    await wiremockLauncher.onPrepare(WDIO_OPTIONS); // run the onPrepare hook\n    client = await remote(WDIO_OPTIONS);\n});\n\nafterAll(async () => {\n    await client.deleteSession();\n    await wiremockLauncher.onComplete(); // run the onComplete hook\n});\n\ntest('should showoff a mocked api response', async () => {\n    await client.call(async () => {\n        await nodeFetch('http://localhost:8080/api/mytest')\n            .then((res) => res.text())\n            .then((body) => expect(body).toEqual('Hello world!'));\n    });\n});\n")),(0,a.kt)("h2",{id:"options"},"Options"),(0,a.kt)("p",null,"The following options can be added to the service."),(0,a.kt)("h3",{id:"port"},"port"),(0,a.kt)("p",null,"Port where WireMock should run on."),(0,a.kt)("p",null,"Type: ",(0,a.kt)("inlineCode",{parentName:"p"},"Number")),(0,a.kt)("p",null,"Default: ",(0,a.kt)("inlineCode",{parentName:"p"},"8080")),(0,a.kt)("p",null,"Example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"// wdio.conf.js\nexport.config = {\n  // ...\n  services: [\n    ['wiremock', { port: 8181 }]\n  ],\n  // ...\n};\n")),(0,a.kt)("h3",{id:"rootdir"},"rootDir"),(0,a.kt)("p",null,"Path where WireMock will look for files."),(0,a.kt)("p",null,"Type: ",(0,a.kt)("inlineCode",{parentName:"p"},"String")),(0,a.kt)("p",null,"Default: ",(0,a.kt)("inlineCode",{parentName:"p"},"./mock")),(0,a.kt)("p",null,"Example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"// wdio.conf.js\nexport.config = {\n  // ...\n  services: [\n    ['wiremock', { rootDir: './mock' }]\n  ],\n  // ...\n};\n")),(0,a.kt)("h3",{id:"version"},"version"),(0,a.kt)("p",null,"Version of WireMock to be downloaded and used."),(0,a.kt)("p",null,"Type: ",(0,a.kt)("inlineCode",{parentName:"p"},"String")),(0,a.kt)("p",null,"Default: ",(0,a.kt)("inlineCode",{parentName:"p"},"2.26.3")),(0,a.kt)("p",null,"Example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"// wdio.conf.js\nexport.config = {\n  // ...\n  services: [\n    ['wiremock', { version: '2.25.1' }]\n  ],\n  // ...\n};\n")),(0,a.kt)("h3",{id:"silent"},"silent"),(0,a.kt)("p",null,"Silent mode for logging WireMock's output (including additional logging from the service itself)."),(0,a.kt)("p",null,"Type: ",(0,a.kt)("inlineCode",{parentName:"p"},"Boolean")),(0,a.kt)("p",null,"Default: ",(0,a.kt)("inlineCode",{parentName:"p"},"false")),(0,a.kt)("p",null,"Example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"// wdio.conf.js\nexport.config = {\n  // ...\n  services: [\n    ['wiremock', { silent: true }]\n  ],\n  // ...\n};\n")),(0,a.kt)("h3",{id:"mavenbaseurl"},"mavenBaseUrl"),(0,a.kt)("p",null,"Base download url for Maven."),(0,a.kt)("p",null,"Type: ",(0,a.kt)("inlineCode",{parentName:"p"},"String")),(0,a.kt)("p",null,"Default: ",(0,a.kt)("inlineCode",{parentName:"p"},"https://repo1.maven.org/maven2")),(0,a.kt)("p",null,"Example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"// wdio.conf.js\nexport.config = {\n  // ...\n  services: [\n    ['wiremock', { mavenBaseUrl: 'https://repo1.maven.org/maven2' }]\n  ],\n  // ...\n};\n")),(0,a.kt)("h3",{id:"args"},"args"),(0,a.kt)("p",null,"List where you can pass all the supported arguments for configuring WireMock"),(0,a.kt)("p",null,"Note: you cannot pass the options (",(0,a.kt)("inlineCode",{parentName:"p"},"port"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"rootDir"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"stdio"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"mavenBaseUrl"),") here as they will be ignored."),(0,a.kt)("p",null,"Type: ",(0,a.kt)("inlineCode",{parentName:"p"},"Array")),(0,a.kt)("p",null,"Example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"// wdio.conf.js\nexport.config = {\n  // ...\n  services: [\n    ['wiremock', {\n      args: [ '--verbose', '--match-headers' ]\n    }]\n  ],\n  // ...\n};\n")),(0,a.kt)("p",null,"For more information on WebdriverIO see the ",(0,a.kt)("a",{parentName:"p",href:"https://webdriver.io"},"homepage"),"."))}d.isMDXComponent=!0}}]);